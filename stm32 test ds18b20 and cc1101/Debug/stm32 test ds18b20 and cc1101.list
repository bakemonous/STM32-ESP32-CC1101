
stm32 test ds18b20 and cc1101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08007f00  08007f00  00017f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082ac  080082ac  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  080082ac  080082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082b4  080082b4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082b8  080082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080082bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001f0  080084ac  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  080084ac  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b59  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c24  00000000  00000000  00031dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  000349e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4c  00000000  00000000  000359d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ab3  00000000  00000000  0003661c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015063  00000000  00000000  0004f0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009292d  00000000  00000000  00064132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052c0  00000000  00000000  000f6a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000fbd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ee8 	.word	0x08007ee8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08007ee8 	.word	0x08007ee8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <DWT_Delay_us+0x40>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000ec2:	f002 fbd3 	bl	800366c <HAL_RCC_GetHCLKFreq>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <DWT_Delay_us+0x44>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	0c9b      	lsrs	r3, r3, #18
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	fb02 f303 	mul.w	r3, r2, r3
 8000ed6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000ed8:	bf00      	nop
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <DWT_Delay_us+0x40>)
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	1ad2      	subs	r2, r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3f8      	bcc.n	8000eda <DWT_Delay_us+0x26>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e0001000 	.word	0xe0001000
 8000ef8:	431bde83 	.word	0x431bde83

08000efc <__spi_write>:
#define RANDOM_MULTIPLIER       109
#define RSSI_VALID_DELAY_US     1300

//static UINT8 rnd_seed = 0;

HAL_StatusTypeDef __spi_write(uint8_t *addr, uint8_t *pData, uint16_t size){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	4613      	mov	r3, r2
 8000f08:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <__spi_write+0x7c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <__spi_write+0x80>)
 8000f10:	8811      	ldrh	r1, [r2, #0]
 8000f12:	2200      	movs	r2, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 ff6b 	bl	8002df0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli
 8000f1a:	bf00      	nop
 8000f1c:	2140      	movs	r1, #64	; 0x40
 8000f1e:	4818      	ldr	r0, [pc, #96]	; (8000f80 <__spi_write+0x84>)
 8000f20:	f001 ff4e 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f8      	bne.n	8000f1c <__spi_write+0x20>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <__spi_write+0x88>)
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f32:	2201      	movs	r2, #1
 8000f34:	68f9      	ldr	r1, [r7, #12]
 8000f36:	f002 fc88 	bl	800384a <HAL_SPI_Transmit>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	75fb      	strb	r3, [r7, #23]
	if(status==HAL_OK && pData!=NULL)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10c      	bne.n	8000f5e <__spi_write+0x62>
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d009      	beq.n	8000f5e <__spi_write+0x62>
		status = HAL_SPI_Transmit(hal_spi, pData, size, 0xFFFF);
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <__spi_write+0x88>)
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	88fa      	ldrh	r2, [r7, #6]
 8000f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	f002 fc78 	bl	800384a <HAL_SPI_Transmit>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <__spi_write+0x7c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <__spi_write+0x80>)
 8000f64:	8811      	ldrh	r1, [r2, #0]
 8000f66:	2201      	movs	r2, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f001 ff41 	bl	8002df0 <HAL_GPIO_WritePin>
	return status;
 8000f6e:	7dfb      	ldrb	r3, [r7, #23]

}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000214 	.word	0x20000214
 8000f7c:	20000210 	.word	0x20000210
 8000f80:	40020000 	.word	0x40020000
 8000f84:	2000020c 	.word	0x2000020c

08000f88 <__spi_read>:

HAL_StatusTypeDef __spi_read(uint8_t *addr, uint8_t *pData, uint16_t size){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	4613      	mov	r3, r2
 8000f94:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <__spi_read+0x70>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <__spi_read+0x74>)
 8000f9c:	8811      	ldrh	r1, [r2, #0]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 ff25 	bl	8002df0 <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli
 8000fa6:	bf00      	nop
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	4815      	ldr	r0, [pc, #84]	; (8001000 <__spi_read+0x78>)
 8000fac:	f001 ff08 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f8      	bne.n	8000fa8 <__spi_read+0x20>
	//HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <__spi_read+0x7c>)
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	68f9      	ldr	r1, [r7, #12]
 8000fc2:	f002 fc42 	bl	800384a <HAL_SPI_Transmit>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(hal_spi, pData, size, 0xFFFF);
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <__spi_read+0x7c>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	88fa      	ldrh	r2, [r7, #6]
 8000fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	f002 fd7b 	bl	8003ad0 <HAL_SPI_Receive>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	75fb      	strb	r3, [r7, #23]

//	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <__spi_read+0x70>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <__spi_read+0x74>)
 8000fe4:	8811      	ldrh	r1, [r2, #0]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 ff01 	bl	8002df0 <HAL_GPIO_WritePin>

	return status;
 8000fee:	7dfb      	ldrb	r3, [r7, #23]

}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000214 	.word	0x20000214
 8000ffc:	20000210 	.word	0x20000210
 8001000:	40020000 	.word	0x40020000
 8001004:	2000020c 	.word	0x2000020c

08001008 <TI_write_reg>:

void TI_write_reg(UINT8 addr, UINT8 value)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	460a      	mov	r2, r1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	4613      	mov	r3, r2
 8001016:	71bb      	strb	r3, [r7, #6]
	__spi_write(&addr, &value, 1);
 8001018:	1db9      	adds	r1, r7, #6
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	2201      	movs	r2, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff6c 	bl	8000efc <__spi_write>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <TI_write_burst_reg>:

void TI_write_burst_reg(BYTE addr, BYTE* buffer, BYTE count)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
	addr = (addr | WRITE_BURST);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001042:	b2db      	uxtb	r3, r3
 8001044:	71fb      	strb	r3, [r7, #7]
	__spi_write(&addr, buffer, count);
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	b29a      	uxth	r2, r3
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	6839      	ldr	r1, [r7, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff54 	bl	8000efc <__spi_write>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <TI_strobe>:

void TI_strobe(BYTE strobe)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	__spi_write(&strobe, 0, 0);
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff45 	bl	8000efc <__spi_write>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <TI_read_status>:
	__spi_read(&addr, &data, 1);
	return data;
}

BYTE TI_read_status(BYTE addr)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	addr= (addr | READ_BURST);
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800108a:	b2db      	uxtb	r3, r3
 800108c:	71fb      	strb	r3, [r7, #7]
	__spi_read(&addr, &data, 1);
 800108e:	f107 010f 	add.w	r1, r7, #15
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	2201      	movs	r2, #1
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff76 	bl	8000f88 <__spi_read>
	return data;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <TI_send_packet>:
	hal_uart = huart;
}


void TI_send_packet(BYTE* txBuffer, UINT8 size)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	70fb      	strb	r3, [r7, #3]
	BYTE status;

  	TI_strobe(CCxxx0_SIDLE); //ïåðåâîäèì ìîäåì â IDLE
 80010b2:	2036      	movs	r0, #54	; 0x36
 80010b4:	f7ff ffd2 	bl	800105c <TI_strobe>

    TI_write_reg(CCxxx0_TXFIFO, size);
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	4619      	mov	r1, r3
 80010bc:	203f      	movs	r0, #63	; 0x3f
 80010be:	f7ff ffa3 	bl	8001008 <TI_write_reg>

	status = TI_read_status(CCxxx0_TXBYTES);
 80010c2:	203a      	movs	r0, #58	; 0x3a
 80010c4:	f7ff ffd9 	bl	800107a <TI_read_status>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]

    TI_write_burst_reg(CCxxx0_TXFIFO, txBuffer, size);
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	461a      	mov	r2, r3
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	203f      	movs	r0, #63	; 0x3f
 80010d4:	f7ff ffaa 	bl	800102c <TI_write_burst_reg>

	status = TI_read_status(CCxxx0_TXBYTES);
 80010d8:	203a      	movs	r0, #58	; 0x3a
 80010da:	f7ff ffce 	bl	800107a <TI_read_status>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]

    TI_strobe(CCxxx0_STX);
 80010e2:	2035      	movs	r0, #53	; 0x35
 80010e4:	f7ff ffba 	bl	800105c <TI_strobe>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <TI_write_settings>:
//it is also high
BYTE paTable[] = {0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0};


void TI_write_settings()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	//
	// Rf settings for CC1101
	//

	//i checked in smartRF studio 7 of Mr. ilynx's code // the setting is yours
	TI_write_reg(CCxxx0_IOCFG2,0x29);  //GDO2 Output Pin Configuration
 80010f4:	2129      	movs	r1, #41	; 0x29
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff ff86 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_IOCFG1,0x2E);  //GDO1 Output Pin Configuration
 80010fc:	212e      	movs	r1, #46	; 0x2e
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff82 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_IOCFG0,0x06);  //GDO0 Output Pin Configuration
 8001104:	2106      	movs	r1, #6
 8001106:	2002      	movs	r0, #2
 8001108:	f7ff ff7e 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FIFOTHR,0x47); //RX FIFO and TX FIFO Thresholds
 800110c:	2147      	movs	r1, #71	; 0x47
 800110e:	2003      	movs	r0, #3
 8001110:	f7ff ff7a 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_SYNC1,0xD3);   //Sync Word, High Byte
 8001114:	21d3      	movs	r1, #211	; 0xd3
 8001116:	2004      	movs	r0, #4
 8001118:	f7ff ff76 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_SYNC0,0x91);   //Sync Word, Low Byte
 800111c:	2191      	movs	r1, #145	; 0x91
 800111e:	2005      	movs	r0, #5
 8001120:	f7ff ff72 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_PKTLEN,0xFF);  //Packet Length
 8001124:	21ff      	movs	r1, #255	; 0xff
 8001126:	2006      	movs	r0, #6
 8001128:	f7ff ff6e 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_PKTCTRL1,0x04);//Packet Automation Control
 800112c:	2104      	movs	r1, #4
 800112e:	2007      	movs	r0, #7
 8001130:	f7ff ff6a 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_PKTCTRL0,0x05);//Packet Automation Control
 8001134:	2105      	movs	r1, #5
 8001136:	2008      	movs	r0, #8
 8001138:	f7ff ff66 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_ADDR,0x00);    //Device Address
 800113c:	2100      	movs	r1, #0
 800113e:	2009      	movs	r0, #9
 8001140:	f7ff ff62 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_CHANNR,0x00);  //Channel Number
 8001144:	2100      	movs	r1, #0
 8001146:	200a      	movs	r0, #10
 8001148:	f7ff ff5e 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCTRL1,0x08); //Frequency Synthesizer Control
 800114c:	2108      	movs	r1, #8
 800114e:	200b      	movs	r0, #11
 8001150:	f7ff ff5a 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCTRL0,0x00); //Frequency Synthesizer Control
 8001154:	2100      	movs	r1, #0
 8001156:	200c      	movs	r0, #12
 8001158:	f7ff ff56 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FREQ2,0x10);   //Frequency Control Word, High Byte
 800115c:	2110      	movs	r1, #16
 800115e:	200d      	movs	r0, #13
 8001160:	f7ff ff52 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FREQ1,0xB4);   //Frequency Control Word, Middle Byte
 8001164:	21b4      	movs	r1, #180	; 0xb4
 8001166:	200e      	movs	r0, #14
 8001168:	f7ff ff4e 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FREQ0,0x2E);   //Frequency Control Word, Low Byte
 800116c:	212e      	movs	r1, #46	; 0x2e
 800116e:	200f      	movs	r0, #15
 8001170:	f7ff ff4a 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG4,0xCA); //Modem Configuration
 8001174:	21ca      	movs	r1, #202	; 0xca
 8001176:	2010      	movs	r0, #16
 8001178:	f7ff ff46 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG3,0x83); //Modem Configuration
 800117c:	2183      	movs	r1, #131	; 0x83
 800117e:	2011      	movs	r0, #17
 8001180:	f7ff ff42 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG2,0x93); //Modem Configuration
 8001184:	2193      	movs	r1, #147	; 0x93
 8001186:	2012      	movs	r0, #18
 8001188:	f7ff ff3e 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG1,0x22); //Modem Configuration
 800118c:	2122      	movs	r1, #34	; 0x22
 800118e:	2013      	movs	r0, #19
 8001190:	f7ff ff3a 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_MDMCFG0,0xF8); //Modem Configuration
 8001194:	21f8      	movs	r1, #248	; 0xf8
 8001196:	2014      	movs	r0, #20
 8001198:	f7ff ff36 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_DEVIATN,0x34); //Modem Deviation Setting
 800119c:	2134      	movs	r1, #52	; 0x34
 800119e:	2015      	movs	r0, #21
 80011a0:	f7ff ff32 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_MCSM2,0x07);   //Main Radio Control State Machine Configuration
 80011a4:	2107      	movs	r1, #7
 80011a6:	2016      	movs	r0, #22
 80011a8:	f7ff ff2e 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_MCSM1,0x30);   //Main Radio Control State Machine Configuration
 80011ac:	2130      	movs	r1, #48	; 0x30
 80011ae:	2017      	movs	r0, #23
 80011b0:	f7ff ff2a 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_MCSM0,0x18);   //Main Radio Control State Machine Configuration
 80011b4:	2118      	movs	r1, #24
 80011b6:	2018      	movs	r0, #24
 80011b8:	f7ff ff26 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FOCCFG,0x16);  //Frequency Offset Compensation Configuration
 80011bc:	2116      	movs	r1, #22
 80011be:	2019      	movs	r0, #25
 80011c0:	f7ff ff22 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_BSCFG,0x6C);   //Bit Synchronization Configuration
 80011c4:	216c      	movs	r1, #108	; 0x6c
 80011c6:	201a      	movs	r0, #26
 80011c8:	f7ff ff1e 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_AGCCTRL2,0x43);//AGC Control
 80011cc:	2143      	movs	r1, #67	; 0x43
 80011ce:	201b      	movs	r0, #27
 80011d0:	f7ff ff1a 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_AGCCTRL1,0x40);//AGC Control
 80011d4:	2140      	movs	r1, #64	; 0x40
 80011d6:	201c      	movs	r0, #28
 80011d8:	f7ff ff16 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_AGCCTRL0,0x91);//AGC Control
 80011dc:	2191      	movs	r1, #145	; 0x91
 80011de:	201d      	movs	r0, #29
 80011e0:	f7ff ff12 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_WOREVT1,0x87); //High Byte Event0 Timeout
 80011e4:	2187      	movs	r1, #135	; 0x87
 80011e6:	201e      	movs	r0, #30
 80011e8:	f7ff ff0e 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_WOREVT0,0x6B); //Low Byte Event0 Timeout
 80011ec:	216b      	movs	r1, #107	; 0x6b
 80011ee:	201f      	movs	r0, #31
 80011f0:	f7ff ff0a 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_WORCTRL,0xF8); //Wake On Radio Control
 80011f4:	21f8      	movs	r1, #248	; 0xf8
 80011f6:	2020      	movs	r0, #32
 80011f8:	f7ff ff06 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FREND1,0x56);  //Front End RX Configuration
 80011fc:	2156      	movs	r1, #86	; 0x56
 80011fe:	2021      	movs	r0, #33	; 0x21
 8001200:	f7ff ff02 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FREND0,0x10);  //Front End TX Configuration
 8001204:	2110      	movs	r1, #16
 8001206:	2022      	movs	r0, #34	; 0x22
 8001208:	f7ff fefe 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL3,0xE9);  //Frequency Synthesizer Calibration
 800120c:	21e9      	movs	r1, #233	; 0xe9
 800120e:	2023      	movs	r0, #35	; 0x23
 8001210:	f7ff fefa 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL2,0x2A);  //Frequency Synthesizer Calibration
 8001214:	212a      	movs	r1, #42	; 0x2a
 8001216:	2024      	movs	r0, #36	; 0x24
 8001218:	f7ff fef6 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL1,0x00);  //Frequency Synthesizer Calibration
 800121c:	2100      	movs	r1, #0
 800121e:	2025      	movs	r0, #37	; 0x25
 8001220:	f7ff fef2 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FSCAL0,0x1F);  //Frequency Synthesizer Calibration
 8001224:	211f      	movs	r1, #31
 8001226:	2026      	movs	r0, #38	; 0x26
 8001228:	f7ff feee 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_RCCTRL1,0x41); //RC Oscillator Configuration
 800122c:	2141      	movs	r1, #65	; 0x41
 800122e:	2027      	movs	r0, #39	; 0x27
 8001230:	f7ff feea 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_RCCTRL0,0x00); //RC Oscillator Configuration
 8001234:	2100      	movs	r1, #0
 8001236:	2028      	movs	r0, #40	; 0x28
 8001238:	f7ff fee6 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_FSTEST,0x59);  //Frequency Synthesizer Calibration Control
 800123c:	2159      	movs	r1, #89	; 0x59
 800123e:	2029      	movs	r0, #41	; 0x29
 8001240:	f7ff fee2 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_PTEST,0x7F);   //Production Test
 8001244:	217f      	movs	r1, #127	; 0x7f
 8001246:	202a      	movs	r0, #42	; 0x2a
 8001248:	f7ff fede 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_AGCTEST,0x3F); //AGC Test
 800124c:	213f      	movs	r1, #63	; 0x3f
 800124e:	202b      	movs	r0, #43	; 0x2b
 8001250:	f7ff feda 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_TEST2,0x81);   //Various Test Settings
 8001254:	2181      	movs	r1, #129	; 0x81
 8001256:	202c      	movs	r0, #44	; 0x2c
 8001258:	f7ff fed6 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_TEST1,0x35);   //Various Test Settings
 800125c:	2135      	movs	r1, #53	; 0x35
 800125e:	202d      	movs	r0, #45	; 0x2d
 8001260:	f7ff fed2 	bl	8001008 <TI_write_reg>
	TI_write_reg(CCxxx0_TEST0,0x09);   //Various Test Settings
 8001264:	2109      	movs	r1, #9
 8001266:	202e      	movs	r0, #46	; 0x2e
 8001268:	f7ff fece 	bl	8001008 <TI_write_reg>
    TI_write_reg(CCxxx0_IOCFG0,   settings->IOCFG0);
    TI_write_reg(CCxxx0_PKTCTRL1, settings->PKTCTRL1);
    TI_write_reg(CCxxx0_PKTCTRL0, settings->PKTCTRL0);
    TI_write_reg(CCxxx0_ADDR,     settings->ADDR);
    TI_write_reg(CCxxx0_PKTLEN,   settings->PKTLEN);*/
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <Power_up_reset>:

void Power_up_reset()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	//Güç geldikten sonra CC1101 i Macro resetlemek için

	DWT_Delay_Init();
 8001274:	f000 fa9a 	bl	80017ac <DWT_Delay_Init>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <Power_up_reset+0x84>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <Power_up_reset+0x88>)
 800127e:	8811      	ldrh	r1, [r2, #0]
 8001280:	2201      	movs	r2, #1
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fdb4 	bl	8002df0 <HAL_GPIO_WritePin>
	DWT_Delay_us(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff fe13 	bl	8000eb4 <DWT_Delay_us>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <Power_up_reset+0x84>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <Power_up_reset+0x88>)
 8001294:	8811      	ldrh	r1, [r2, #0]
 8001296:	2200      	movs	r2, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fda9 	bl	8002df0 <HAL_GPIO_WritePin>
	DWT_Delay_us(1);
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff fe08 	bl	8000eb4 <DWT_Delay_us>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <Power_up_reset+0x84>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <Power_up_reset+0x88>)
 80012aa:	8811      	ldrh	r1, [r2, #0]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 fd9e 	bl	8002df0 <HAL_GPIO_WritePin>
	DWT_Delay_us(41);
 80012b4:	2029      	movs	r0, #41	; 0x29
 80012b6:	f7ff fdfd 	bl	8000eb4 <DWT_Delay_us>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <Power_up_reset+0x84>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <Power_up_reset+0x88>)
 80012c0:	8811      	ldrh	r1, [r2, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fd93 	bl	8002df0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)); //CS pini LOW yaptığımızd MISO pini adres yazılmadan önce low da beklemeli
 80012ca:	bf00      	nop
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <Power_up_reset+0x8c>)
 80012d0:	f001 fd76 	bl	8002dc0 <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f8      	bne.n	80012cc <Power_up_reset+0x5c>
	TI_strobe(CCxxx0_SRES);
 80012da:	2030      	movs	r0, #48	; 0x30
 80012dc:	f7ff febe 	bl	800105c <TI_strobe>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <Power_up_reset+0x84>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <Power_up_reset+0x88>)
 80012e6:	8811      	ldrh	r1, [r2, #0]
 80012e8:	2201      	movs	r2, #1
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 fd80 	bl	8002df0 <HAL_GPIO_WritePin>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000214 	.word	0x20000214
 80012f8:	20000210 	.word	0x20000210
 80012fc:	40020000 	.word	0x40020000

08001300 <TI_init>:


void TI_init(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	4613      	mov	r3, r2
 800130c:	80fb      	strh	r3, [r7, #6]
	//UINT8 i;
	//UINT16 delay;
	BYTE status;
	hal_spi = hspi;
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <TI_init+0x80>)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6013      	str	r3, [r2, #0]
	CS_GPIO_Port = cs_port;
 8001314:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <TI_init+0x84>)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	6013      	str	r3, [r2, #0]
	CS_Pin = cs_pin;
 800131a:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <TI_init+0x88>)
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	8013      	strh	r3, [r2, #0]


	for(int i=0; i<10; i++){
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e007      	b.n	8001336 <TI_init+0x36>
	status = TI_read_status(CCxxx0_VERSION);
 8001326:	2031      	movs	r0, #49	; 0x31
 8001328:	f7ff fea7 	bl	800107a <TI_read_status>
 800132c:	4603      	mov	r3, r0
 800132e:	74fb      	strb	r3, [r7, #19]
	for(int i=0; i<10; i++){
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b09      	cmp	r3, #9
 800133a:	ddf4      	ble.n	8001326 <TI_init+0x26>
		  if(status!=0x14)
		  {
		  }
	}
	TI_strobe(CCxxx0_SFRX); //î÷èùàåì RX FIFO
 800133c:	203a      	movs	r0, #58	; 0x3a
 800133e:	f7ff fe8d 	bl	800105c <TI_strobe>
	TI_strobe(CCxxx0_SFTX); //î÷èùàåì TX FIFO
 8001342:	203b      	movs	r0, #59	; 0x3b
 8001344:	f7ff fe8a 	bl	800105c <TI_strobe>
	TI_write_settings();
 8001348:	f7ff fed2 	bl	80010f0 <TI_write_settings>
	TI_write_burst_reg(CCxxx0_PATABLE, paTable, 8);//is it true
 800134c:	2208      	movs	r2, #8
 800134e:	490f      	ldr	r1, [pc, #60]	; (800138c <TI_init+0x8c>)
 8001350:	203e      	movs	r0, #62	; 0x3e
 8001352:	f7ff fe6b 	bl	800102c <TI_write_burst_reg>

	TI_write_reg(CCxxx0_FIFOTHR, 0x07);
 8001356:	2107      	movs	r1, #7
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fe55 	bl	8001008 <TI_write_reg>

	TI_strobe(CCxxx0_SIDLE); //ïåðåâîäèì ìîäåì â IDLE
 800135e:	2036      	movs	r0, #54	; 0x36
 8001360:	f7ff fe7c 	bl	800105c <TI_strobe>
	TI_strobe(CCxxx0_SFRX); //î÷èùàåì RX FIFO
 8001364:	203a      	movs	r0, #58	; 0x3a
 8001366:	f7ff fe79 	bl	800105c <TI_strobe>
	TI_strobe(CCxxx0_SFTX); //î÷èùàåì TX FIFO
 800136a:	203b      	movs	r0, #59	; 0x3b
 800136c:	f7ff fe76 	bl	800105c <TI_strobe>
	  rnd_seed = (rnd_seed << 1) | (TI_read_status(CCxxx0_RSSI) & 0x01);
	}

	rnd_seed |= 0x0080;*/

	TI_strobe(CCxxx0_SIDLE);
 8001370:	2036      	movs	r0, #54	; 0x36
 8001372:	f7ff fe73 	bl	800105c <TI_strobe>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000020c 	.word	0x2000020c
 8001384:	20000214 	.word	0x20000214
 8001388:	20000210 	.word	0x20000210
 800138c:	20000000 	.word	0x20000000

08001390 <CalculateChecksum>:
static DS18B20_Command writeScratchpad = {.code = 0x4E, .rxBytesNum = 0, .txBytesNum = 3};
static DS18B20_Command convertT = {.code = 0x44, .rxBytesNum = 0, .txBytesNum = 0};
/* Functions -----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
static uint8_t CalculateChecksum(uint8_t *data, uint8_t length)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
  uint8_t checksum = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
  while (length--)
 80013a0:	e022      	b.n	80013e8 <CalculateChecksum+0x58>
  {
    uint8_t currentByte = *data++;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 80013ac:	2308      	movs	r3, #8
 80013ae:	737b      	strb	r3, [r7, #13]
 80013b0:	e017      	b.n	80013e2 <CalculateChecksum+0x52>
    {
      uint8_t temp = (checksum ^ currentByte) & 0x01;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	7bbb      	ldrb	r3, [r7, #14]
 80013b6:	4053      	eors	r3, r2
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	733b      	strb	r3, [r7, #12]
      checksum >>= 1;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
      if (temp)
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <CalculateChecksum+0x46>
      {
        checksum ^= 0x8C;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80013d2:	43db      	mvns	r3, r3
 80013d4:	73fb      	strb	r3, [r7, #15]
      }
      currentByte >>= 1;
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	085b      	lsrs	r3, r3, #1
 80013da:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 80013dc:	7b7b      	ldrb	r3, [r7, #13]
 80013de:	3b01      	subs	r3, #1
 80013e0:	737b      	strb	r3, [r7, #13]
 80013e2:	7b7b      	ldrb	r3, [r7, #13]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e4      	bne.n	80013b2 <CalculateChecksum+0x22>
  while (length--)
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	1e5a      	subs	r2, r3, #1
 80013ec:	70fa      	strb	r2, [r7, #3]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1d7      	bne.n	80013a2 <CalculateChecksum+0x12>
    }
  }
  return checksum;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <ExecuteCommand>:
/*----------------------------------------------------------------------------*/
static DS18B20_Status ExecuteCommand(DS18B20 *sensor, DS18B20_Command command, uint8_t *data)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  if (sensor->isConnected == 0)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <ExecuteCommand+0x18>
  {
    return DS18B20_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e044      	b.n	80014a2 <ExecuteCommand+0xa2>
  }
  OneWire_ProcessByte(sensor->uart, command.code);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	7a3a      	ldrb	r2, [r7, #8]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fe4f 	bl	80020c4 <OneWire_ProcessByte>
  if (command.rxBytesNum != 0)
 8001426:	7a7b      	ldrb	r3, [r7, #9]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d026      	beq.n	800147a <ExecuteCommand+0x7a>
  {
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 800142c:	2300      	movs	r3, #0
 800142e:	75fb      	strb	r3, [r7, #23]
 8001430:	e00c      	b.n	800144c <ExecuteCommand+0x4c>
    {
      data[i] = OneWire_ProcessByte(sensor->uart, 0xFF);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6858      	ldr	r0, [r3, #4]
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	18d4      	adds	r4, r2, r3
 800143c:	21ff      	movs	r1, #255	; 0xff
 800143e:	f000 fe41 	bl	80020c4 <OneWire_ProcessByte>
 8001442:	4603      	mov	r3, r0
 8001444:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	3301      	adds	r3, #1
 800144a:	75fb      	strb	r3, [r7, #23]
 800144c:	7a7b      	ldrb	r3, [r7, #9]
 800144e:	7dfa      	ldrb	r2, [r7, #23]
 8001450:	429a      	cmp	r2, r3
 8001452:	d3ee      	bcc.n	8001432 <ExecuteCommand+0x32>
    }
    uint8_t checkSum = CalculateChecksum(data, command.rxBytesNum - 1);
 8001454:	7a7b      	ldrb	r3, [r7, #9]
 8001456:	3b01      	subs	r3, #1
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4619      	mov	r1, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff97 	bl	8001390 <CalculateChecksum>
 8001462:	4603      	mov	r3, r0
 8001464:	757b      	strb	r3, [r7, #21]
    if (checkSum != data[command.rxBytesNum - 1])
 8001466:	7a7b      	ldrb	r3, [r7, #9]
 8001468:	3b01      	subs	r3, #1
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	7d7a      	ldrb	r2, [r7, #21]
 8001472:	429a      	cmp	r2, r3
 8001474:	d014      	beq.n	80014a0 <ExecuteCommand+0xa0>
    {
      return DS18B20_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e013      	b.n	80014a2 <ExecuteCommand+0xa2>
    }
  }
  else
  {
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	75bb      	strb	r3, [r7, #22]
 800147e:	e00b      	b.n	8001498 <ExecuteCommand+0x98>
    {
      OneWire_ProcessByte(sensor->uart, data[i]);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6858      	ldr	r0, [r3, #4]
 8001484:	7dbb      	ldrb	r3, [r7, #22]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f000 fe19 	bl	80020c4 <OneWire_ProcessByte>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 8001492:	7dbb      	ldrb	r3, [r7, #22]
 8001494:	3301      	adds	r3, #1
 8001496:	75bb      	strb	r3, [r7, #22]
 8001498:	7abb      	ldrb	r3, [r7, #10]
 800149a:	7dba      	ldrb	r2, [r7, #22]
 800149c:	429a      	cmp	r2, r3
 800149e:	d3ef      	bcc.n	8001480 <ExecuteCommand+0x80>
    }
  }
  return DS18B20_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}

080014aa <WaitForConversionFinished>:
/*----------------------------------------------------------------------------*/
static void WaitForConversionFinished(DS18B20 *sensor)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  uint8_t data = OneWire_ProcessBit(sensor->uart, 1);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2101      	movs	r1, #1
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fde1 	bl	8002080 <OneWire_ProcessBit>
 80014be:	4603      	mov	r3, r0
 80014c0:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 80014c2:	e007      	b.n	80014d4 <WaitForConversionFinished+0x2a>
  {
    data = OneWire_ProcessBit(sensor->uart, 1);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2101      	movs	r1, #1
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fdd8 	bl	8002080 <OneWire_ProcessBit>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2bff      	cmp	r3, #255	; 0xff
 80014d8:	d1f4      	bne.n	80014c4 <WaitForConversionFinished+0x1a>
  }
}
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <DS18B20_ConvertT>:
/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ConvertT(DS18B20 *sensor, DS18B20_WaitCondition waitCondition)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
  DS18B20_Status result;
  uint8_t rxDummyData;
  result = ExecuteCommand(sensor, convertT, &rxDummyData);
 80014f0:	f107 030a 	add.w	r3, r7, #10
 80014f4:	491c      	ldr	r1, [pc, #112]	; (8001568 <DS18B20_ConvertT+0x84>)
 80014f6:	461a      	mov	r2, r3
 80014f8:	6809      	ldr	r1, [r1, #0]
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ff80 	bl	8001400 <ExecuteCommand>
 8001500:	4603      	mov	r3, r0
 8001502:	72fb      	strb	r3, [r7, #11]
  if (waitCondition == DS18B20_DATA)
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <DS18B20_ConvertT+0x2c>
  {
    WaitForConversionFinished(sensor);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffcd 	bl	80014aa <WaitForConversionFinished>
  }
  if (waitCondition == DS18B20_DELAY)
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d122      	bne.n	800155c <DS18B20_ConvertT+0x78>
  {
    uint32_t delayValueMs = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
    switch (sensor->configRegister)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7c1b      	ldrb	r3, [r3, #16]
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d014      	beq.n	800154c <DS18B20_ConvertT+0x68>
 8001522:	2b7f      	cmp	r3, #127	; 0x7f
 8001524:	dc16      	bgt.n	8001554 <DS18B20_ConvertT+0x70>
 8001526:	2b5f      	cmp	r3, #95	; 0x5f
 8001528:	d00c      	beq.n	8001544 <DS18B20_ConvertT+0x60>
 800152a:	2b5f      	cmp	r3, #95	; 0x5f
 800152c:	dc12      	bgt.n	8001554 <DS18B20_ConvertT+0x70>
 800152e:	2b1f      	cmp	r3, #31
 8001530:	d002      	beq.n	8001538 <DS18B20_ConvertT+0x54>
 8001532:	2b3f      	cmp	r3, #63	; 0x3f
 8001534:	d003      	beq.n	800153e <DS18B20_ConvertT+0x5a>
        break;
      case DS18B20_12_BITS_CONFIG:
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
        break;
      default:
        break;
 8001536:	e00d      	b.n	8001554 <DS18B20_ConvertT+0x70>
        delayValueMs = DS18B20_9_BITS_DELAY_MS;
 8001538:	235e      	movs	r3, #94	; 0x5e
 800153a:	60fb      	str	r3, [r7, #12]
        break;
 800153c:	e00b      	b.n	8001556 <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_10_BITS_DELAY_MS;
 800153e:	23bc      	movs	r3, #188	; 0xbc
 8001540:	60fb      	str	r3, [r7, #12]
        break;
 8001542:	e008      	b.n	8001556 <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_11_BITS_DELAY_MS;
 8001544:	f240 1377 	movw	r3, #375	; 0x177
 8001548:	60fb      	str	r3, [r7, #12]
        break;
 800154a:	e004      	b.n	8001556 <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
 800154c:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001550:	60fb      	str	r3, [r7, #12]
        break;
 8001552:	e000      	b.n	8001556 <DS18B20_ConvertT+0x72>
        break;
 8001554:	bf00      	nop
    }
    HAL_Delay(delayValueMs);
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f001 f9a8 	bl	80028ac <HAL_Delay>
  }
  return result;
 800155c:	7afb      	ldrb	r3, [r7, #11]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000018 	.word	0x20000018

0800156c <DS18B20_ReadScratchpad>:
/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadScratchpad(DS18B20 *sensor)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_SCRATCHPAD_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readScratchpad, rxData);
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4938      	ldr	r1, [pc, #224]	; (800165c <DS18B20_ReadScratchpad+0xf0>)
 800157a:	461a      	mov	r2, r3
 800157c:	6809      	ldr	r1, [r1, #0]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ff3e 	bl	8001400 <ExecuteCommand>
 8001584:	4603      	mov	r3, r0
 8001586:	757b      	strb	r3, [r7, #21]
  if (result != DS18B20_OK)
 8001588:	7d7b      	ldrb	r3, [r7, #21]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <DS18B20_ReadScratchpad+0x26>
  {
    return result;
 800158e:	7d7b      	ldrb	r3, [r7, #21]
 8001590:	e060      	b.n	8001654 <DS18B20_ReadScratchpad+0xe8>
  }
  sensor->temperatureLimitHigh = rxData[DS18B20_SCRATCHPAD_T_LIMIT_H_BYTE_IDX];
 8001592:	7aba      	ldrb	r2, [r7, #10]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = rxData[DS18B20_SCRATCHPAD_T_LIMIT_L_BYTE_IDX];
 8001598:	7afa      	ldrb	r2, [r7, #11]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = rxData[DS18B20_SCRATCHPAD_CONFIG_BYTE_IDX];
 800159e:	7b3a      	ldrb	r2, [r7, #12]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	741a      	strb	r2, [r3, #16]
  uint16_t tRegValue = (rxData[DS18B20_SCRATCHPAD_T_MSB_BYTE_IDX] << 8) | rxData[DS18B20_SCRATCHPAD_T_LSB_BYTE_IDX];
 80015a4:	7a7b      	ldrb	r3, [r7, #9]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7a3b      	ldrb	r3, [r7, #8]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	82fb      	strh	r3, [r7, #22]
  uint16_t sign = tRegValue & DS18B20_SIGN_MASK;
 80015b4:	8afb      	ldrh	r3, [r7, #22]
 80015b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015ba:	f023 0307 	bic.w	r3, r3, #7
 80015be:	827b      	strh	r3, [r7, #18]
  if (sign != 0)
 80015c0:	8a7b      	ldrh	r3, [r7, #18]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <DS18B20_ReadScratchpad+0x60>
  {
    tRegValue = (0xFFFF - tRegValue + 1);
 80015c6:	8afb      	ldrh	r3, [r7, #22]
 80015c8:	425b      	negs	r3, r3
 80015ca:	82fb      	strh	r3, [r7, #22]
  }
  switch (sensor->configRegister)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7c1b      	ldrb	r3, [r3, #16]
 80015d0:	2b7f      	cmp	r3, #127	; 0x7f
 80015d2:	d01d      	beq.n	8001610 <DS18B20_ReadScratchpad+0xa4>
 80015d4:	2b7f      	cmp	r3, #127	; 0x7f
 80015d6:	dc20      	bgt.n	800161a <DS18B20_ReadScratchpad+0xae>
 80015d8:	2b5f      	cmp	r3, #95	; 0x5f
 80015da:	d012      	beq.n	8001602 <DS18B20_ReadScratchpad+0x96>
 80015dc:	2b5f      	cmp	r3, #95	; 0x5f
 80015de:	dc1c      	bgt.n	800161a <DS18B20_ReadScratchpad+0xae>
 80015e0:	2b1f      	cmp	r3, #31
 80015e2:	d002      	beq.n	80015ea <DS18B20_ReadScratchpad+0x7e>
 80015e4:	2b3f      	cmp	r3, #63	; 0x3f
 80015e6:	d005      	beq.n	80015f4 <DS18B20_ReadScratchpad+0x88>
 80015e8:	e017      	b.n	800161a <DS18B20_ReadScratchpad+0xae>
  {
    case DS18B20_9_BITS_CONFIG:
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
 80015ea:	8afb      	ldrh	r3, [r7, #22]
 80015ec:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80015f0:	82fb      	strh	r3, [r7, #22]
      break;
 80015f2:	e017      	b.n	8001624 <DS18B20_ReadScratchpad+0xb8>
    case DS18B20_10_BITS_CONFIG:
      tRegValue &= DS18B20_10_BITS_DATA_MASK;
 80015f4:	8afb      	ldrh	r3, [r7, #22]
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	055b      	lsls	r3, r3, #21
 80015fc:	0d5b      	lsrs	r3, r3, #21
 80015fe:	82fb      	strh	r3, [r7, #22]
      break;
 8001600:	e010      	b.n	8001624 <DS18B20_ReadScratchpad+0xb8>
    case DS18B20_11_BITS_CONFIG:
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
 8001602:	8afb      	ldrh	r3, [r7, #22]
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	055b      	lsls	r3, r3, #21
 800160a:	0d5b      	lsrs	r3, r3, #21
 800160c:	82fb      	strh	r3, [r7, #22]
      break;
 800160e:	e009      	b.n	8001624 <DS18B20_ReadScratchpad+0xb8>
    case DS18B20_12_BITS_CONFIG:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001616:	82fb      	strh	r3, [r7, #22]
      break;
 8001618:	e004      	b.n	8001624 <DS18B20_ReadScratchpad+0xb8>
    default:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 800161a:	8afb      	ldrh	r3, [r7, #22]
 800161c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001620:	82fb      	strh	r3, [r7, #22]
      break;
 8001622:	bf00      	nop
  }
  sensor->temperature = (float)tRegValue * DS18B20_T_STEP;
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001660 <DS18B20_ReadScratchpad+0xf4>
 8001632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	edc3 7a05 	vstr	s15, [r3, #20]
  if (sign != 0)
 800163c:	8a7b      	ldrh	r3, [r7, #18]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <DS18B20_ReadScratchpad+0xe6>
  {
    sensor->temperature *= (-1);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edd3 7a05 	vldr	s15, [r3, #20]
 8001648:	eef1 7a67 	vneg.f32	s15, s15
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	edc3 7a05 	vstr	s15, [r3, #20]
  }
  return DS18B20_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000010 	.word	0x20000010
 8001660:	3d800000 	.word	0x3d800000

08001664 <DS18B20_WriteScratchpad>:
/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_WriteScratchpad(DS18B20 *sensor, uint8_t *data)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  DS18B20_Status result;
  result = ExecuteCommand(sensor, writeScratchpad, data);
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <DS18B20_WriteScratchpad+0x48>)
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fec3 	bl	8001400 <ExecuteCommand>
 800167a:	4603      	mov	r3, r0
 800167c:	73fb      	strb	r3, [r7, #15]
  if (result != DS18B20_OK)
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <DS18B20_WriteScratchpad+0x24>
  {
    return result;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	e00c      	b.n	80016a2 <DS18B20_WriteScratchpad+0x3e>
  }
  sensor->temperatureLimitHigh = data[0];
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = data[1];
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	785a      	ldrb	r2, [r3, #1]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = data[2];
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	789a      	ldrb	r2, [r3, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	741a      	strb	r2, [r3, #16]
  return result;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000014 	.word	0x20000014

080016b0 <DS18B20_InitializationCommand>:
/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_InitializationCommand(DS18B20 *sensor)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if (sensor->isInitialized == 0)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <DS18B20_InitializationCommand+0x14>
  {
    return DS18B20_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e012      	b.n	80016ea <DS18B20_InitializationCommand+0x3a>
  }
  ONEWIRE_Status status = OneWire_Reset(sensor->uart);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fd31 	bl	8002130 <OneWire_Reset>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
  if (status == ONEWIRE_OK)
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d104      	bne.n	80016e2 <DS18B20_InitializationCommand+0x32>
  {
    sensor->isConnected = 1;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	705a      	strb	r2, [r3, #1]
    return DS18B20_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e003      	b.n	80016ea <DS18B20_InitializationCommand+0x3a>
  }
  else
  {
    sensor->isConnected = 0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	705a      	strb	r2, [r3, #1]
    return DS18B20_ERROR;
 80016e8:	2301      	movs	r3, #1
  }
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <DS18B20_ReadRom>:
/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadRom(DS18B20 *sensor)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_ROM_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readRom, rxData);
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	4912      	ldr	r1, [pc, #72]	; (800174c <DS18B20_ReadRom+0x58>)
 8001702:	461a      	mov	r2, r3
 8001704:	6809      	ldr	r1, [r1, #0]
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fe7a 	bl	8001400 <ExecuteCommand>
 800170c:	4603      	mov	r3, r0
 800170e:	75bb      	strb	r3, [r7, #22]
  if (result != DS18B20_OK)
 8001710:	7dbb      	ldrb	r3, [r7, #22]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <DS18B20_ReadRom+0x26>
  {
    return result;
 8001716:	7dbb      	ldrb	r3, [r7, #22]
 8001718:	e014      	b.n	8001744 <DS18B20_ReadRom+0x50>
  }
  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]
 800171e:	e00d      	b.n	800173c <DS18B20_ReadRom+0x48>
  {
    sensor->serialNumber[i] = rxData[DS18B20_SERIAL_NUMBER_OFFSET_BYTES + i];
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	3218      	adds	r2, #24
 8001728:	443a      	add	r2, r7
 800172a:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	460a      	mov	r2, r1
 8001734:	721a      	strb	r2, [r3, #8]
  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	3301      	adds	r3, #1
 800173a:	75fb      	strb	r3, [r7, #23]
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d9ee      	bls.n	8001720 <DS18B20_ReadRom+0x2c>
  }
  return DS18B20_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000008 	.word	0x20000008

08001750 <DS18B20_SkipRom>:
/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_SkipRom(DS18B20 *sensor)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxDummyData;
  result = ExecuteCommand(sensor, skipRom, &rxDummyData);
 8001758:	f107 030e 	add.w	r3, r7, #14
 800175c:	4908      	ldr	r1, [pc, #32]	; (8001780 <DS18B20_SkipRom+0x30>)
 800175e:	461a      	mov	r2, r3
 8001760:	6809      	ldr	r1, [r1, #0]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fe4c 	bl	8001400 <ExecuteCommand>
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]
  if (result != DS18B20_OK)
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <DS18B20_SkipRom+0x26>
  {
    return result;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	e000      	b.n	8001778 <DS18B20_SkipRom+0x28>
  }
  return DS18B20_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000000c 	.word	0x2000000c

08001784 <DS18B20_Init>:
/*----------------------------------------------------------------------------*/
void DS18B20_Init(DS18B20 *sensor, UART_HandleTypeDef *huart)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  sensor->isConnected = 0;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	705a      	strb	r2, [r3, #1]
  sensor->uart = huart;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	605a      	str	r2, [r3, #4]
  sensor->isInitialized = 1;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <DWT_Delay_Init>:
 *  Created on: Mar 11, 2020
 *      Author: suleyman.eskil
 */
#include "dw_stm32_delay.h"

uint32_t DWT_Delay_Init(void) {
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <DWT_Delay_Init+0x58>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a13      	ldr	r2, [pc, #76]	; (8001804 <DWT_Delay_Init+0x58>)
 80017b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ba:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <DWT_Delay_Init+0x58>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a10      	ldr	r2, [pc, #64]	; (8001804 <DWT_Delay_Init+0x58>)
 80017c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <DWT_Delay_Init+0x5c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <DWT_Delay_Init+0x5c>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <DWT_Delay_Init+0x5c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <DWT_Delay_Init+0x5c>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <DWT_Delay_Init+0x5c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80017e6:	bf00      	nop
     __ASM volatile ("NOP");
 80017e8:	bf00      	nop
     __ASM volatile ("NOP");
 80017ea:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <DWT_Delay_Init+0x5c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80017f8:	2301      	movs	r3, #1
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000edf0 	.word	0xe000edf0
 8001808:	e0001000 	.word	0xe0001000

0800180c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <MX_GPIO_Init+0xf4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a35      	ldr	r2, [pc, #212]	; (8001900 <MX_GPIO_Init+0xf4>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b33      	ldr	r3, [pc, #204]	; (8001900 <MX_GPIO_Init+0xf4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <MX_GPIO_Init+0xf4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a2e      	ldr	r2, [pc, #184]	; (8001900 <MX_GPIO_Init+0xf4>)
 8001848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <MX_GPIO_Init+0xf4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b28      	ldr	r3, [pc, #160]	; (8001900 <MX_GPIO_Init+0xf4>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a27      	ldr	r2, [pc, #156]	; (8001900 <MX_GPIO_Init+0xf4>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b25      	ldr	r3, [pc, #148]	; (8001900 <MX_GPIO_Init+0xf4>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <MX_GPIO_Init+0xf4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a20      	ldr	r2, [pc, #128]	; (8001900 <MX_GPIO_Init+0xf4>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <MX_GPIO_Init+0xf4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2102      	movs	r1, #2
 8001896:	481b      	ldr	r0, [pc, #108]	; (8001904 <MX_GPIO_Init+0xf8>)
 8001898:	f001 faaa 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2108      	movs	r1, #8
 80018a0:	4819      	ldr	r0, [pc, #100]	; (8001908 <MX_GPIO_Init+0xfc>)
 80018a2:	f001 faa5 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 80018a6:	2302      	movs	r3, #2
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018b2:	2301      	movs	r3, #1
 80018b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <MX_GPIO_Init+0xf8>)
 80018be:	f001 f8fb 	bl	8002ab8 <HAL_GPIO_Init>
	HAL_GPIO_Init(GDO0_GPIO_Port, &GPIO_InitStruct);

#else
	//for receiver/modem
  /*Configure GPIO pin : GDO0_Pin */
  GPIO_InitStruct.Pin = GDO0_Pin;
 80018c2:	2301      	movs	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GDO0_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <MX_GPIO_Init+0xfc>)
 80018d8:	f001 f8ee 	bl	8002ab8 <HAL_GPIO_Init>
#endif

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80018dc:	2308      	movs	r3, #8
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018e8:	2301      	movs	r3, #1
 80018ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_GPIO_Init+0xfc>)
 80018f4:	f001 f8e0 	bl	8002ab8 <HAL_GPIO_Init>

}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000
 8001908:	40020400 	.word	0x40020400

0800190c <UserLEDHide>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UserLEDHide()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	2108      	movs	r1, #8
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <UserLEDHide+0x14>)
 8001916:	f001 fa6b 	bl	8002df0 <HAL_GPIO_WritePin>
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40020400 	.word	0x40020400

08001924 <UserLEDShow>:


void UserLEDShow()
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001928:	2201      	movs	r2, #1
 800192a:	2108      	movs	r1, #8
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <UserLEDShow+0x14>)
 800192e:	f001 fa5f 	bl	8002df0 <HAL_GPIO_WritePin>
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40020400 	.word	0x40020400

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b092      	sub	sp, #72	; 0x48
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001942:	f000 ff71 	bl	8002828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001946:	f000 f8db 	bl	8001b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194a:	f7ff ff5f 	bl	800180c <MX_GPIO_Init>
  MX_SPI1_Init();
 800194e:	f000 fc1d 	bl	800218c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001952:	f000 fe6f 	bl	8002634 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001956:	f000 fe97 	bl	8002688 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int k;

   DS18B20_Init(&temperatureSensor, &huart1);
 800195a:	495f      	ldr	r1, [pc, #380]	; (8001ad8 <main+0x19c>)
 800195c:	485f      	ldr	r0, [pc, #380]	; (8001adc <main+0x1a0>)
 800195e:	f7ff ff11 	bl	8001784 <DS18B20_Init>

     DS18B20_InitializationCommand(&temperatureSensor);
 8001962:	485e      	ldr	r0, [pc, #376]	; (8001adc <main+0x1a0>)
 8001964:	f7ff fea4 	bl	80016b0 <DS18B20_InitializationCommand>
     DS18B20_ReadRom(&temperatureSensor);
 8001968:	485c      	ldr	r0, [pc, #368]	; (8001adc <main+0x1a0>)
 800196a:	f7ff fec3 	bl	80016f4 <DS18B20_ReadRom>
     DS18B20_ReadScratchpad(&temperatureSensor);
 800196e:	485b      	ldr	r0, [pc, #364]	; (8001adc <main+0x1a0>)
 8001970:	f7ff fdfc 	bl	800156c <DS18B20_ReadScratchpad>

     uint8_t settings[3];
     settings[0] = temperatureSensor.temperatureLimitHigh;
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <main+0x1a0>)
 8001976:	7bdb      	ldrb	r3, [r3, #15]
 8001978:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
     settings[1] = temperatureSensor.temperatureLimitLow;
 800197c:	4b57      	ldr	r3, [pc, #348]	; (8001adc <main+0x1a0>)
 800197e:	7b9b      	ldrb	r3, [r3, #14]
 8001980:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
     settings[2] = DS18B20_12_BITS_CONFIG;
 8001984:	237f      	movs	r3, #127	; 0x7f
 8001986:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

     DS18B20_InitializationCommand(&temperatureSensor);
 800198a:	4854      	ldr	r0, [pc, #336]	; (8001adc <main+0x1a0>)
 800198c:	f7ff fe90 	bl	80016b0 <DS18B20_InitializationCommand>
     DS18B20_SkipRom(&temperatureSensor);
 8001990:	4852      	ldr	r0, [pc, #328]	; (8001adc <main+0x1a0>)
 8001992:	f7ff fedd 	bl	8001750 <DS18B20_SkipRom>
     DS18B20_WriteScratchpad(&temperatureSensor, settings);
 8001996:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800199a:	4619      	mov	r1, r3
 800199c:	484f      	ldr	r0, [pc, #316]	; (8001adc <main+0x1a0>)
 800199e:	f7ff fe61 	bl	8001664 <DS18B20_WriteScratchpad>
     //
    BYTE status;
    Power_up_reset();
 80019a2:	f7ff fc65 	bl	8001270 <Power_up_reset>
    TI_init(&hspi1, CS_GPIO_Port, CS_Pin);
 80019a6:	2202      	movs	r2, #2
 80019a8:	494d      	ldr	r1, [pc, #308]	; (8001ae0 <main+0x1a4>)
 80019aa:	484e      	ldr	r0, [pc, #312]	; (8001ae4 <main+0x1a8>)
 80019ac:	f7ff fca8 	bl	8001300 <TI_init>


  #if state
    //for transiver
    BYTE veri = 7;
 80019b0:	2307      	movs	r3, #7
 80019b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t code1[5]="yi6 ";
 80019b6:	4a4c      	ldr	r2, [pc, #304]	; (8001ae8 <main+0x1ac>)
 80019b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019c0:	6018      	str	r0, [r3, #0]
 80019c2:	3304      	adds	r3, #4
 80019c4:	7019      	strb	r1, [r3, #0]
    uint8_t code2[5]="on7\n";
 80019c6:	4a49      	ldr	r2, [pc, #292]	; (8001aec <main+0x1b0>)
 80019c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019d0:	6018      	str	r0, [r3, #0]
 80019d2:	3304      	adds	r3, #4
 80019d4:	7019      	strb	r1, [r3, #0]
    uint8_t board[10] = "stm32f4xx";
 80019d6:	4a46      	ldr	r2, [pc, #280]	; (8001af0 <main+0x1b4>)
 80019d8:	f107 0320 	add.w	r3, r7, #32
 80019dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80019de:	c303      	stmia	r3!, {r0, r1}
 80019e0:	801a      	strh	r2, [r3, #0]
    //int l=0;
    while (1)
    {
    	      //l=l+1;
    	      //sprintf((char *)l1,"%d", l);
    	      DS18B20_InitializationCommand(&temperatureSensor);
 80019e2:	483e      	ldr	r0, [pc, #248]	; (8001adc <main+0x1a0>)
 80019e4:	f7ff fe64 	bl	80016b0 <DS18B20_InitializationCommand>
    	      DS18B20_SkipRom(&temperatureSensor);
 80019e8:	483c      	ldr	r0, [pc, #240]	; (8001adc <main+0x1a0>)
 80019ea:	f7ff feb1 	bl	8001750 <DS18B20_SkipRom>
    	      DS18B20_ConvertT(&temperatureSensor, DS18B20_DATA);
 80019ee:	2101      	movs	r1, #1
 80019f0:	483a      	ldr	r0, [pc, #232]	; (8001adc <main+0x1a0>)
 80019f2:	f7ff fd77 	bl	80014e4 <DS18B20_ConvertT>
    	      DS18B20_InitializationCommand(&temperatureSensor);
 80019f6:	4839      	ldr	r0, [pc, #228]	; (8001adc <main+0x1a0>)
 80019f8:	f7ff fe5a 	bl	80016b0 <DS18B20_InitializationCommand>
    	      DS18B20_SkipRom(&temperatureSensor);
 80019fc:	4837      	ldr	r0, [pc, #220]	; (8001adc <main+0x1a0>)
 80019fe:	f7ff fea7 	bl	8001750 <DS18B20_SkipRom>
    	      DS18B20_ReadScratchpad(&temperatureSensor);
 8001a02:	4836      	ldr	r0, [pc, #216]	; (8001adc <main+0x1a0>)
 8001a04:	f7ff fdb2 	bl	800156c <DS18B20_ReadScratchpad>
    	      uint8_t str1[30]="yy";
 8001a08:	f647 1379 	movw	r3, #31097	; 0x7979
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
 8001a1c:	615a      	str	r2, [r3, #20]
 8001a1e:	831a      	strh	r2, [r3, #24]
    	           k=*&temperatureSensor.temperature;//k - temp
 8001a20:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <main+0x1a0>)
 8001a22:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a2a:	ee17 3a90 	vmov	r3, s15
 8001a2e:	643b      	str	r3, [r7, #64]	; 0x40
    	           //gcvt(k, 6, str1);
    	           sprintf((char *)str1,"%d ", k);//k - temp
 8001a30:	463b      	mov	r3, r7
 8001a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a34:	492f      	ldr	r1, [pc, #188]	; (8001af4 <main+0x1b8>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f004 f8ea 	bl	8005c10 <siprintf>
    	        		   //l=0;
    	              //float x = 123.4567;
    	              //char buf[1];
    	              //gcvt(k, 6, buf);
    	           //strcat(board,code2);
    	           strcat(code1,board);
 8001a3c:	f107 0220 	add.w	r2, r7, #32
 8001a40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f004 f94d 	bl	8005ce6 <strcat>
    	           strcat(str1,code1);
 8001a4c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a50:	463b      	mov	r3, r7
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f004 f946 	bl	8005ce6 <strcat>
    	           //strcat(str1,board);
    	           //strcat(str1,l1);//счётчик отправленных сообщений
    	           strcat(str1,code2);
 8001a5a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 f93f 	bl	8005ce6 <strcat>
    	           HAL_UART_Transmit(&huart2,str1,sizeof(str1),40);
 8001a68:	4639      	mov	r1, r7
 8001a6a:	2328      	movs	r3, #40	; 0x28
 8001a6c:	221e      	movs	r2, #30
 8001a6e:	4822      	ldr	r0, [pc, #136]	; (8001af8 <main+0x1bc>)
 8001a70:	f002 ff54 	bl	800491c <HAL_UART_Transmit>
  	  status = TI_read_status(CCxxx0_VERSION); // it is for checking only //sadece kontrol için
 8001a74:	2031      	movs	r0, #49	; 0x31
 8001a76:	f7ff fb00 	bl	800107a <TI_read_status>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  	  //it must be 0x14 //0x14 değeri vermelidir

  	  status = TI_read_status(CCxxx0_TXBYTES); // it is too // bu da kontrol için
 8001a80:	203a      	movs	r0, #58	; 0x3a
 8001a82:	f7ff fafa 	bl	800107a <TI_read_status>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  	  TI_strobe(CCxxx0_SFTX); // flush the buffer //bufferi temizler
 8001a8c:	203b      	movs	r0, #59	; 0x3b
 8001a8e:	f7ff fae5 	bl	800105c <TI_strobe>

  	  UserLEDShow(); // turn on the led before send the data // veri göndermeden önce ledi yakar
 8001a92:	f7ff ff47 	bl	8001924 <UserLEDShow>
  	  TI_send_packet(str1, sizeof(str1)); //the function is sending the data
 8001a96:	463b      	mov	r3, r7
 8001a98:	211e      	movs	r1, #30
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fb03 	bl	80010a6 <TI_send_packet>

  	  while(HAL_GPIO_ReadPin(GDO0_GPIO_Port, GDO0_Pin));
 8001aa0:	bf00      	nop
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	4815      	ldr	r0, [pc, #84]	; (8001afc <main+0x1c0>)
 8001aa6:	f001 f98b 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f8      	bne.n	8001aa2 <main+0x166>
  	  while(!HAL_GPIO_ReadPin(GDO0_GPIO_Port, GDO0_Pin));
 8001ab0:	bf00      	nop
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4811      	ldr	r0, [pc, #68]	; (8001afc <main+0x1c0>)
 8001ab6:	f001 f983 	bl	8002dc0 <HAL_GPIO_ReadPin>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f8      	beq.n	8001ab2 <main+0x176>
  	  //if the pass to this function, the data was sent. // veri gönderme işlemi tamamlanması için bekletir

  	  status = TI_read_status(CCxxx0_TXBYTES); // it is checking to send the data //veri gönderildiğini kontrol etmek için
 8001ac0:	203a      	movs	r0, #58	; 0x3a
 8001ac2:	f7ff fada 	bl	800107a <TI_read_status>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  	  UserLEDHide(); // turn off the led // veri gönderildiğinde led söner
 8001acc:	f7ff ff1e 	bl	800190c <UserLEDHide>
  	  HAL_Delay(100);
 8001ad0:	2064      	movs	r0, #100	; 0x64
 8001ad2:	f000 feeb 	bl	80028ac <HAL_Delay>
    {
 8001ad6:	e784      	b.n	80019e2 <main+0xa6>
 8001ad8:	200002d4 	.word	0x200002d4
 8001adc:	20000218 	.word	0x20000218
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	20000230 	.word	0x20000230
 8001ae8:	08007f04 	.word	0x08007f04
 8001aec:	08007f0c 	.word	0x08007f0c
 8001af0:	08007f14 	.word	0x08007f14
 8001af4:	08007f00 	.word	0x08007f00
 8001af8:	2000031c 	.word	0x2000031c
 8001afc:	40020400 	.word	0x40020400

08001b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b094      	sub	sp, #80	; 0x50
 8001b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b06:	f107 0320 	add.w	r3, r7, #32
 8001b0a:	2230      	movs	r2, #48	; 0x30
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 f8e1 	bl	8005cd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <SystemClock_Config+0xc8>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	4a26      	ldr	r2, [pc, #152]	; (8001bc8 <SystemClock_Config+0xc8>)
 8001b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b32:	6413      	str	r3, [r2, #64]	; 0x40
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <SystemClock_Config+0xc8>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b40:	2300      	movs	r3, #0
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <SystemClock_Config+0xcc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a20      	ldr	r2, [pc, #128]	; (8001bcc <SystemClock_Config+0xcc>)
 8001b4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <SystemClock_Config+0xcc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b66:	2302      	movs	r3, #2
 8001b68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b70:	2319      	movs	r3, #25
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b74:	23a8      	movs	r3, #168	; 0xa8
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b80:	f107 0320 	add.w	r3, r7, #32
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 f94d 	bl	8002e24 <HAL_RCC_OscConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b90:	f000 f830 	bl	8001bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b94:	230f      	movs	r3, #15
 8001b96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f001 fbaf 	bl	8003314 <HAL_RCC_ClockConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001bbc:	f000 f81a 	bl	8001bf4 <Error_Handler>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3750      	adds	r7, #80	; 0x50
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40007000 	.word	0x40007000

08001bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001be2:	f000 fe43 	bl	800286c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40010000 	.word	0x40010000

08001bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf8:	b672      	cpsid	i
}
 8001bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <Error_Handler+0x8>
	...

08001c00 <SetBaudrate>:
#include "onewire.h"
/* Declarations and definitions ----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
static void SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate)
{
 8001c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c04:	b0c0      	sub	sp, #256	; 0x100
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8001c0c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
  uint32_t pclk = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  huart->Init.BaudRate = baudrate;
 8001c16:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001c1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001c1e:	6053      	str	r3, [r2, #4]
        (huart->Instance == UART9)  || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b8f      	ldr	r3, [pc, #572]	; (8001e64 <SetBaudrate+0x264>)
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d005      	beq.n	8001c38 <SetBaudrate+0x38>
 8001c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b8d      	ldr	r3, [pc, #564]	; (8001e68 <SetBaudrate+0x268>)
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d104      	bne.n	8001c42 <SetBaudrate+0x42>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c38:	f001 fd38 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8001c3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001c40:	e003      	b.n	8001c4a <SetBaudrate+0x4a>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c42:	f001 fd1f 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8001c46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c54:	f040 810c 	bne.w	8001e70 <SetBaudrate+0x270>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	1891      	adds	r1, r2, r2
 8001c70:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c72:	415b      	adcs	r3, r3
 8001c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	eb12 0801 	adds.w	r8, r2, r1
 8001c80:	4629      	mov	r1, r5
 8001c82:	eb43 0901 	adc.w	r9, r3, r1
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c9a:	4690      	mov	r8, r2
 8001c9c:	4699      	mov	r9, r3
 8001c9e:	4623      	mov	r3, r4
 8001ca0:	eb18 0303 	adds.w	r3, r8, r3
 8001ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ca8:	462b      	mov	r3, r5
 8001caa:	eb49 0303 	adc.w	r3, r9, r3
 8001cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001cbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001cc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	18db      	adds	r3, r3, r3
 8001cca:	653b      	str	r3, [r7, #80]	; 0x50
 8001ccc:	4613      	mov	r3, r2
 8001cce:	eb42 0303 	adc.w	r3, r2, r3
 8001cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8001cd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001cdc:	f7fe ff6c 	bl	8000bb8 <__aeabi_uldivmod>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <SetBaudrate+0x26c>)
 8001ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	011c      	lsls	r4, r3, #4
 8001cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001cf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001cfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001d00:	4642      	mov	r2, r8
 8001d02:	464b      	mov	r3, r9
 8001d04:	1891      	adds	r1, r2, r2
 8001d06:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d08:	415b      	adcs	r3, r3
 8001d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d10:	4641      	mov	r1, r8
 8001d12:	eb12 0a01 	adds.w	sl, r2, r1
 8001d16:	4649      	mov	r1, r9
 8001d18:	eb43 0b01 	adc.w	fp, r3, r1
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d30:	4692      	mov	sl, r2
 8001d32:	469b      	mov	fp, r3
 8001d34:	4643      	mov	r3, r8
 8001d36:	eb1a 0303 	adds.w	r3, sl, r3
 8001d3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d3e:	464b      	mov	r3, r9
 8001d40:	eb4b 0303 	adc.w	r3, fp, r3
 8001d44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	18db      	adds	r3, r3, r3
 8001d60:	643b      	str	r3, [r7, #64]	; 0x40
 8001d62:	4613      	mov	r3, r2
 8001d64:	eb42 0303 	adc.w	r3, r2, r3
 8001d68:	647b      	str	r3, [r7, #68]	; 0x44
 8001d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d72:	f7fe ff21 	bl	8000bb8 <__aeabi_uldivmod>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <SetBaudrate+0x26c>)
 8001d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2264      	movs	r2, #100	; 0x64
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	1acb      	subs	r3, r1, r3
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d92:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <SetBaudrate+0x26c>)
 8001d94:	fba3 2302 	umull	r2, r3, r3, r2
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001da0:	441c      	add	r4, r3
 8001da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001da6:	2200      	movs	r2, #0
 8001da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001db0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001db4:	4642      	mov	r2, r8
 8001db6:	464b      	mov	r3, r9
 8001db8:	1891      	adds	r1, r2, r2
 8001dba:	63b9      	str	r1, [r7, #56]	; 0x38
 8001dbc:	415b      	adcs	r3, r3
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	1851      	adds	r1, r2, r1
 8001dc8:	6339      	str	r1, [r7, #48]	; 0x30
 8001dca:	4649      	mov	r1, r9
 8001dcc:	414b      	adcs	r3, r1
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001ddc:	4659      	mov	r1, fp
 8001dde:	00cb      	lsls	r3, r1, #3
 8001de0:	4651      	mov	r1, sl
 8001de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001de6:	4651      	mov	r1, sl
 8001de8:	00ca      	lsls	r2, r1, #3
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	4603      	mov	r3, r0
 8001df0:	4642      	mov	r2, r8
 8001df2:	189b      	adds	r3, r3, r2
 8001df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001df8:	464b      	mov	r3, r9
 8001dfa:	460a      	mov	r2, r1
 8001dfc:	eb42 0303 	adc.w	r3, r2, r3
 8001e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001e18:	460b      	mov	r3, r1
 8001e1a:	18db      	adds	r3, r3, r3
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1e:	4613      	mov	r3, r2
 8001e20:	eb42 0303 	adc.w	r3, r2, r3
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e2e:	f7fe fec3 	bl	8000bb8 <__aeabi_uldivmod>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <SetBaudrate+0x26c>)
 8001e38:	fba3 1302 	umull	r1, r3, r3, r2
 8001e3c:	095b      	lsrs	r3, r3, #5
 8001e3e:	2164      	movs	r1, #100	; 0x64
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	3332      	adds	r3, #50	; 0x32
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <SetBaudrate+0x26c>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	095b      	lsrs	r3, r3, #5
 8001e52:	f003 0207 	and.w	r2, r3, #7
 8001e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4422      	add	r2, r4
 8001e5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e60:	e106      	b.n	8002070 <SetBaudrate+0x470>
 8001e62:	bf00      	nop
 8001e64:	40011000 	.word	0x40011000
 8001e68:	40011400 	.word	0x40011400
 8001e6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e74:	2200      	movs	r2, #0
 8001e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e82:	4642      	mov	r2, r8
 8001e84:	464b      	mov	r3, r9
 8001e86:	1891      	adds	r1, r2, r2
 8001e88:	6239      	str	r1, [r7, #32]
 8001e8a:	415b      	adcs	r3, r3
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e92:	4641      	mov	r1, r8
 8001e94:	1854      	adds	r4, r2, r1
 8001e96:	4649      	mov	r1, r9
 8001e98:	eb43 0501 	adc.w	r5, r3, r1
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	00eb      	lsls	r3, r5, #3
 8001ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eaa:	00e2      	lsls	r2, r4, #3
 8001eac:	4614      	mov	r4, r2
 8001eae:	461d      	mov	r5, r3
 8001eb0:	4643      	mov	r3, r8
 8001eb2:	18e3      	adds	r3, r4, r3
 8001eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001eb8:	464b      	mov	r3, r9
 8001eba:	eb45 0303 	adc.w	r3, r5, r3
 8001ebe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ece:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ede:	4629      	mov	r1, r5
 8001ee0:	008b      	lsls	r3, r1, #2
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ee8:	4621      	mov	r1, r4
 8001eea:	008a      	lsls	r2, r1, #2
 8001eec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001ef0:	f7fe fe62 	bl	8000bb8 <__aeabi_uldivmod>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4b60      	ldr	r3, [pc, #384]	; (800207c <SetBaudrate+0x47c>)
 8001efa:	fba3 2302 	umull	r2, r3, r3, r2
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	011c      	lsls	r4, r3, #4
 8001f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f06:	2200      	movs	r2, #0
 8001f08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f14:	4642      	mov	r2, r8
 8001f16:	464b      	mov	r3, r9
 8001f18:	1891      	adds	r1, r2, r2
 8001f1a:	61b9      	str	r1, [r7, #24]
 8001f1c:	415b      	adcs	r3, r3
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f24:	4641      	mov	r1, r8
 8001f26:	1851      	adds	r1, r2, r1
 8001f28:	6139      	str	r1, [r7, #16]
 8001f2a:	4649      	mov	r1, r9
 8001f2c:	414b      	adcs	r3, r1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f3c:	4659      	mov	r1, fp
 8001f3e:	00cb      	lsls	r3, r1, #3
 8001f40:	4651      	mov	r1, sl
 8001f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f46:	4651      	mov	r1, sl
 8001f48:	00ca      	lsls	r2, r1, #3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4642      	mov	r2, r8
 8001f52:	189b      	adds	r3, r3, r2
 8001f54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f58:	464b      	mov	r3, r9
 8001f5a:	460a      	mov	r2, r1
 8001f5c:	eb42 0303 	adc.w	r3, r2, r3
 8001f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f7c:	4649      	mov	r1, r9
 8001f7e:	008b      	lsls	r3, r1, #2
 8001f80:	4641      	mov	r1, r8
 8001f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f86:	4641      	mov	r1, r8
 8001f88:	008a      	lsls	r2, r1, #2
 8001f8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f8e:	f7fe fe13 	bl	8000bb8 <__aeabi_uldivmod>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4611      	mov	r1, r2
 8001f98:	4b38      	ldr	r3, [pc, #224]	; (800207c <SetBaudrate+0x47c>)
 8001f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2264      	movs	r2, #100	; 0x64
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	1acb      	subs	r3, r1, r3
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	3332      	adds	r3, #50	; 0x32
 8001fac:	4a33      	ldr	r2, [pc, #204]	; (800207c <SetBaudrate+0x47c>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb8:	441c      	add	r4, r3
 8001fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	673b      	str	r3, [r7, #112]	; 0x70
 8001fc2:	677a      	str	r2, [r7, #116]	; 0x74
 8001fc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001fc8:	4642      	mov	r2, r8
 8001fca:	464b      	mov	r3, r9
 8001fcc:	1891      	adds	r1, r2, r2
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	415b      	adcs	r3, r3
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd8:	4641      	mov	r1, r8
 8001fda:	1851      	adds	r1, r2, r1
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	4649      	mov	r1, r9
 8001fe0:	414b      	adcs	r3, r1
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001ff0:	4659      	mov	r1, fp
 8001ff2:	00cb      	lsls	r3, r1, #3
 8001ff4:	4651      	mov	r1, sl
 8001ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ffa:	4651      	mov	r1, sl
 8001ffc:	00ca      	lsls	r2, r1, #3
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	4603      	mov	r3, r0
 8002004:	4642      	mov	r2, r8
 8002006:	189b      	adds	r3, r3, r2
 8002008:	66bb      	str	r3, [r7, #104]	; 0x68
 800200a:	464b      	mov	r3, r9
 800200c:	460a      	mov	r2, r1
 800200e:	eb42 0303 	adc.w	r3, r2, r3
 8002012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	663b      	str	r3, [r7, #96]	; 0x60
 800201e:	667a      	str	r2, [r7, #100]	; 0x64
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800202c:	4649      	mov	r1, r9
 800202e:	008b      	lsls	r3, r1, #2
 8002030:	4641      	mov	r1, r8
 8002032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002036:	4641      	mov	r1, r8
 8002038:	008a      	lsls	r2, r1, #2
 800203a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800203e:	f7fe fdbb 	bl	8000bb8 <__aeabi_uldivmod>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <SetBaudrate+0x47c>)
 8002048:	fba3 1302 	umull	r1, r3, r3, r2
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	2164      	movs	r1, #100	; 0x64
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	3332      	adds	r3, #50	; 0x32
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <SetBaudrate+0x47c>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4422      	add	r2, r4
 800206e:	609a      	str	r2, [r3, #8]
}
 8002070:	bf00      	nop
 8002072:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002076:	46bd      	mov	sp, r7
 8002078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800207c:	51eb851f 	.word	0x51eb851f

08002080 <OneWire_ProcessBit>:
/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
  uint8_t txData = 0xFF;
 800208c:	23ff      	movs	r3, #255	; 0xff
 800208e:	73fb      	strb	r3, [r7, #15]
  uint8_t rxData = 0x00;
 8002090:	2300      	movs	r3, #0
 8002092:	73bb      	strb	r3, [r7, #14]
  if (bit == 0)
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <OneWire_ProcessBit+0x1e>
  {
    txData = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
  }
  HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 800209e:	f107 010f 	add.w	r1, r7, #15
 80020a2:	230a      	movs	r3, #10
 80020a4:	2201      	movs	r2, #1
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f002 fc38 	bl	800491c <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 80020ac:	f107 010e 	add.w	r1, r7, #14
 80020b0:	230a      	movs	r3, #10
 80020b2:	2201      	movs	r2, #1
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f002 fcbc 	bl	8004a32 <HAL_UART_Receive>
  return rxData;
 80020ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <OneWire_ProcessByte>:
/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
  uint8_t rxByte = 0x00;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	73bb      	strb	r3, [r7, #14]
 80020d8:	e022      	b.n	8002120 <OneWire_ProcessByte+0x5c>
  {
    uint8_t txBit = (byte >> i) & 0x01;
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	7bbb      	ldrb	r3, [r7, #14]
 80020de:	fa42 f303 	asr.w	r3, r2, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	733b      	strb	r3, [r7, #12]
    uint8_t rxBit = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	737b      	strb	r3, [r7, #13]
    uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 80020ee:	7b3b      	ldrb	r3, [r7, #12]
 80020f0:	4619      	mov	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffc4 	bl	8002080 <OneWire_ProcessBit>
 80020f8:	4603      	mov	r3, r0
 80020fa:	72fb      	strb	r3, [r7, #11]
    if (tempRxData == 0xFF)
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	2bff      	cmp	r3, #255	; 0xff
 8002100:	d101      	bne.n	8002106 <OneWire_ProcessByte+0x42>
    {
      rxBit = 1;
 8002102:	2301      	movs	r3, #1
 8002104:	737b      	strb	r3, [r7, #13]
    }
    rxByte |= (rxBit << i);
 8002106:	7b7a      	ldrb	r2, [r7, #13]
 8002108:	7bbb      	ldrb	r3, [r7, #14]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	b25a      	sxtb	r2, r3
 8002110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002114:	4313      	orrs	r3, r2
 8002116:	b25b      	sxtb	r3, r3
 8002118:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 800211a:	7bbb      	ldrb	r3, [r7, #14]
 800211c:	3301      	adds	r3, #1
 800211e:	73bb      	strb	r3, [r7, #14]
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	2b07      	cmp	r3, #7
 8002124:	d9d9      	bls.n	80020da <OneWire_ProcessByte+0x16>
  }
  return rxByte;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <OneWire_Reset>:
/*----------------------------------------------------------------------------*/
ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  ONEWIRE_Status status = ONEWIRE_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
  uint8_t txByte = ONEWIRE_RESET_BYTE;
 800213c:	23f0      	movs	r3, #240	; 0xf0
 800213e:	73bb      	strb	r3, [r7, #14]
  uint8_t rxByte = 0x00;
 8002140:	2300      	movs	r3, #0
 8002142:	737b      	strb	r3, [r7, #13]
  SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 8002144:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff fd59 	bl	8001c00 <SetBaudrate>
  HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 800214e:	f107 010e 	add.w	r1, r7, #14
 8002152:	230a      	movs	r3, #10
 8002154:	2201      	movs	r2, #1
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f002 fbe0 	bl	800491c <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 800215c:	f107 010d 	add.w	r1, r7, #13
 8002160:	230a      	movs	r3, #10
 8002162:	2201      	movs	r2, #1
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f002 fc64 	bl	8004a32 <HAL_UART_Receive>
  SetBaudrate(huart, ONEWIRE_BAUDRATE);
 800216a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fd46 	bl	8001c00 <SetBaudrate>
  if (rxByte == txByte)
 8002174:	7b7a      	ldrb	r2, [r7, #13]
 8002176:	7bbb      	ldrb	r3, [r7, #14]
 8002178:	429a      	cmp	r2, r3
 800217a:	d101      	bne.n	8002180 <OneWire_Reset+0x50>
  {
    status = ONEWIRE_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002190:	4b2e      	ldr	r3, [pc, #184]	; (800224c <MX_SPI1_Init+0xc0>)
 8002192:	4a2f      	ldr	r2, [pc, #188]	; (8002250 <MX_SPI1_Init+0xc4>)
 8002194:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002196:	4b2d      	ldr	r3, [pc, #180]	; (800224c <MX_SPI1_Init+0xc0>)
 8002198:	f44f 7282 	mov.w	r2, #260	; 0x104
 800219c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800219e:	4b2b      	ldr	r3, [pc, #172]	; (800224c <MX_SPI1_Init+0xc0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021a4:	4b29      	ldr	r3, [pc, #164]	; (800224c <MX_SPI1_Init+0xc0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021aa:	4b28      	ldr	r3, [pc, #160]	; (800224c <MX_SPI1_Init+0xc0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021b0:	4b26      	ldr	r3, [pc, #152]	; (800224c <MX_SPI1_Init+0xc0>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021b6:	4b25      	ldr	r3, [pc, #148]	; (800224c <MX_SPI1_Init+0xc0>)
 80021b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021be:	4b23      	ldr	r3, [pc, #140]	; (800224c <MX_SPI1_Init+0xc0>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <MX_SPI1_Init+0xc0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <MX_SPI1_Init+0xc0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021d0:	4b1e      	ldr	r3, [pc, #120]	; (800224c <MX_SPI1_Init+0xc0>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <MX_SPI1_Init+0xc0>)
 80021d8:	220a      	movs	r2, #10
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021dc:	481b      	ldr	r0, [pc, #108]	; (800224c <MX_SPI1_Init+0xc0>)
 80021de:	f001 faab 	bl	8003738 <HAL_SPI_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021e8:	f7ff fd04 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.Instance = SPI1;
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <MX_SPI1_Init+0xc0>)
 80021ee:	4a18      	ldr	r2, [pc, #96]	; (8002250 <MX_SPI1_Init+0xc4>)
 80021f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <MX_SPI1_Init+0xc0>)
 80021f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <MX_SPI1_Init+0xc0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <MX_SPI1_Init+0xc0>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_SPI1_Init+0xc0>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_SPI1_Init+0xc0>)
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_SPI1_Init+0xc0>)
 8002214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002218:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_SPI1_Init+0xc0>)
 800221c:	2200      	movs	r2, #0
 800221e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <MX_SPI1_Init+0xc0>)
 8002222:	2200      	movs	r2, #0
 8002224:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_SPI1_Init+0xc0>)
 8002228:	2200      	movs	r2, #0
 800222a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <MX_SPI1_Init+0xc0>)
 800222e:	2200      	movs	r2, #0
 8002230:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_SPI1_Init+0xc0>)
 8002234:	2207      	movs	r2, #7
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002238:	4804      	ldr	r0, [pc, #16]	; (800224c <MX_SPI1_Init+0xc0>)
 800223a:	f001 fa7d 	bl	8003738 <HAL_SPI_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_SPI1_Init+0xbc>
  {
    Error_Handler();
 8002244:	f7ff fcd6 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE END SPI1_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000230 	.word	0x20000230
 8002250:	40013000 	.word	0x40013000

08002254 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_SPI_MspInit+0x84>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d12b      	bne.n	80022ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_SPI_MspInit+0x88>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_SPI_MspInit+0x88>)
 8002280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_SPI_MspInit+0x88>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_SPI_MspInit+0x88>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <HAL_SPI_MspInit+0x88>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_SPI_MspInit+0x88>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022ae:	23e0      	movs	r3, #224	; 0xe0
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022be:	2305      	movs	r3, #5
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <HAL_SPI_MspInit+0x8c>)
 80022ca:	f000 fbf5 	bl	8002ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	; 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40013000 	.word	0x40013000
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020000 	.word	0x40020000

080022e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_MspInit+0x4c>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <HAL_MspInit+0x4c>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <HAL_MspInit+0x4c>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_MspInit+0x4c>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_MspInit+0x4c>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	6413      	str	r3, [r2, #64]	; 0x40
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_MspInit+0x4c>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	; 0x30
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <HAL_InitTick+0xd0>)
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	4a2d      	ldr	r2, [pc, #180]	; (8002404 <HAL_InitTick+0xd0>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6453      	str	r3, [r2, #68]	; 0x44
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_InitTick+0xd0>)
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002360:	f107 020c 	add.w	r2, r7, #12
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f001 f9b2 	bl	80036d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002370:	f001 f99c 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8002374:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	4a23      	ldr	r2, [pc, #140]	; (8002408 <HAL_InitTick+0xd4>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0c9b      	lsrs	r3, r3, #18
 8002380:	3b01      	subs	r3, #1
 8002382:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_InitTick+0xd8>)
 8002386:	4a22      	ldr	r2, [pc, #136]	; (8002410 <HAL_InitTick+0xdc>)
 8002388:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_InitTick+0xd8>)
 800238c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002390:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002392:	4a1e      	ldr	r2, [pc, #120]	; (800240c <HAL_InitTick+0xd8>)
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_InitTick+0xd8>)
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_InitTick+0xd8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_InitTick+0xd8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80023aa:	4818      	ldr	r0, [pc, #96]	; (800240c <HAL_InitTick+0xd8>)
 80023ac:	f001 ff9a 	bl	80042e4 <HAL_TIM_Base_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80023b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d11b      	bne.n	80023f6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80023be:	4813      	ldr	r0, [pc, #76]	; (800240c <HAL_InitTick+0xd8>)
 80023c0:	f001 ffea 	bl	8004398 <HAL_TIM_Base_Start_IT>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80023ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d111      	bne.n	80023f6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023d2:	2019      	movs	r0, #25
 80023d4:	f000 fb62 	bl	8002a9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	d808      	bhi.n	80023f0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80023de:	2200      	movs	r2, #0
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	2019      	movs	r0, #25
 80023e4:	f000 fb3e 	bl	8002a64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_InitTick+0xe0>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e002      	b.n	80023f6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80023f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3730      	adds	r7, #48	; 0x30
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	431bde83 	.word	0x431bde83
 800240c:	20000288 	.word	0x20000288
 8002410:	40010000 	.word	0x40010000
 8002414:	20000020 	.word	0x20000020

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800241c:	e7fe      	b.n	800241c <NMI_Handler+0x4>

0800241e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <HardFault_Handler+0x4>

08002424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <MemManage_Handler+0x4>

0800242a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <BusFault_Handler+0x4>

08002430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <UsageFault_Handler+0x4>

08002436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002476:	f001 fff1 	bl	800445c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000288 	.word	0x20000288

08002484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return 1;
 8002488:	2301      	movs	r3, #1
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_kill>:

int _kill(int pid, int sig)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800249e:	f003 fc7b 	bl	8005d98 <__errno>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2216      	movs	r2, #22
 80024a6:	601a      	str	r2, [r3, #0]
  return -1;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_exit>:

void _exit (int status)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ffe7 	bl	8002494 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024c6:	e7fe      	b.n	80024c6 <_exit+0x12>

080024c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	e00a      	b.n	80024f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024da:	f3af 8000 	nop.w
 80024de:	4601      	mov	r1, r0
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	60ba      	str	r2, [r7, #8]
 80024e6:	b2ca      	uxtb	r2, r1
 80024e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dbf0      	blt.n	80024da <_read+0x12>
  }

  return len;
 80024f8:	687b      	ldr	r3, [r7, #4]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	e009      	b.n	8002528 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	60ba      	str	r2, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3301      	adds	r3, #1
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	dbf1      	blt.n	8002514 <_write+0x12>
  }
  return len;
 8002530:	687b      	ldr	r3, [r7, #4]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <_close>:

int _close(int file)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002562:	605a      	str	r2, [r3, #4]
  return 0;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <_isatty>:

int _isatty(int file)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025ac:	4a14      	ldr	r2, [pc, #80]	; (8002600 <_sbrk+0x5c>)
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <_sbrk+0x60>)
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <_sbrk+0x64>)
 80025c2:	4a12      	ldr	r2, [pc, #72]	; (800260c <_sbrk+0x68>)
 80025c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <_sbrk+0x64>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d207      	bcs.n	80025e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d4:	f003 fbe0 	bl	8005d98 <__errno>
 80025d8:	4603      	mov	r3, r0
 80025da:	220c      	movs	r2, #12
 80025dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
 80025e2:	e009      	b.n	80025f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	4a05      	ldr	r2, [pc, #20]	; (8002608 <_sbrk+0x64>)
 80025f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20020000 	.word	0x20020000
 8002604:	00000400 	.word	0x00000400
 8002608:	200002d0 	.word	0x200002d0
 800260c:	200004b8 	.word	0x200004b8

08002610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <SystemInit+0x20>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	4a05      	ldr	r2, [pc, #20]	; (8002630 <SystemInit+0x20>)
 800261c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <MX_USART1_UART_Init+0x4c>)
 800263a:	4a12      	ldr	r2, [pc, #72]	; (8002684 <MX_USART1_UART_Init+0x50>)
 800263c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <MX_USART1_UART_Init+0x4c>)
 8002640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <MX_USART1_UART_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <MX_USART1_UART_Init+0x4c>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <MX_USART1_UART_Init+0x4c>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <MX_USART1_UART_Init+0x4c>)
 800265a:	220c      	movs	r2, #12
 800265c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <MX_USART1_UART_Init+0x4c>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <MX_USART1_UART_Init+0x4c>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800266a:	4805      	ldr	r0, [pc, #20]	; (8002680 <MX_USART1_UART_Init+0x4c>)
 800266c:	f002 f8fe 	bl	800486c <HAL_HalfDuplex_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002676:	f7ff fabd 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200002d4 	.word	0x200002d4
 8002684:	40011000 	.word	0x40011000

08002688 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <MX_USART2_UART_Init+0x4c>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <MX_USART2_UART_Init+0x50>)
 8002690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <MX_USART2_UART_Init+0x4c>)
 8002694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <MX_USART2_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026ae:	220c      	movs	r2, #12
 80026b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026be:	4805      	ldr	r0, [pc, #20]	; (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026c0:	f002 f884 	bl	80047cc <HAL_UART_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026ca:	f7ff fa93 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000031c 	.word	0x2000031c
 80026d8:	40004400 	.word	0x40004400

080026dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	; 0x30
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a32      	ldr	r2, [pc, #200]	; (80027c4 <HAL_UART_MspInit+0xe8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d12d      	bne.n	800275a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_UART_MspInit+0xec>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4a30      	ldr	r2, [pc, #192]	; (80027c8 <HAL_UART_MspInit+0xec>)
 8002708:	f043 0310 	orr.w	r3, r3, #16
 800270c:	6453      	str	r3, [r2, #68]	; 0x44
 800270e:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <HAL_UART_MspInit+0xec>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_UART_MspInit+0xec>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <HAL_UART_MspInit+0xec>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <HAL_UART_MspInit+0xec>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800273a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800273c:	2312      	movs	r3, #18
 800273e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002748:	2307      	movs	r3, #7
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	4619      	mov	r1, r3
 8002752:	481e      	ldr	r0, [pc, #120]	; (80027cc <HAL_UART_MspInit+0xf0>)
 8002754:	f000 f9b0 	bl	8002ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002758:	e030      	b.n	80027bc <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <HAL_UART_MspInit+0xf4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d12b      	bne.n	80027bc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_UART_MspInit+0xec>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <HAL_UART_MspInit+0xec>)
 800276e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002772:	6413      	str	r3, [r2, #64]	; 0x40
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <HAL_UART_MspInit+0xec>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_UART_MspInit+0xec>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <HAL_UART_MspInit+0xec>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6313      	str	r3, [r2, #48]	; 0x30
 8002790:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_UART_MspInit+0xec>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800279c:	230c      	movs	r3, #12
 800279e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ac:	2307      	movs	r3, #7
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4619      	mov	r1, r3
 80027b6:	4805      	ldr	r0, [pc, #20]	; (80027cc <HAL_UART_MspInit+0xf0>)
 80027b8:	f000 f97e 	bl	8002ab8 <HAL_GPIO_Init>
}
 80027bc:	bf00      	nop
 80027be:	3730      	adds	r7, #48	; 0x30
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40011000 	.word	0x40011000
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40004400 	.word	0x40004400

080027d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800280c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027d8:	f7ff ff1a 	bl	8002610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027dc:	480c      	ldr	r0, [pc, #48]	; (8002810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027de:	490d      	ldr	r1, [pc, #52]	; (8002814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027e0:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e4:	e002      	b.n	80027ec <LoopCopyDataInit>

080027e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ea:	3304      	adds	r3, #4

080027ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f0:	d3f9      	bcc.n	80027e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027f4:	4c0a      	ldr	r4, [pc, #40]	; (8002820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f8:	e001      	b.n	80027fe <LoopFillZerobss>

080027fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027fc:	3204      	adds	r2, #4

080027fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002800:	d3fb      	bcc.n	80027fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002802:	f003 facf 	bl	8005da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002806:	f7ff f899 	bl	800193c <main>
  bx  lr    
 800280a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800280c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002814:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002818:	080082bc 	.word	0x080082bc
  ldr r2, =_sbss
 800281c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002820:	200004b4 	.word	0x200004b4

08002824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002824:	e7fe      	b.n	8002824 <ADC_IRQHandler>
	...

08002828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_Init+0x40>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <HAL_Init+0x40>)
 8002832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_Init+0x40>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <HAL_Init+0x40>)
 800283e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_Init+0x40>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a07      	ldr	r2, [pc, #28]	; (8002868 <HAL_Init+0x40>)
 800284a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002850:	2003      	movs	r0, #3
 8002852:	f000 f8fc 	bl	8002a4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002856:	200f      	movs	r0, #15
 8002858:	f7ff fd6c 	bl	8002334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800285c:	f7ff fd42 	bl	80022e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023c00 	.word	0x40023c00

0800286c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_IncTick+0x20>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_IncTick+0x24>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <HAL_IncTick+0x24>)
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000024 	.word	0x20000024
 8002890:	20000364 	.word	0x20000364

08002894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return uwTick;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_GetTick+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000364 	.word	0x20000364

080028ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7ff ffee 	bl	8002894 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d005      	beq.n	80028d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_Delay+0x44>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028d2:	bf00      	nop
 80028d4:	f7ff ffde 	bl	8002894 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d8f7      	bhi.n	80028d4 <HAL_Delay+0x28>
  {
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000024 	.word	0x20000024

080028f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800291c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	60d3      	str	r3, [r2, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <__NVIC_GetPriorityGrouping+0x18>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 0307 	and.w	r3, r3, #7
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	2b00      	cmp	r3, #0
 8002968:	db0b      	blt.n	8002982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	4907      	ldr	r1, [pc, #28]	; (8002990 <__NVIC_EnableIRQ+0x38>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2001      	movs	r0, #1
 800297a:	fa00 f202 	lsl.w	r2, r0, r2
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e100 	.word	0xe000e100

08002994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	; (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	; (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
         );
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ff4c 	bl	80028f4 <__NVIC_SetPriorityGrouping>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a76:	f7ff ff61 	bl	800293c <__NVIC_GetPriorityGrouping>
 8002a7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	6978      	ldr	r0, [r7, #20]
 8002a82:	f7ff ffb1 	bl	80029e8 <NVIC_EncodePriority>
 8002a86:	4602      	mov	r2, r0
 8002a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ff80 	bl	8002994 <__NVIC_SetPriority>
}
 8002a94:	bf00      	nop
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff54 	bl	8002958 <__NVIC_EnableIRQ>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e159      	b.n	8002d88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f040 8148 	bne.w	8002d82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d005      	beq.n	8002b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d130      	bne.n	8002b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 0201 	and.w	r2, r3, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d017      	beq.n	8002ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d123      	bne.n	8002bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	08da      	lsrs	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3208      	adds	r2, #8
 8002bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	2203      	movs	r2, #3
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0203 	and.w	r2, r3, #3
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a2 	beq.w	8002d82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b57      	ldr	r3, [pc, #348]	; (8002da0 <HAL_GPIO_Init+0x2e8>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a56      	ldr	r2, [pc, #344]	; (8002da0 <HAL_GPIO_Init+0x2e8>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b54      	ldr	r3, [pc, #336]	; (8002da0 <HAL_GPIO_Init+0x2e8>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c5a:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_GPIO_Init+0x2ec>)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a49      	ldr	r2, [pc, #292]	; (8002da8 <HAL_GPIO_Init+0x2f0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_GPIO_Init+0x202>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_GPIO_Init+0x2f4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0x1fe>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a47      	ldr	r2, [pc, #284]	; (8002db0 <HAL_GPIO_Init+0x2f8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00d      	beq.n	8002cb2 <HAL_GPIO_Init+0x1fa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a46      	ldr	r2, [pc, #280]	; (8002db4 <HAL_GPIO_Init+0x2fc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <HAL_GPIO_Init+0x1f6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a45      	ldr	r2, [pc, #276]	; (8002db8 <HAL_GPIO_Init+0x300>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_GPIO_Init+0x1f2>
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	e008      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002caa:	2307      	movs	r3, #7
 8002cac:	e006      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e004      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e002      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f002 0203 	and.w	r2, r2, #3
 8002cc2:	0092      	lsls	r2, r2, #2
 8002cc4:	4093      	lsls	r3, r2
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ccc:	4935      	ldr	r1, [pc, #212]	; (8002da4 <HAL_GPIO_Init+0x2ec>)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cfe:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d28:	4a24      	ldr	r2, [pc, #144]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d2e:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d52:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3301      	adds	r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b0f      	cmp	r3, #15
 8002d8c:	f67f aea2 	bls.w	8002ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40020000 	.word	0x40020000
 8002dac:	40020400 	.word	0x40020400
 8002db0:	40020800 	.word	0x40020800
 8002db4:	40020c00 	.word	0x40020c00
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40013c00 	.word	0x40013c00

08002dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	887b      	ldrh	r3, [r7, #2]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	e001      	b.n	8002de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e00:	787b      	ldrb	r3, [r7, #1]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e0c:	e003      	b.n	8002e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e0e:	887b      	ldrh	r3, [r7, #2]
 8002e10:	041a      	lsls	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	619a      	str	r2, [r3, #24]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e267      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d075      	beq.n	8002f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e42:	4b88      	ldr	r3, [pc, #544]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d00c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4e:	4b85      	ldr	r3, [pc, #532]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d112      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5a:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e66:	d10b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	4b7e      	ldr	r3, [pc, #504]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d05b      	beq.n	8002f2c <HAL_RCC_OscConfig+0x108>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d157      	bne.n	8002f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e242      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e88:	d106      	bne.n	8002e98 <HAL_RCC_OscConfig+0x74>
 8002e8a:	4b76      	ldr	r3, [pc, #472]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x98>
 8002ea2:	4b70      	ldr	r3, [pc, #448]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6f      	ldr	r2, [pc, #444]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b6d      	ldr	r3, [pc, #436]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6c      	ldr	r2, [pc, #432]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002ebc:	4b69      	ldr	r3, [pc, #420]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a68      	ldr	r2, [pc, #416]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b66      	ldr	r3, [pc, #408]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a65      	ldr	r2, [pc, #404]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7ff fcda 	bl	8002894 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7ff fcd6 	bl	8002894 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e207      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xc0>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7ff fcc6 	bl	8002894 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7ff fcc2 	bl	8002894 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1f3      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	4b51      	ldr	r3, [pc, #324]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0xe8>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f46:	4b47      	ldr	r3, [pc, #284]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f52:	4b44      	ldr	r3, [pc, #272]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1c7      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4937      	ldr	r1, [pc, #220]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e03a      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b34      	ldr	r3, [pc, #208]	; (8003068 <HAL_RCC_OscConfig+0x244>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7ff fc7b 	bl	8002894 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7ff fc77 	bl	8002894 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1a8      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4925      	ldr	r1, [pc, #148]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_OscConfig+0x244>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7ff fc5a 	bl	8002894 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7ff fc56 	bl	8002894 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e187      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d036      	beq.n	800307c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_RCC_OscConfig+0x248>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7ff fc3a 	bl	8002894 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003024:	f7ff fc36 	bl	8002894 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e167      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8003038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x200>
 8003042:	e01b      	b.n	800307c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_OscConfig+0x248>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7ff fc23 	bl	8002894 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	e00e      	b.n	8003070 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003052:	f7ff fc1f 	bl	8002894 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d907      	bls.n	8003070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e150      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003064:	40023800 	.word	0x40023800
 8003068:	42470000 	.word	0x42470000
 800306c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ea      	bne.n	8003052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8097 	beq.w	80031b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b81      	ldr	r3, [pc, #516]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	4b7d      	ldr	r3, [pc, #500]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	4a7c      	ldr	r2, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a8:	6413      	str	r3, [r2, #64]	; 0x40
 80030aa:	4b7a      	ldr	r3, [pc, #488]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b77      	ldr	r3, [pc, #476]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d118      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c6:	4b74      	ldr	r3, [pc, #464]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a73      	ldr	r2, [pc, #460]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7ff fbdf 	bl	8002894 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7ff fbdb 	bl	8002894 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e10c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x2ea>
 8003100:	4b64      	ldr	r3, [pc, #400]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a63      	ldr	r2, [pc, #396]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b05      	cmp	r3, #5
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x30c>
 8003116:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a5e      	ldr	r2, [pc, #376]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
 8003122:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4a5b      	ldr	r2, [pc, #364]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6713      	str	r3, [r2, #112]	; 0x70
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 8003130:	4b58      	ldr	r3, [pc, #352]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a57      	ldr	r2, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
 800313c:	4b55      	ldr	r3, [pc, #340]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a54      	ldr	r2, [pc, #336]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003142:	f023 0304 	bic.w	r3, r3, #4
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7ff fba0 	bl	8002894 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7ff fb9c 	bl	8002894 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0cb      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	4b49      	ldr	r3, [pc, #292]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ee      	beq.n	8003158 <HAL_RCC_OscConfig+0x334>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7ff fb8a 	bl	8002894 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7ff fb86 	bl	8002894 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0b5      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319a:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ee      	bne.n	8003184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	4a38      	ldr	r2, [pc, #224]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a1 	beq.w	8003304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c2:	4b34      	ldr	r3, [pc, #208]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d05c      	beq.n	8003288 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d141      	bne.n	800325a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_RCC_OscConfig+0x478>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7ff fb5a 	bl	8002894 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e4:	f7ff fb56 	bl	8002894 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e087      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	3b01      	subs	r3, #1
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	491b      	ldr	r1, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x478>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7ff fb2f 	bl	8002894 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323a:	f7ff fb2b 	bl	8002894 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e05c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x416>
 8003258:	e054      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCC_OscConfig+0x478>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7ff fb18 	bl	8002894 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7ff fb14 	bl	8002894 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e045      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x444>
 8003286:	e03d      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e038      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000
 800329c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x4ec>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d028      	beq.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d121      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d11a      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800

08003314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0cc      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b68      	ldr	r3, [pc, #416]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d90c      	bls.n	8003350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b65      	ldr	r3, [pc, #404]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800338a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d044      	beq.n	8003434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d119      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e06f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e067      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4934      	ldr	r1, [pc, #208]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7ff fa46 	bl	8002894 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7ff fa42 	bl	8002894 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e04f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20c      	bcs.n	800345c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe ff3a 	bl	8002334 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023c00 	.word	0x40023c00
 80034d0:	40023800 	.word	0x40023800
 80034d4:	08007f20 	.word	0x08007f20
 80034d8:	2000001c 	.word	0x2000001c
 80034dc:	20000020 	.word	0x20000020

080034e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b090      	sub	sp, #64	; 0x40
 80034e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
 80034ec:	2300      	movs	r3, #0
 80034ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f0:	2300      	movs	r3, #0
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d00d      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x40>
 8003504:	2b08      	cmp	r3, #8
 8003506:	f200 80a1 	bhi.w	800364c <HAL_RCC_GetSysClockFreq+0x16c>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x34>
 800350e:	2b04      	cmp	r3, #4
 8003510:	d003      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x3a>
 8003512:	e09b      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b53      	ldr	r3, [pc, #332]	; (8003664 <HAL_RCC_GetSysClockFreq+0x184>)
 8003516:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003518:	e09b      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351a:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_GetSysClockFreq+0x188>)
 800351c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800351e:	e098      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003520:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003528:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352a:	4b4d      	ldr	r3, [pc, #308]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d028      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	627a      	str	r2, [r7, #36]	; 0x24
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003548:	2100      	movs	r1, #0
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_GetSysClockFreq+0x188>)
 800354c:	fb03 f201 	mul.w	r2, r3, r1
 8003550:	2300      	movs	r3, #0
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	4413      	add	r3, r2
 8003558:	4a43      	ldr	r2, [pc, #268]	; (8003668 <HAL_RCC_GetSysClockFreq+0x188>)
 800355a:	fba0 1202 	umull	r1, r2, r0, r2
 800355e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003560:	460a      	mov	r2, r1
 8003562:	62ba      	str	r2, [r7, #40]	; 0x28
 8003564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003566:	4413      	add	r3, r2
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356c:	2200      	movs	r2, #0
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	61fa      	str	r2, [r7, #28]
 8003572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800357a:	f7fd fb1d 	bl	8000bb8 <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4613      	mov	r3, r2
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003586:	e053      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003588:	4b35      	ldr	r3, [pc, #212]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	2200      	movs	r2, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	617a      	str	r2, [r7, #20]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800359a:	f04f 0b00 	mov.w	fp, #0
 800359e:	4652      	mov	r2, sl
 80035a0:	465b      	mov	r3, fp
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b0:	0150      	lsls	r0, r2, #5
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	ebb2 080a 	subs.w	r8, r2, sl
 80035ba:	eb63 090b 	sbc.w	r9, r3, fp
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035d2:	ebb2 0408 	subs.w	r4, r2, r8
 80035d6:	eb63 0509 	sbc.w	r5, r3, r9
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	00eb      	lsls	r3, r5, #3
 80035e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e8:	00e2      	lsls	r2, r4, #3
 80035ea:	4614      	mov	r4, r2
 80035ec:	461d      	mov	r5, r3
 80035ee:	eb14 030a 	adds.w	r3, r4, sl
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	eb45 030b 	adc.w	r3, r5, fp
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003606:	4629      	mov	r1, r5
 8003608:	028b      	lsls	r3, r1, #10
 800360a:	4621      	mov	r1, r4
 800360c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003610:	4621      	mov	r1, r4
 8003612:	028a      	lsls	r2, r1, #10
 8003614:	4610      	mov	r0, r2
 8003616:	4619      	mov	r1, r3
 8003618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361a:	2200      	movs	r2, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	60fa      	str	r2, [r7, #12]
 8003620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003624:	f7fd fac8 	bl	8000bb8 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4613      	mov	r3, r2
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	3301      	adds	r3, #1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800364a:	e002      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_GetSysClockFreq+0x184>)
 800364e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003654:	4618      	mov	r0, r3
 8003656:	3740      	adds	r7, #64	; 0x40
 8003658:	46bd      	mov	sp, r7
 800365a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	00f42400 	.word	0x00f42400
 8003668:	017d7840 	.word	0x017d7840

0800366c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_RCC_GetHCLKFreq+0x14>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	2000001c 	.word	0x2000001c

08003684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003688:	f7ff fff0 	bl	800366c <HAL_RCC_GetHCLKFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	0a9b      	lsrs	r3, r3, #10
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	4903      	ldr	r1, [pc, #12]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40023800 	.word	0x40023800
 80036a8:	08007f30 	.word	0x08007f30

080036ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036b0:	f7ff ffdc 	bl	800366c <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0b5b      	lsrs	r3, r3, #13
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08007f30 	.word	0x08007f30

080036d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	220f      	movs	r2, #15
 80036e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_RCC_GetClockConfig+0x5c>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0203 	and.w	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <HAL_RCC_GetClockConfig+0x5c>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <HAL_RCC_GetClockConfig+0x5c>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_RCC_GetClockConfig+0x5c>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <HAL_RCC_GetClockConfig+0x60>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0207 	and.w	r2, r3, #7
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	601a      	str	r2, [r3, #0]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	40023c00 	.word	0x40023c00

08003738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07b      	b.n	8003842 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	2b00      	cmp	r3, #0
 8003750:	d108      	bne.n	8003764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800375a:	d009      	beq.n	8003770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
 8003762:	e005      	b.n	8003770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fe fd62 	bl	8002254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	ea42 0103 	orr.w	r1, r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	f003 0104 	and.w	r1, r3, #4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	f003 0210 	and.w	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003830:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b088      	sub	sp, #32
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_SPI_Transmit+0x22>
 8003868:	2302      	movs	r3, #2
 800386a:	e12d      	b.n	8003ac8 <HAL_SPI_Transmit+0x27e>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003874:	f7ff f80e 	bl	8002894 <HAL_GetTick>
 8003878:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d002      	beq.n	8003890 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800388a:	2302      	movs	r3, #2
 800388c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800388e:	e116      	b.n	8003abe <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_SPI_Transmit+0x52>
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038a0:	e10d      	b.n	8003abe <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2203      	movs	r2, #3
 80038a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e8:	d10f      	bne.n	800390a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003908:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d007      	beq.n	8003928 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003926:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003930:	d14f      	bne.n	80039d2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_SPI_Transmit+0xf6>
 800393a:	8afb      	ldrh	r3, [r7, #22]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d142      	bne.n	80039c6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	881a      	ldrh	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003964:	e02f      	b.n	80039c6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b02      	cmp	r3, #2
 8003972:	d112      	bne.n	800399a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	86da      	strh	r2, [r3, #54]	; 0x36
 8003998:	e015      	b.n	80039c6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800399a:	f7fe ff7b 	bl	8002894 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d803      	bhi.n	80039b2 <HAL_SPI_Transmit+0x168>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d102      	bne.n	80039b8 <HAL_SPI_Transmit+0x16e>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80039c4:	e07b      	b.n	8003abe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ca      	bne.n	8003966 <HAL_SPI_Transmit+0x11c>
 80039d0:	e050      	b.n	8003a74 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_SPI_Transmit+0x196>
 80039da:	8afb      	ldrh	r3, [r7, #22]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d144      	bne.n	8003a6a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	330c      	adds	r3, #12
 80039ea:	7812      	ldrb	r2, [r2, #0]
 80039ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a06:	e030      	b.n	8003a6a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d113      	bne.n	8003a3e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	7812      	ldrb	r2, [r2, #0]
 8003a22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a3c:	e015      	b.n	8003a6a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a3e:	f7fe ff29 	bl	8002894 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d803      	bhi.n	8003a56 <HAL_SPI_Transmit+0x20c>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d102      	bne.n	8003a5c <HAL_SPI_Transmit+0x212>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003a68:	e029      	b.n	8003abe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1c9      	bne.n	8003a08 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	6839      	ldr	r1, [r7, #0]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fbdf 	bl	800423c <SPI_EndRxTxTransaction>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e003      	b.n	8003abe <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ac6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d002      	beq.n	8003af6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
 8003af2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003af4:	e0fb      	b.n	8003cee <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afe:	d112      	bne.n	8003b26 <HAL_SPI_Receive+0x56>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10e      	bne.n	8003b26 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b10:	88fa      	ldrh	r2, [r7, #6]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f8ef 	bl	8003d00 <HAL_SPI_TransmitReceive>
 8003b22:	4603      	mov	r3, r0
 8003b24:	e0e8      	b.n	8003cf8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_SPI_Receive+0x64>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e0e1      	b.n	8003cf8 <HAL_SPI_Receive+0x228>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b3c:	f7fe feaa 	bl	8002894 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_SPI_Receive+0x7e>
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b52:	e0cc      	b.n	8003cee <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2204      	movs	r2, #4
 8003b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	88fa      	ldrh	r2, [r7, #6]
 8003b6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9a:	d10f      	bne.n	8003bbc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003baa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc6:	2b40      	cmp	r3, #64	; 0x40
 8003bc8:	d007      	beq.n	8003bda <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d16a      	bne.n	8003cb8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003be2:	e032      	b.n	8003c4a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d115      	bne.n	8003c1e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f103 020c 	add.w	r2, r3, #12
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	7812      	ldrb	r2, [r2, #0]
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c1c:	e015      	b.n	8003c4a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c1e:	f7fe fe39 	bl	8002894 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d803      	bhi.n	8003c36 <HAL_SPI_Receive+0x166>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d102      	bne.n	8003c3c <HAL_SPI_Receive+0x16c>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003c48:	e051      	b.n	8003cee <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1c7      	bne.n	8003be4 <HAL_SPI_Receive+0x114>
 8003c54:	e035      	b.n	8003cc2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d113      	bne.n	8003c8c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	b292      	uxth	r2, r2
 8003c70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	1c9a      	adds	r2, r3, #2
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c8a:	e015      	b.n	8003cb8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8c:	f7fe fe02 	bl	8002894 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d803      	bhi.n	8003ca4 <HAL_SPI_Receive+0x1d4>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d102      	bne.n	8003caa <HAL_SPI_Receive+0x1da>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003cb6:	e01a      	b.n	8003cee <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1c9      	bne.n	8003c56 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	6839      	ldr	r1, [r7, #0]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fa52 	bl	8004170 <SPI_EndRxTransaction>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
 8003ce4:	e003      	b.n	8003cee <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	; 0x30
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x26>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e198      	b.n	8004058 <HAL_SPI_TransmitReceive+0x358>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d2e:	f7fe fdb1 	bl	8002894 <HAL_GetTick>
 8003d32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d44:	887b      	ldrh	r3, [r7, #2]
 8003d46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d00f      	beq.n	8003d70 <HAL_SPI_TransmitReceive+0x70>
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d56:	d107      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d103      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x68>
 8003d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d003      	beq.n	8003d70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d6e:	e16d      	b.n	800404c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0x82>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0x82>
 8003d7c:	887b      	ldrh	r3, [r7, #2]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d88:	e160      	b.n	800404c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d003      	beq.n	8003d9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2205      	movs	r2, #5
 8003d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	887a      	ldrh	r2, [r7, #2]
 8003dae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	887a      	ldrh	r2, [r7, #2]
 8003dc0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	887a      	ldrh	r2, [r7, #2]
 8003dc6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d007      	beq.n	8003df2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfa:	d17c      	bne.n	8003ef6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x10a>
 8003e04:	8b7b      	ldrh	r3, [r7, #26]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d16a      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	881a      	ldrh	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	1c9a      	adds	r2, r3, #2
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e2e:	e057      	b.n	8003ee0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d11b      	bne.n	8003e76 <HAL_SPI_TransmitReceive+0x176>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d016      	beq.n	8003e76 <HAL_SPI_TransmitReceive+0x176>
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d113      	bne.n	8003e76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	881a      	ldrh	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	1c9a      	adds	r2, r3, #2
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d119      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x1b8>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d014      	beq.n	8003eb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	b292      	uxth	r2, r2
 8003e9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	1c9a      	adds	r2, r3, #2
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003eb8:	f7fe fcec 	bl	8002894 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d80b      	bhi.n	8003ee0 <HAL_SPI_TransmitReceive+0x1e0>
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d007      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003ede:	e0b5      	b.n	800404c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1a2      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0x130>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d19d      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0x130>
 8003ef4:	e080      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0x204>
 8003efe:	8b7b      	ldrh	r3, [r7, #26]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d16f      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	7812      	ldrb	r2, [r2, #0]
 8003f10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f2a:	e05b      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d11c      	bne.n	8003f74 <HAL_SPI_TransmitReceive+0x274>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d017      	beq.n	8003f74 <HAL_SPI_TransmitReceive+0x274>
 8003f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d114      	bne.n	8003f74 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	7812      	ldrb	r2, [r2, #0]
 8003f56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d119      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x2b6>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d014      	beq.n	8003fb6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fb6:	f7fe fc6d 	bl	8002894 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d803      	bhi.n	8003fce <HAL_SPI_TransmitReceive+0x2ce>
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d102      	bne.n	8003fd4 <HAL_SPI_TransmitReceive+0x2d4>
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d107      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003fe2:	e033      	b.n	800404c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d19e      	bne.n	8003f2c <HAL_SPI_TransmitReceive+0x22c>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d199      	bne.n	8003f2c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f91d 	bl	800423c <SPI_EndRxTxTransaction>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d006      	beq.n	8004016 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004014:	e01a      	b.n	800404c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004042:	e003      	b.n	800404c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004054:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004058:	4618      	mov	r0, r3
 800405a:	3730      	adds	r7, #48	; 0x30
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004070:	f7fe fc10 	bl	8002894 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	4413      	add	r3, r2
 800407e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004080:	f7fe fc08 	bl	8002894 <HAL_GetTick>
 8004084:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004086:	4b39      	ldr	r3, [pc, #228]	; (800416c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	015b      	lsls	r3, r3, #5
 800408c:	0d1b      	lsrs	r3, r3, #20
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	fb02 f303 	mul.w	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004096:	e054      	b.n	8004142 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d050      	beq.n	8004142 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040a0:	f7fe fbf8 	bl	8002894 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d902      	bls.n	80040b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d13d      	bne.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ce:	d111      	bne.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d8:	d004      	beq.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e2:	d107      	bne.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fc:	d10f      	bne.n	800411e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800411c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e017      	b.n	8004162 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3b01      	subs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4013      	ands	r3, r2
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	429a      	cmp	r2, r3
 800415e:	d19b      	bne.n	8004098 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	2000001c 	.word	0x2000001c

08004170 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004184:	d111      	bne.n	80041aa <SPI_EndRxTransaction+0x3a>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800418e:	d004      	beq.n	800419a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004198:	d107      	bne.n	80041aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041b2:	d12a      	bne.n	800420a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041bc:	d012      	beq.n	80041e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2200      	movs	r2, #0
 80041c6:	2180      	movs	r1, #128	; 0x80
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff ff49 	bl	8004060 <SPI_WaitFlagStateUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d02d      	beq.n	8004230 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	f043 0220 	orr.w	r2, r3, #32
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e026      	b.n	8004232 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2101      	movs	r1, #1
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff ff36 	bl	8004060 <SPI_WaitFlagStateUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01a      	beq.n	8004230 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e013      	b.n	8004232 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2200      	movs	r2, #0
 8004212:	2101      	movs	r1, #1
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff ff23 	bl	8004060 <SPI_WaitFlagStateUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e000      	b.n	8004232 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2201      	movs	r2, #1
 8004250:	2102      	movs	r1, #2
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff ff04 	bl	8004060 <SPI_WaitFlagStateUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f043 0220 	orr.w	r2, r3, #32
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e032      	b.n	80042d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800426e:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <SPI_EndRxTxTransaction+0xa0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <SPI_EndRxTxTransaction+0xa4>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	0d5b      	lsrs	r3, r3, #21
 800427a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800427e:	fb02 f303 	mul.w	r3, r2, r3
 8004282:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428c:	d112      	bne.n	80042b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2200      	movs	r2, #0
 8004296:	2180      	movs	r1, #128	; 0x80
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff fee1 	bl	8004060 <SPI_WaitFlagStateUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e00f      	b.n	80042d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	3b01      	subs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d0f2      	beq.n	80042b4 <SPI_EndRxTxTransaction+0x78>
 80042ce:	e000      	b.n	80042d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80042d0:	bf00      	nop
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	2000001c 	.word	0x2000001c
 80042e0:	165e9f81 	.word	0x165e9f81

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e041      	b.n	800437a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f839 	bl	8004382 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 f9b2 	bl	800468c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d001      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e044      	b.n	800443a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <HAL_TIM_Base_Start_IT+0xb0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d018      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x6c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d013      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x6c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1a      	ldr	r2, [pc, #104]	; (800444c <HAL_TIM_Base_Start_IT+0xb4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x6c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a19      	ldr	r2, [pc, #100]	; (8004450 <HAL_TIM_Base_Start_IT+0xb8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d009      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x6c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <HAL_TIM_Base_Start_IT+0xbc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x6c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a16      	ldr	r2, [pc, #88]	; (8004458 <HAL_TIM_Base_Start_IT+0xc0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d111      	bne.n	8004428 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b06      	cmp	r3, #6
 8004414:	d010      	beq.n	8004438 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	e007      	b.n	8004438 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40014000 	.word	0x40014000

0800445c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d020      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01b      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0202 	mvn.w	r2, #2
 8004490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f8d2 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 80044ac:	e005      	b.n	80044ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8c4 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f8d5 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d020      	beq.n	800450c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01b      	beq.n	800450c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0204 	mvn.w	r2, #4
 80044dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2202      	movs	r2, #2
 80044e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f8ac 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 80044f8:	e005      	b.n	8004506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f89e 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8af 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d020      	beq.n	8004558 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01b      	beq.n	8004558 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0208 	mvn.w	r2, #8
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2204      	movs	r2, #4
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f886 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f878 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f889 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01b      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0210 	mvn.w	r2, #16
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2208      	movs	r2, #8
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f860 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f852 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f863 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00c      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0201 	mvn.w	r2, #1
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd fb04 	bl	8001bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8e6 	bl	80047b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f834 	bl	8004678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00c      	beq.n	8004634 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0220 	mvn.w	r2, #32
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f8b8 	bl	80047a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a3a      	ldr	r2, [pc, #232]	; (8004788 <TIM_Base_SetConfig+0xfc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00f      	beq.n	80046c4 <TIM_Base_SetConfig+0x38>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046aa:	d00b      	beq.n	80046c4 <TIM_Base_SetConfig+0x38>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a37      	ldr	r2, [pc, #220]	; (800478c <TIM_Base_SetConfig+0x100>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_Base_SetConfig+0x38>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a36      	ldr	r2, [pc, #216]	; (8004790 <TIM_Base_SetConfig+0x104>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_Base_SetConfig+0x38>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a35      	ldr	r2, [pc, #212]	; (8004794 <TIM_Base_SetConfig+0x108>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d108      	bne.n	80046d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2b      	ldr	r2, [pc, #172]	; (8004788 <TIM_Base_SetConfig+0xfc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d01b      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e4:	d017      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a28      	ldr	r2, [pc, #160]	; (800478c <TIM_Base_SetConfig+0x100>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a27      	ldr	r2, [pc, #156]	; (8004790 <TIM_Base_SetConfig+0x104>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00f      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a26      	ldr	r2, [pc, #152]	; (8004794 <TIM_Base_SetConfig+0x108>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00b      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a25      	ldr	r2, [pc, #148]	; (8004798 <TIM_Base_SetConfig+0x10c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a24      	ldr	r2, [pc, #144]	; (800479c <TIM_Base_SetConfig+0x110>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a23      	ldr	r2, [pc, #140]	; (80047a0 <TIM_Base_SetConfig+0x114>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d108      	bne.n	8004728 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <TIM_Base_SetConfig+0xfc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d103      	bne.n	800475c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d105      	bne.n	800477a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f023 0201 	bic.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]
  }
}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40014000 	.word	0x40014000
 800479c:	40014400 	.word	0x40014400
 80047a0:	40014800 	.word	0x40014800

080047a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e042      	b.n	8004864 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fd ff72 	bl	80026dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	; 0x24
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800480e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fa61 	bl	8004cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e04a      	b.n	8004914 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fd ff22 	bl	80026dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2224      	movs	r2, #36	; 0x24
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fa11 	bl	8004cd8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695a      	ldr	r2, [r3, #20]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80048d4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0208 	orr.w	r2, r2, #8
 80048e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b20      	cmp	r3, #32
 800493a:	d175      	bne.n	8004a28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_UART_Transmit+0x2c>
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e06e      	b.n	8004a2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2221      	movs	r2, #33	; 0x21
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800495a:	f7fd ff9b 	bl	8002894 <HAL_GetTick>
 800495e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	88fa      	ldrh	r2, [r7, #6]
 8004964:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	88fa      	ldrh	r2, [r7, #6]
 800496a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004974:	d108      	bne.n	8004988 <HAL_UART_Transmit+0x6c>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	e003      	b.n	8004990 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800498c:	2300      	movs	r3, #0
 800498e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004990:	e02e      	b.n	80049f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2200      	movs	r2, #0
 800499a:	2180      	movs	r1, #128	; 0x80
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f8df 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e03a      	b.n	8004a2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	3302      	adds	r3, #2
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	e007      	b.n	80049e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	3301      	adds	r3, #1
 80049e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1cb      	bne.n	8004992 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2200      	movs	r2, #0
 8004a02:	2140      	movs	r1, #64	; 0x40
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f8ab 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e006      	b.n	8004a2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e000      	b.n	8004a2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
  }
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b08a      	sub	sp, #40	; 0x28
 8004a36:	af02      	add	r7, sp, #8
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	f040 8081 	bne.w	8004b56 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_UART_Receive+0x2e>
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e079      	b.n	8004b58 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2222      	movs	r2, #34	; 0x22
 8004a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a78:	f7fd ff0c 	bl	8002894 <HAL_GetTick>
 8004a7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	88fa      	ldrh	r2, [r7, #6]
 8004a82:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	88fa      	ldrh	r2, [r7, #6]
 8004a88:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a92:	d108      	bne.n	8004aa6 <HAL_UART_Receive+0x74>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	e003      	b.n	8004aae <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004aae:	e047      	b.n	8004b40 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2120      	movs	r1, #32
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f850 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e042      	b.n	8004b58 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10c      	bne.n	8004af2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	3302      	adds	r3, #2
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	e01f      	b.n	8004b32 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afa:	d007      	beq.n	8004b0c <HAL_UART_Receive+0xda>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10a      	bne.n	8004b1a <HAL_UART_Receive+0xe8>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e008      	b.n	8004b2c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1b2      	bne.n	8004ab0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e000      	b.n	8004b58 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004b56:	2302      	movs	r3, #2
  }
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b70:	e03b      	b.n	8004bea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d037      	beq.n	8004bea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7a:	f7fd fe8b 	bl	8002894 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d302      	bcc.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e03a      	b.n	8004c0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d023      	beq.n	8004bea <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d020      	beq.n	8004bea <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d01d      	beq.n	8004bea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d116      	bne.n	8004bea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f81d 	bl	8004c12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2208      	movs	r2, #8
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e00f      	b.n	8004c0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d0b4      	beq.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b095      	sub	sp, #84	; 0x54
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c3a:	643a      	str	r2, [r7, #64]	; 0x40
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3314      	adds	r3, #20
 8004c54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f023 0301 	bic.w	r3, r3, #1
 8004c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3314      	adds	r3, #20
 8004c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e5      	bne.n	8004c4e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d119      	bne.n	8004cbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f023 0310 	bic.w	r3, r3, #16
 8004ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004caa:	61ba      	str	r2, [r7, #24]
 8004cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6979      	ldr	r1, [r7, #20]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e5      	bne.n	8004c8a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ccc:	bf00      	nop
 8004cce:	3754      	adds	r7, #84	; 0x54
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cdc:	b0c0      	sub	sp, #256	; 0x100
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	68d9      	ldr	r1, [r3, #12]
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	ea40 0301 	orr.w	r3, r0, r1
 8004d00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d30:	f021 010c 	bic.w	r1, r1, #12
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d52:	6999      	ldr	r1, [r3, #24]
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	ea40 0301 	orr.w	r3, r0, r1
 8004d5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b8f      	ldr	r3, [pc, #572]	; (8004fa4 <UART_SetConfig+0x2cc>)
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d005      	beq.n	8004d78 <UART_SetConfig+0xa0>
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4b8d      	ldr	r3, [pc, #564]	; (8004fa8 <UART_SetConfig+0x2d0>)
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d104      	bne.n	8004d82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d78:	f7fe fc98 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8004d7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d80:	e003      	b.n	8004d8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d82:	f7fe fc7f 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8004d86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d94:	f040 810c 	bne.w	8004fb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004da2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004da6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004daa:	4622      	mov	r2, r4
 8004dac:	462b      	mov	r3, r5
 8004dae:	1891      	adds	r1, r2, r2
 8004db0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004db2:	415b      	adcs	r3, r3
 8004db4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004db6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dba:	4621      	mov	r1, r4
 8004dbc:	eb12 0801 	adds.w	r8, r2, r1
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	eb43 0901 	adc.w	r9, r3, r1
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dda:	4690      	mov	r8, r2
 8004ddc:	4699      	mov	r9, r3
 8004dde:	4623      	mov	r3, r4
 8004de0:	eb18 0303 	adds.w	r3, r8, r3
 8004de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004de8:	462b      	mov	r3, r5
 8004dea:	eb49 0303 	adc.w	r3, r9, r3
 8004dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e06:	460b      	mov	r3, r1
 8004e08:	18db      	adds	r3, r3, r3
 8004e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	eb42 0303 	adc.w	r3, r2, r3
 8004e12:	657b      	str	r3, [r7, #84]	; 0x54
 8004e14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e1c:	f7fb fecc 	bl	8000bb8 <__aeabi_uldivmod>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4b61      	ldr	r3, [pc, #388]	; (8004fac <UART_SetConfig+0x2d4>)
 8004e26:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	011c      	lsls	r4, r3, #4
 8004e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e40:	4642      	mov	r2, r8
 8004e42:	464b      	mov	r3, r9
 8004e44:	1891      	adds	r1, r2, r2
 8004e46:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e48:	415b      	adcs	r3, r3
 8004e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e50:	4641      	mov	r1, r8
 8004e52:	eb12 0a01 	adds.w	sl, r2, r1
 8004e56:	4649      	mov	r1, r9
 8004e58:	eb43 0b01 	adc.w	fp, r3, r1
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e70:	4692      	mov	sl, r2
 8004e72:	469b      	mov	fp, r3
 8004e74:	4643      	mov	r3, r8
 8004e76:	eb1a 0303 	adds.w	r3, sl, r3
 8004e7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e7e:	464b      	mov	r3, r9
 8004e80:	eb4b 0303 	adc.w	r3, fp, r3
 8004e84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	18db      	adds	r3, r3, r3
 8004ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	eb42 0303 	adc.w	r3, r2, r3
 8004ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004eae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004eb2:	f7fb fe81 	bl	8000bb8 <__aeabi_uldivmod>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4b3b      	ldr	r3, [pc, #236]	; (8004fac <UART_SetConfig+0x2d4>)
 8004ebe:	fba3 2301 	umull	r2, r3, r3, r1
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	2264      	movs	r2, #100	; 0x64
 8004ec6:	fb02 f303 	mul.w	r3, r2, r3
 8004eca:	1acb      	subs	r3, r1, r3
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ed2:	4b36      	ldr	r3, [pc, #216]	; (8004fac <UART_SetConfig+0x2d4>)
 8004ed4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ee0:	441c      	add	r4, r3
 8004ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ef0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	1891      	adds	r1, r2, r2
 8004efa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004efc:	415b      	adcs	r3, r3
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f04:	4641      	mov	r1, r8
 8004f06:	1851      	adds	r1, r2, r1
 8004f08:	6339      	str	r1, [r7, #48]	; 0x30
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	414b      	adcs	r3, r1
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	00cb      	lsls	r3, r1, #3
 8004f20:	4651      	mov	r1, sl
 8004f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f26:	4651      	mov	r1, sl
 8004f28:	00ca      	lsls	r2, r1, #3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4603      	mov	r3, r0
 8004f30:	4642      	mov	r2, r8
 8004f32:	189b      	adds	r3, r3, r2
 8004f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f38:	464b      	mov	r3, r9
 8004f3a:	460a      	mov	r2, r1
 8004f3c:	eb42 0303 	adc.w	r3, r2, r3
 8004f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f58:	460b      	mov	r3, r1
 8004f5a:	18db      	adds	r3, r3, r3
 8004f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5e:	4613      	mov	r3, r2
 8004f60:	eb42 0303 	adc.w	r3, r2, r3
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f6e:	f7fb fe23 	bl	8000bb8 <__aeabi_uldivmod>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <UART_SetConfig+0x2d4>)
 8004f78:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	2164      	movs	r1, #100	; 0x64
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	3332      	adds	r3, #50	; 0x32
 8004f8a:	4a08      	ldr	r2, [pc, #32]	; (8004fac <UART_SetConfig+0x2d4>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	f003 0207 	and.w	r2, r3, #7
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4422      	add	r2, r4
 8004f9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fa0:	e106      	b.n	80051b0 <UART_SetConfig+0x4d8>
 8004fa2:	bf00      	nop
 8004fa4:	40011000 	.word	0x40011000
 8004fa8:	40011400 	.word	0x40011400
 8004fac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fc2:	4642      	mov	r2, r8
 8004fc4:	464b      	mov	r3, r9
 8004fc6:	1891      	adds	r1, r2, r2
 8004fc8:	6239      	str	r1, [r7, #32]
 8004fca:	415b      	adcs	r3, r3
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	1854      	adds	r4, r2, r1
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	eb43 0501 	adc.w	r5, r3, r1
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	00eb      	lsls	r3, r5, #3
 8004fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fea:	00e2      	lsls	r2, r4, #3
 8004fec:	4614      	mov	r4, r2
 8004fee:	461d      	mov	r5, r3
 8004ff0:	4643      	mov	r3, r8
 8004ff2:	18e3      	adds	r3, r4, r3
 8004ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ff8:	464b      	mov	r3, r9
 8004ffa:	eb45 0303 	adc.w	r3, r5, r3
 8004ffe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800500e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800501e:	4629      	mov	r1, r5
 8005020:	008b      	lsls	r3, r1, #2
 8005022:	4621      	mov	r1, r4
 8005024:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005028:	4621      	mov	r1, r4
 800502a:	008a      	lsls	r2, r1, #2
 800502c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005030:	f7fb fdc2 	bl	8000bb8 <__aeabi_uldivmod>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4b60      	ldr	r3, [pc, #384]	; (80051bc <UART_SetConfig+0x4e4>)
 800503a:	fba3 2302 	umull	r2, r3, r3, r2
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	011c      	lsls	r4, r3, #4
 8005042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005046:	2200      	movs	r2, #0
 8005048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800504c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005050:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005054:	4642      	mov	r2, r8
 8005056:	464b      	mov	r3, r9
 8005058:	1891      	adds	r1, r2, r2
 800505a:	61b9      	str	r1, [r7, #24]
 800505c:	415b      	adcs	r3, r3
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005064:	4641      	mov	r1, r8
 8005066:	1851      	adds	r1, r2, r1
 8005068:	6139      	str	r1, [r7, #16]
 800506a:	4649      	mov	r1, r9
 800506c:	414b      	adcs	r3, r1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800507c:	4659      	mov	r1, fp
 800507e:	00cb      	lsls	r3, r1, #3
 8005080:	4651      	mov	r1, sl
 8005082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005086:	4651      	mov	r1, sl
 8005088:	00ca      	lsls	r2, r1, #3
 800508a:	4610      	mov	r0, r2
 800508c:	4619      	mov	r1, r3
 800508e:	4603      	mov	r3, r0
 8005090:	4642      	mov	r2, r8
 8005092:	189b      	adds	r3, r3, r2
 8005094:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005098:	464b      	mov	r3, r9
 800509a:	460a      	mov	r2, r1
 800509c:	eb42 0303 	adc.w	r3, r2, r3
 80050a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80050ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050bc:	4649      	mov	r1, r9
 80050be:	008b      	lsls	r3, r1, #2
 80050c0:	4641      	mov	r1, r8
 80050c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050c6:	4641      	mov	r1, r8
 80050c8:	008a      	lsls	r2, r1, #2
 80050ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050ce:	f7fb fd73 	bl	8000bb8 <__aeabi_uldivmod>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4611      	mov	r1, r2
 80050d8:	4b38      	ldr	r3, [pc, #224]	; (80051bc <UART_SetConfig+0x4e4>)
 80050da:	fba3 2301 	umull	r2, r3, r3, r1
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	2264      	movs	r2, #100	; 0x64
 80050e2:	fb02 f303 	mul.w	r3, r2, r3
 80050e6:	1acb      	subs	r3, r1, r3
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	3332      	adds	r3, #50	; 0x32
 80050ec:	4a33      	ldr	r2, [pc, #204]	; (80051bc <UART_SetConfig+0x4e4>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f8:	441c      	add	r4, r3
 80050fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050fe:	2200      	movs	r2, #0
 8005100:	673b      	str	r3, [r7, #112]	; 0x70
 8005102:	677a      	str	r2, [r7, #116]	; 0x74
 8005104:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005108:	4642      	mov	r2, r8
 800510a:	464b      	mov	r3, r9
 800510c:	1891      	adds	r1, r2, r2
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	415b      	adcs	r3, r3
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005118:	4641      	mov	r1, r8
 800511a:	1851      	adds	r1, r2, r1
 800511c:	6039      	str	r1, [r7, #0]
 800511e:	4649      	mov	r1, r9
 8005120:	414b      	adcs	r3, r1
 8005122:	607b      	str	r3, [r7, #4]
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005130:	4659      	mov	r1, fp
 8005132:	00cb      	lsls	r3, r1, #3
 8005134:	4651      	mov	r1, sl
 8005136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800513a:	4651      	mov	r1, sl
 800513c:	00ca      	lsls	r2, r1, #3
 800513e:	4610      	mov	r0, r2
 8005140:	4619      	mov	r1, r3
 8005142:	4603      	mov	r3, r0
 8005144:	4642      	mov	r2, r8
 8005146:	189b      	adds	r3, r3, r2
 8005148:	66bb      	str	r3, [r7, #104]	; 0x68
 800514a:	464b      	mov	r3, r9
 800514c:	460a      	mov	r2, r1
 800514e:	eb42 0303 	adc.w	r3, r2, r3
 8005152:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	663b      	str	r3, [r7, #96]	; 0x60
 800515e:	667a      	str	r2, [r7, #100]	; 0x64
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800516c:	4649      	mov	r1, r9
 800516e:	008b      	lsls	r3, r1, #2
 8005170:	4641      	mov	r1, r8
 8005172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005176:	4641      	mov	r1, r8
 8005178:	008a      	lsls	r2, r1, #2
 800517a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800517e:	f7fb fd1b 	bl	8000bb8 <__aeabi_uldivmod>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4b0d      	ldr	r3, [pc, #52]	; (80051bc <UART_SetConfig+0x4e4>)
 8005188:	fba3 1302 	umull	r1, r3, r3, r2
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	2164      	movs	r1, #100	; 0x64
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	3332      	adds	r3, #50	; 0x32
 800519a:	4a08      	ldr	r2, [pc, #32]	; (80051bc <UART_SetConfig+0x4e4>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	f003 020f 	and.w	r2, r3, #15
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4422      	add	r2, r4
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051b6:	46bd      	mov	sp, r7
 80051b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051bc:	51eb851f 	.word	0x51eb851f

080051c0 <__cvt>:
 80051c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	ec55 4b10 	vmov	r4, r5, d0
 80051c8:	2d00      	cmp	r5, #0
 80051ca:	460e      	mov	r6, r1
 80051cc:	4619      	mov	r1, r3
 80051ce:	462b      	mov	r3, r5
 80051d0:	bfbb      	ittet	lt
 80051d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051d6:	461d      	movlt	r5, r3
 80051d8:	2300      	movge	r3, #0
 80051da:	232d      	movlt	r3, #45	; 0x2d
 80051dc:	700b      	strb	r3, [r1, #0]
 80051de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051e4:	4691      	mov	r9, r2
 80051e6:	f023 0820 	bic.w	r8, r3, #32
 80051ea:	bfbc      	itt	lt
 80051ec:	4622      	movlt	r2, r4
 80051ee:	4614      	movlt	r4, r2
 80051f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051f4:	d005      	beq.n	8005202 <__cvt+0x42>
 80051f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051fa:	d100      	bne.n	80051fe <__cvt+0x3e>
 80051fc:	3601      	adds	r6, #1
 80051fe:	2102      	movs	r1, #2
 8005200:	e000      	b.n	8005204 <__cvt+0x44>
 8005202:	2103      	movs	r1, #3
 8005204:	ab03      	add	r3, sp, #12
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	ab02      	add	r3, sp, #8
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	ec45 4b10 	vmov	d0, r4, r5
 8005210:	4653      	mov	r3, sl
 8005212:	4632      	mov	r2, r6
 8005214:	f000 fe78 	bl	8005f08 <_dtoa_r>
 8005218:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800521c:	4607      	mov	r7, r0
 800521e:	d102      	bne.n	8005226 <__cvt+0x66>
 8005220:	f019 0f01 	tst.w	r9, #1
 8005224:	d022      	beq.n	800526c <__cvt+0xac>
 8005226:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800522a:	eb07 0906 	add.w	r9, r7, r6
 800522e:	d110      	bne.n	8005252 <__cvt+0x92>
 8005230:	783b      	ldrb	r3, [r7, #0]
 8005232:	2b30      	cmp	r3, #48	; 0x30
 8005234:	d10a      	bne.n	800524c <__cvt+0x8c>
 8005236:	2200      	movs	r2, #0
 8005238:	2300      	movs	r3, #0
 800523a:	4620      	mov	r0, r4
 800523c:	4629      	mov	r1, r5
 800523e:	f7fb fc4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005242:	b918      	cbnz	r0, 800524c <__cvt+0x8c>
 8005244:	f1c6 0601 	rsb	r6, r6, #1
 8005248:	f8ca 6000 	str.w	r6, [sl]
 800524c:	f8da 3000 	ldr.w	r3, [sl]
 8005250:	4499      	add	r9, r3
 8005252:	2200      	movs	r2, #0
 8005254:	2300      	movs	r3, #0
 8005256:	4620      	mov	r0, r4
 8005258:	4629      	mov	r1, r5
 800525a:	f7fb fc3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800525e:	b108      	cbz	r0, 8005264 <__cvt+0xa4>
 8005260:	f8cd 900c 	str.w	r9, [sp, #12]
 8005264:	2230      	movs	r2, #48	; 0x30
 8005266:	9b03      	ldr	r3, [sp, #12]
 8005268:	454b      	cmp	r3, r9
 800526a:	d307      	bcc.n	800527c <__cvt+0xbc>
 800526c:	9b03      	ldr	r3, [sp, #12]
 800526e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005270:	1bdb      	subs	r3, r3, r7
 8005272:	4638      	mov	r0, r7
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	b004      	add	sp, #16
 8005278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527c:	1c59      	adds	r1, r3, #1
 800527e:	9103      	str	r1, [sp, #12]
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	e7f0      	b.n	8005266 <__cvt+0xa6>

08005284 <__exponent>:
 8005284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005286:	4603      	mov	r3, r0
 8005288:	2900      	cmp	r1, #0
 800528a:	bfb8      	it	lt
 800528c:	4249      	neglt	r1, r1
 800528e:	f803 2b02 	strb.w	r2, [r3], #2
 8005292:	bfb4      	ite	lt
 8005294:	222d      	movlt	r2, #45	; 0x2d
 8005296:	222b      	movge	r2, #43	; 0x2b
 8005298:	2909      	cmp	r1, #9
 800529a:	7042      	strb	r2, [r0, #1]
 800529c:	dd2a      	ble.n	80052f4 <__exponent+0x70>
 800529e:	f10d 0207 	add.w	r2, sp, #7
 80052a2:	4617      	mov	r7, r2
 80052a4:	260a      	movs	r6, #10
 80052a6:	4694      	mov	ip, r2
 80052a8:	fb91 f5f6 	sdiv	r5, r1, r6
 80052ac:	fb06 1415 	mls	r4, r6, r5, r1
 80052b0:	3430      	adds	r4, #48	; 0x30
 80052b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80052b6:	460c      	mov	r4, r1
 80052b8:	2c63      	cmp	r4, #99	; 0x63
 80052ba:	f102 32ff 	add.w	r2, r2, #4294967295
 80052be:	4629      	mov	r1, r5
 80052c0:	dcf1      	bgt.n	80052a6 <__exponent+0x22>
 80052c2:	3130      	adds	r1, #48	; 0x30
 80052c4:	f1ac 0402 	sub.w	r4, ip, #2
 80052c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052cc:	1c41      	adds	r1, r0, #1
 80052ce:	4622      	mov	r2, r4
 80052d0:	42ba      	cmp	r2, r7
 80052d2:	d30a      	bcc.n	80052ea <__exponent+0x66>
 80052d4:	f10d 0209 	add.w	r2, sp, #9
 80052d8:	eba2 020c 	sub.w	r2, r2, ip
 80052dc:	42bc      	cmp	r4, r7
 80052de:	bf88      	it	hi
 80052e0:	2200      	movhi	r2, #0
 80052e2:	4413      	add	r3, r2
 80052e4:	1a18      	subs	r0, r3, r0
 80052e6:	b003      	add	sp, #12
 80052e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80052ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80052f2:	e7ed      	b.n	80052d0 <__exponent+0x4c>
 80052f4:	2330      	movs	r3, #48	; 0x30
 80052f6:	3130      	adds	r1, #48	; 0x30
 80052f8:	7083      	strb	r3, [r0, #2]
 80052fa:	70c1      	strb	r1, [r0, #3]
 80052fc:	1d03      	adds	r3, r0, #4
 80052fe:	e7f1      	b.n	80052e4 <__exponent+0x60>

08005300 <_printf_float>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	ed2d 8b02 	vpush	{d8}
 8005308:	b08d      	sub	sp, #52	; 0x34
 800530a:	460c      	mov	r4, r1
 800530c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005310:	4616      	mov	r6, r2
 8005312:	461f      	mov	r7, r3
 8005314:	4605      	mov	r5, r0
 8005316:	f000 fcf5 	bl	8005d04 <_localeconv_r>
 800531a:	f8d0 a000 	ldr.w	sl, [r0]
 800531e:	4650      	mov	r0, sl
 8005320:	f7fa ffae 	bl	8000280 <strlen>
 8005324:	2300      	movs	r3, #0
 8005326:	930a      	str	r3, [sp, #40]	; 0x28
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	9305      	str	r3, [sp, #20]
 800532c:	f8d8 3000 	ldr.w	r3, [r8]
 8005330:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005334:	3307      	adds	r3, #7
 8005336:	f023 0307 	bic.w	r3, r3, #7
 800533a:	f103 0208 	add.w	r2, r3, #8
 800533e:	f8c8 2000 	str.w	r2, [r8]
 8005342:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005346:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800534a:	9307      	str	r3, [sp, #28]
 800534c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005350:	ee08 0a10 	vmov	s16, r0
 8005354:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005358:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800535c:	4b9e      	ldr	r3, [pc, #632]	; (80055d8 <_printf_float+0x2d8>)
 800535e:	f04f 32ff 	mov.w	r2, #4294967295
 8005362:	f7fb fbeb 	bl	8000b3c <__aeabi_dcmpun>
 8005366:	bb88      	cbnz	r0, 80053cc <_printf_float+0xcc>
 8005368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800536c:	4b9a      	ldr	r3, [pc, #616]	; (80055d8 <_printf_float+0x2d8>)
 800536e:	f04f 32ff 	mov.w	r2, #4294967295
 8005372:	f7fb fbc5 	bl	8000b00 <__aeabi_dcmple>
 8005376:	bb48      	cbnz	r0, 80053cc <_printf_float+0xcc>
 8005378:	2200      	movs	r2, #0
 800537a:	2300      	movs	r3, #0
 800537c:	4640      	mov	r0, r8
 800537e:	4649      	mov	r1, r9
 8005380:	f7fb fbb4 	bl	8000aec <__aeabi_dcmplt>
 8005384:	b110      	cbz	r0, 800538c <_printf_float+0x8c>
 8005386:	232d      	movs	r3, #45	; 0x2d
 8005388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538c:	4a93      	ldr	r2, [pc, #588]	; (80055dc <_printf_float+0x2dc>)
 800538e:	4b94      	ldr	r3, [pc, #592]	; (80055e0 <_printf_float+0x2e0>)
 8005390:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005394:	bf94      	ite	ls
 8005396:	4690      	movls	r8, r2
 8005398:	4698      	movhi	r8, r3
 800539a:	2303      	movs	r3, #3
 800539c:	6123      	str	r3, [r4, #16]
 800539e:	9b05      	ldr	r3, [sp, #20]
 80053a0:	f023 0304 	bic.w	r3, r3, #4
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	f04f 0900 	mov.w	r9, #0
 80053aa:	9700      	str	r7, [sp, #0]
 80053ac:	4633      	mov	r3, r6
 80053ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80053b0:	4621      	mov	r1, r4
 80053b2:	4628      	mov	r0, r5
 80053b4:	f000 f9da 	bl	800576c <_printf_common>
 80053b8:	3001      	adds	r0, #1
 80053ba:	f040 8090 	bne.w	80054de <_printf_float+0x1de>
 80053be:	f04f 30ff 	mov.w	r0, #4294967295
 80053c2:	b00d      	add	sp, #52	; 0x34
 80053c4:	ecbd 8b02 	vpop	{d8}
 80053c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053cc:	4642      	mov	r2, r8
 80053ce:	464b      	mov	r3, r9
 80053d0:	4640      	mov	r0, r8
 80053d2:	4649      	mov	r1, r9
 80053d4:	f7fb fbb2 	bl	8000b3c <__aeabi_dcmpun>
 80053d8:	b140      	cbz	r0, 80053ec <_printf_float+0xec>
 80053da:	464b      	mov	r3, r9
 80053dc:	2b00      	cmp	r3, #0
 80053de:	bfbc      	itt	lt
 80053e0:	232d      	movlt	r3, #45	; 0x2d
 80053e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053e6:	4a7f      	ldr	r2, [pc, #508]	; (80055e4 <_printf_float+0x2e4>)
 80053e8:	4b7f      	ldr	r3, [pc, #508]	; (80055e8 <_printf_float+0x2e8>)
 80053ea:	e7d1      	b.n	8005390 <_printf_float+0x90>
 80053ec:	6863      	ldr	r3, [r4, #4]
 80053ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053f2:	9206      	str	r2, [sp, #24]
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	d13f      	bne.n	8005478 <_printf_float+0x178>
 80053f8:	2306      	movs	r3, #6
 80053fa:	6063      	str	r3, [r4, #4]
 80053fc:	9b05      	ldr	r3, [sp, #20]
 80053fe:	6861      	ldr	r1, [r4, #4]
 8005400:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005404:	2300      	movs	r3, #0
 8005406:	9303      	str	r3, [sp, #12]
 8005408:	ab0a      	add	r3, sp, #40	; 0x28
 800540a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800540e:	ab09      	add	r3, sp, #36	; 0x24
 8005410:	ec49 8b10 	vmov	d0, r8, r9
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6022      	str	r2, [r4, #0]
 8005418:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800541c:	4628      	mov	r0, r5
 800541e:	f7ff fecf 	bl	80051c0 <__cvt>
 8005422:	9b06      	ldr	r3, [sp, #24]
 8005424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005426:	2b47      	cmp	r3, #71	; 0x47
 8005428:	4680      	mov	r8, r0
 800542a:	d108      	bne.n	800543e <_printf_float+0x13e>
 800542c:	1cc8      	adds	r0, r1, #3
 800542e:	db02      	blt.n	8005436 <_printf_float+0x136>
 8005430:	6863      	ldr	r3, [r4, #4]
 8005432:	4299      	cmp	r1, r3
 8005434:	dd41      	ble.n	80054ba <_printf_float+0x1ba>
 8005436:	f1ab 0302 	sub.w	r3, fp, #2
 800543a:	fa5f fb83 	uxtb.w	fp, r3
 800543e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005442:	d820      	bhi.n	8005486 <_printf_float+0x186>
 8005444:	3901      	subs	r1, #1
 8005446:	465a      	mov	r2, fp
 8005448:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800544c:	9109      	str	r1, [sp, #36]	; 0x24
 800544e:	f7ff ff19 	bl	8005284 <__exponent>
 8005452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005454:	1813      	adds	r3, r2, r0
 8005456:	2a01      	cmp	r2, #1
 8005458:	4681      	mov	r9, r0
 800545a:	6123      	str	r3, [r4, #16]
 800545c:	dc02      	bgt.n	8005464 <_printf_float+0x164>
 800545e:	6822      	ldr	r2, [r4, #0]
 8005460:	07d2      	lsls	r2, r2, #31
 8005462:	d501      	bpl.n	8005468 <_printf_float+0x168>
 8005464:	3301      	adds	r3, #1
 8005466:	6123      	str	r3, [r4, #16]
 8005468:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800546c:	2b00      	cmp	r3, #0
 800546e:	d09c      	beq.n	80053aa <_printf_float+0xaa>
 8005470:	232d      	movs	r3, #45	; 0x2d
 8005472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005476:	e798      	b.n	80053aa <_printf_float+0xaa>
 8005478:	9a06      	ldr	r2, [sp, #24]
 800547a:	2a47      	cmp	r2, #71	; 0x47
 800547c:	d1be      	bne.n	80053fc <_printf_float+0xfc>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1bc      	bne.n	80053fc <_printf_float+0xfc>
 8005482:	2301      	movs	r3, #1
 8005484:	e7b9      	b.n	80053fa <_printf_float+0xfa>
 8005486:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800548a:	d118      	bne.n	80054be <_printf_float+0x1be>
 800548c:	2900      	cmp	r1, #0
 800548e:	6863      	ldr	r3, [r4, #4]
 8005490:	dd0b      	ble.n	80054aa <_printf_float+0x1aa>
 8005492:	6121      	str	r1, [r4, #16]
 8005494:	b913      	cbnz	r3, 800549c <_printf_float+0x19c>
 8005496:	6822      	ldr	r2, [r4, #0]
 8005498:	07d0      	lsls	r0, r2, #31
 800549a:	d502      	bpl.n	80054a2 <_printf_float+0x1a2>
 800549c:	3301      	adds	r3, #1
 800549e:	440b      	add	r3, r1
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80054a4:	f04f 0900 	mov.w	r9, #0
 80054a8:	e7de      	b.n	8005468 <_printf_float+0x168>
 80054aa:	b913      	cbnz	r3, 80054b2 <_printf_float+0x1b2>
 80054ac:	6822      	ldr	r2, [r4, #0]
 80054ae:	07d2      	lsls	r2, r2, #31
 80054b0:	d501      	bpl.n	80054b6 <_printf_float+0x1b6>
 80054b2:	3302      	adds	r3, #2
 80054b4:	e7f4      	b.n	80054a0 <_printf_float+0x1a0>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e7f2      	b.n	80054a0 <_printf_float+0x1a0>
 80054ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80054be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c0:	4299      	cmp	r1, r3
 80054c2:	db05      	blt.n	80054d0 <_printf_float+0x1d0>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	6121      	str	r1, [r4, #16]
 80054c8:	07d8      	lsls	r0, r3, #31
 80054ca:	d5ea      	bpl.n	80054a2 <_printf_float+0x1a2>
 80054cc:	1c4b      	adds	r3, r1, #1
 80054ce:	e7e7      	b.n	80054a0 <_printf_float+0x1a0>
 80054d0:	2900      	cmp	r1, #0
 80054d2:	bfd4      	ite	le
 80054d4:	f1c1 0202 	rsble	r2, r1, #2
 80054d8:	2201      	movgt	r2, #1
 80054da:	4413      	add	r3, r2
 80054dc:	e7e0      	b.n	80054a0 <_printf_float+0x1a0>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	055a      	lsls	r2, r3, #21
 80054e2:	d407      	bmi.n	80054f4 <_printf_float+0x1f4>
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	4642      	mov	r2, r8
 80054e8:	4631      	mov	r1, r6
 80054ea:	4628      	mov	r0, r5
 80054ec:	47b8      	blx	r7
 80054ee:	3001      	adds	r0, #1
 80054f0:	d12c      	bne.n	800554c <_printf_float+0x24c>
 80054f2:	e764      	b.n	80053be <_printf_float+0xbe>
 80054f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054f8:	f240 80e0 	bls.w	80056bc <_printf_float+0x3bc>
 80054fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005500:	2200      	movs	r2, #0
 8005502:	2300      	movs	r3, #0
 8005504:	f7fb fae8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005508:	2800      	cmp	r0, #0
 800550a:	d034      	beq.n	8005576 <_printf_float+0x276>
 800550c:	4a37      	ldr	r2, [pc, #220]	; (80055ec <_printf_float+0x2ec>)
 800550e:	2301      	movs	r3, #1
 8005510:	4631      	mov	r1, r6
 8005512:	4628      	mov	r0, r5
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	f43f af51 	beq.w	80053be <_printf_float+0xbe>
 800551c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005520:	429a      	cmp	r2, r3
 8005522:	db02      	blt.n	800552a <_printf_float+0x22a>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	07d8      	lsls	r0, r3, #31
 8005528:	d510      	bpl.n	800554c <_printf_float+0x24c>
 800552a:	ee18 3a10 	vmov	r3, s16
 800552e:	4652      	mov	r2, sl
 8005530:	4631      	mov	r1, r6
 8005532:	4628      	mov	r0, r5
 8005534:	47b8      	blx	r7
 8005536:	3001      	adds	r0, #1
 8005538:	f43f af41 	beq.w	80053be <_printf_float+0xbe>
 800553c:	f04f 0800 	mov.w	r8, #0
 8005540:	f104 091a 	add.w	r9, r4, #26
 8005544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005546:	3b01      	subs	r3, #1
 8005548:	4543      	cmp	r3, r8
 800554a:	dc09      	bgt.n	8005560 <_printf_float+0x260>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	079b      	lsls	r3, r3, #30
 8005550:	f100 8107 	bmi.w	8005762 <_printf_float+0x462>
 8005554:	68e0      	ldr	r0, [r4, #12]
 8005556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005558:	4298      	cmp	r0, r3
 800555a:	bfb8      	it	lt
 800555c:	4618      	movlt	r0, r3
 800555e:	e730      	b.n	80053c2 <_printf_float+0xc2>
 8005560:	2301      	movs	r3, #1
 8005562:	464a      	mov	r2, r9
 8005564:	4631      	mov	r1, r6
 8005566:	4628      	mov	r0, r5
 8005568:	47b8      	blx	r7
 800556a:	3001      	adds	r0, #1
 800556c:	f43f af27 	beq.w	80053be <_printf_float+0xbe>
 8005570:	f108 0801 	add.w	r8, r8, #1
 8005574:	e7e6      	b.n	8005544 <_printf_float+0x244>
 8005576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	dc39      	bgt.n	80055f0 <_printf_float+0x2f0>
 800557c:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <_printf_float+0x2ec>)
 800557e:	2301      	movs	r3, #1
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	f43f af19 	beq.w	80053be <_printf_float+0xbe>
 800558c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005590:	4313      	orrs	r3, r2
 8005592:	d102      	bne.n	800559a <_printf_float+0x29a>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	07d9      	lsls	r1, r3, #31
 8005598:	d5d8      	bpl.n	800554c <_printf_float+0x24c>
 800559a:	ee18 3a10 	vmov	r3, s16
 800559e:	4652      	mov	r2, sl
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b8      	blx	r7
 80055a6:	3001      	adds	r0, #1
 80055a8:	f43f af09 	beq.w	80053be <_printf_float+0xbe>
 80055ac:	f04f 0900 	mov.w	r9, #0
 80055b0:	f104 0a1a 	add.w	sl, r4, #26
 80055b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b6:	425b      	negs	r3, r3
 80055b8:	454b      	cmp	r3, r9
 80055ba:	dc01      	bgt.n	80055c0 <_printf_float+0x2c0>
 80055bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055be:	e792      	b.n	80054e6 <_printf_float+0x1e6>
 80055c0:	2301      	movs	r3, #1
 80055c2:	4652      	mov	r2, sl
 80055c4:	4631      	mov	r1, r6
 80055c6:	4628      	mov	r0, r5
 80055c8:	47b8      	blx	r7
 80055ca:	3001      	adds	r0, #1
 80055cc:	f43f aef7 	beq.w	80053be <_printf_float+0xbe>
 80055d0:	f109 0901 	add.w	r9, r9, #1
 80055d4:	e7ee      	b.n	80055b4 <_printf_float+0x2b4>
 80055d6:	bf00      	nop
 80055d8:	7fefffff 	.word	0x7fefffff
 80055dc:	08007f38 	.word	0x08007f38
 80055e0:	08007f3c 	.word	0x08007f3c
 80055e4:	08007f40 	.word	0x08007f40
 80055e8:	08007f44 	.word	0x08007f44
 80055ec:	08007f48 	.word	0x08007f48
 80055f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055f4:	429a      	cmp	r2, r3
 80055f6:	bfa8      	it	ge
 80055f8:	461a      	movge	r2, r3
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	4691      	mov	r9, r2
 80055fe:	dc37      	bgt.n	8005670 <_printf_float+0x370>
 8005600:	f04f 0b00 	mov.w	fp, #0
 8005604:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005608:	f104 021a 	add.w	r2, r4, #26
 800560c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800560e:	9305      	str	r3, [sp, #20]
 8005610:	eba3 0309 	sub.w	r3, r3, r9
 8005614:	455b      	cmp	r3, fp
 8005616:	dc33      	bgt.n	8005680 <_printf_float+0x380>
 8005618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800561c:	429a      	cmp	r2, r3
 800561e:	db3b      	blt.n	8005698 <_printf_float+0x398>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	07da      	lsls	r2, r3, #31
 8005624:	d438      	bmi.n	8005698 <_printf_float+0x398>
 8005626:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800562a:	eba2 0903 	sub.w	r9, r2, r3
 800562e:	9b05      	ldr	r3, [sp, #20]
 8005630:	1ad2      	subs	r2, r2, r3
 8005632:	4591      	cmp	r9, r2
 8005634:	bfa8      	it	ge
 8005636:	4691      	movge	r9, r2
 8005638:	f1b9 0f00 	cmp.w	r9, #0
 800563c:	dc35      	bgt.n	80056aa <_printf_float+0x3aa>
 800563e:	f04f 0800 	mov.w	r8, #0
 8005642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005646:	f104 0a1a 	add.w	sl, r4, #26
 800564a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	eba3 0309 	sub.w	r3, r3, r9
 8005654:	4543      	cmp	r3, r8
 8005656:	f77f af79 	ble.w	800554c <_printf_float+0x24c>
 800565a:	2301      	movs	r3, #1
 800565c:	4652      	mov	r2, sl
 800565e:	4631      	mov	r1, r6
 8005660:	4628      	mov	r0, r5
 8005662:	47b8      	blx	r7
 8005664:	3001      	adds	r0, #1
 8005666:	f43f aeaa 	beq.w	80053be <_printf_float+0xbe>
 800566a:	f108 0801 	add.w	r8, r8, #1
 800566e:	e7ec      	b.n	800564a <_printf_float+0x34a>
 8005670:	4613      	mov	r3, r2
 8005672:	4631      	mov	r1, r6
 8005674:	4642      	mov	r2, r8
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	d1c0      	bne.n	8005600 <_printf_float+0x300>
 800567e:	e69e      	b.n	80053be <_printf_float+0xbe>
 8005680:	2301      	movs	r3, #1
 8005682:	4631      	mov	r1, r6
 8005684:	4628      	mov	r0, r5
 8005686:	9205      	str	r2, [sp, #20]
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	f43f ae97 	beq.w	80053be <_printf_float+0xbe>
 8005690:	9a05      	ldr	r2, [sp, #20]
 8005692:	f10b 0b01 	add.w	fp, fp, #1
 8005696:	e7b9      	b.n	800560c <_printf_float+0x30c>
 8005698:	ee18 3a10 	vmov	r3, s16
 800569c:	4652      	mov	r2, sl
 800569e:	4631      	mov	r1, r6
 80056a0:	4628      	mov	r0, r5
 80056a2:	47b8      	blx	r7
 80056a4:	3001      	adds	r0, #1
 80056a6:	d1be      	bne.n	8005626 <_printf_float+0x326>
 80056a8:	e689      	b.n	80053be <_printf_float+0xbe>
 80056aa:	9a05      	ldr	r2, [sp, #20]
 80056ac:	464b      	mov	r3, r9
 80056ae:	4442      	add	r2, r8
 80056b0:	4631      	mov	r1, r6
 80056b2:	4628      	mov	r0, r5
 80056b4:	47b8      	blx	r7
 80056b6:	3001      	adds	r0, #1
 80056b8:	d1c1      	bne.n	800563e <_printf_float+0x33e>
 80056ba:	e680      	b.n	80053be <_printf_float+0xbe>
 80056bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056be:	2a01      	cmp	r2, #1
 80056c0:	dc01      	bgt.n	80056c6 <_printf_float+0x3c6>
 80056c2:	07db      	lsls	r3, r3, #31
 80056c4:	d53a      	bpl.n	800573c <_printf_float+0x43c>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4642      	mov	r2, r8
 80056ca:	4631      	mov	r1, r6
 80056cc:	4628      	mov	r0, r5
 80056ce:	47b8      	blx	r7
 80056d0:	3001      	adds	r0, #1
 80056d2:	f43f ae74 	beq.w	80053be <_printf_float+0xbe>
 80056d6:	ee18 3a10 	vmov	r3, s16
 80056da:	4652      	mov	r2, sl
 80056dc:	4631      	mov	r1, r6
 80056de:	4628      	mov	r0, r5
 80056e0:	47b8      	blx	r7
 80056e2:	3001      	adds	r0, #1
 80056e4:	f43f ae6b 	beq.w	80053be <_printf_float+0xbe>
 80056e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056ec:	2200      	movs	r2, #0
 80056ee:	2300      	movs	r3, #0
 80056f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80056f4:	f7fb f9f0 	bl	8000ad8 <__aeabi_dcmpeq>
 80056f8:	b9d8      	cbnz	r0, 8005732 <_printf_float+0x432>
 80056fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80056fe:	f108 0201 	add.w	r2, r8, #1
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	d10e      	bne.n	800572a <_printf_float+0x42a>
 800570c:	e657      	b.n	80053be <_printf_float+0xbe>
 800570e:	2301      	movs	r3, #1
 8005710:	4652      	mov	r2, sl
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	f43f ae50 	beq.w	80053be <_printf_float+0xbe>
 800571e:	f108 0801 	add.w	r8, r8, #1
 8005722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005724:	3b01      	subs	r3, #1
 8005726:	4543      	cmp	r3, r8
 8005728:	dcf1      	bgt.n	800570e <_printf_float+0x40e>
 800572a:	464b      	mov	r3, r9
 800572c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005730:	e6da      	b.n	80054e8 <_printf_float+0x1e8>
 8005732:	f04f 0800 	mov.w	r8, #0
 8005736:	f104 0a1a 	add.w	sl, r4, #26
 800573a:	e7f2      	b.n	8005722 <_printf_float+0x422>
 800573c:	2301      	movs	r3, #1
 800573e:	4642      	mov	r2, r8
 8005740:	e7df      	b.n	8005702 <_printf_float+0x402>
 8005742:	2301      	movs	r3, #1
 8005744:	464a      	mov	r2, r9
 8005746:	4631      	mov	r1, r6
 8005748:	4628      	mov	r0, r5
 800574a:	47b8      	blx	r7
 800574c:	3001      	adds	r0, #1
 800574e:	f43f ae36 	beq.w	80053be <_printf_float+0xbe>
 8005752:	f108 0801 	add.w	r8, r8, #1
 8005756:	68e3      	ldr	r3, [r4, #12]
 8005758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800575a:	1a5b      	subs	r3, r3, r1
 800575c:	4543      	cmp	r3, r8
 800575e:	dcf0      	bgt.n	8005742 <_printf_float+0x442>
 8005760:	e6f8      	b.n	8005554 <_printf_float+0x254>
 8005762:	f04f 0800 	mov.w	r8, #0
 8005766:	f104 0919 	add.w	r9, r4, #25
 800576a:	e7f4      	b.n	8005756 <_printf_float+0x456>

0800576c <_printf_common>:
 800576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	4616      	mov	r6, r2
 8005772:	4699      	mov	r9, r3
 8005774:	688a      	ldr	r2, [r1, #8]
 8005776:	690b      	ldr	r3, [r1, #16]
 8005778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800577c:	4293      	cmp	r3, r2
 800577e:	bfb8      	it	lt
 8005780:	4613      	movlt	r3, r2
 8005782:	6033      	str	r3, [r6, #0]
 8005784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005788:	4607      	mov	r7, r0
 800578a:	460c      	mov	r4, r1
 800578c:	b10a      	cbz	r2, 8005792 <_printf_common+0x26>
 800578e:	3301      	adds	r3, #1
 8005790:	6033      	str	r3, [r6, #0]
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	0699      	lsls	r1, r3, #26
 8005796:	bf42      	ittt	mi
 8005798:	6833      	ldrmi	r3, [r6, #0]
 800579a:	3302      	addmi	r3, #2
 800579c:	6033      	strmi	r3, [r6, #0]
 800579e:	6825      	ldr	r5, [r4, #0]
 80057a0:	f015 0506 	ands.w	r5, r5, #6
 80057a4:	d106      	bne.n	80057b4 <_printf_common+0x48>
 80057a6:	f104 0a19 	add.w	sl, r4, #25
 80057aa:	68e3      	ldr	r3, [r4, #12]
 80057ac:	6832      	ldr	r2, [r6, #0]
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	42ab      	cmp	r3, r5
 80057b2:	dc26      	bgt.n	8005802 <_printf_common+0x96>
 80057b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057b8:	1e13      	subs	r3, r2, #0
 80057ba:	6822      	ldr	r2, [r4, #0]
 80057bc:	bf18      	it	ne
 80057be:	2301      	movne	r3, #1
 80057c0:	0692      	lsls	r2, r2, #26
 80057c2:	d42b      	bmi.n	800581c <_printf_common+0xb0>
 80057c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057c8:	4649      	mov	r1, r9
 80057ca:	4638      	mov	r0, r7
 80057cc:	47c0      	blx	r8
 80057ce:	3001      	adds	r0, #1
 80057d0:	d01e      	beq.n	8005810 <_printf_common+0xa4>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	6922      	ldr	r2, [r4, #16]
 80057d6:	f003 0306 	and.w	r3, r3, #6
 80057da:	2b04      	cmp	r3, #4
 80057dc:	bf02      	ittt	eq
 80057de:	68e5      	ldreq	r5, [r4, #12]
 80057e0:	6833      	ldreq	r3, [r6, #0]
 80057e2:	1aed      	subeq	r5, r5, r3
 80057e4:	68a3      	ldr	r3, [r4, #8]
 80057e6:	bf0c      	ite	eq
 80057e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057ec:	2500      	movne	r5, #0
 80057ee:	4293      	cmp	r3, r2
 80057f0:	bfc4      	itt	gt
 80057f2:	1a9b      	subgt	r3, r3, r2
 80057f4:	18ed      	addgt	r5, r5, r3
 80057f6:	2600      	movs	r6, #0
 80057f8:	341a      	adds	r4, #26
 80057fa:	42b5      	cmp	r5, r6
 80057fc:	d11a      	bne.n	8005834 <_printf_common+0xc8>
 80057fe:	2000      	movs	r0, #0
 8005800:	e008      	b.n	8005814 <_printf_common+0xa8>
 8005802:	2301      	movs	r3, #1
 8005804:	4652      	mov	r2, sl
 8005806:	4649      	mov	r1, r9
 8005808:	4638      	mov	r0, r7
 800580a:	47c0      	blx	r8
 800580c:	3001      	adds	r0, #1
 800580e:	d103      	bne.n	8005818 <_printf_common+0xac>
 8005810:	f04f 30ff 	mov.w	r0, #4294967295
 8005814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005818:	3501      	adds	r5, #1
 800581a:	e7c6      	b.n	80057aa <_printf_common+0x3e>
 800581c:	18e1      	adds	r1, r4, r3
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	2030      	movs	r0, #48	; 0x30
 8005822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005826:	4422      	add	r2, r4
 8005828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800582c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005830:	3302      	adds	r3, #2
 8005832:	e7c7      	b.n	80057c4 <_printf_common+0x58>
 8005834:	2301      	movs	r3, #1
 8005836:	4622      	mov	r2, r4
 8005838:	4649      	mov	r1, r9
 800583a:	4638      	mov	r0, r7
 800583c:	47c0      	blx	r8
 800583e:	3001      	adds	r0, #1
 8005840:	d0e6      	beq.n	8005810 <_printf_common+0xa4>
 8005842:	3601      	adds	r6, #1
 8005844:	e7d9      	b.n	80057fa <_printf_common+0x8e>
	...

08005848 <_printf_i>:
 8005848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	7e0f      	ldrb	r7, [r1, #24]
 800584e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005850:	2f78      	cmp	r7, #120	; 0x78
 8005852:	4691      	mov	r9, r2
 8005854:	4680      	mov	r8, r0
 8005856:	460c      	mov	r4, r1
 8005858:	469a      	mov	sl, r3
 800585a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800585e:	d807      	bhi.n	8005870 <_printf_i+0x28>
 8005860:	2f62      	cmp	r7, #98	; 0x62
 8005862:	d80a      	bhi.n	800587a <_printf_i+0x32>
 8005864:	2f00      	cmp	r7, #0
 8005866:	f000 80d4 	beq.w	8005a12 <_printf_i+0x1ca>
 800586a:	2f58      	cmp	r7, #88	; 0x58
 800586c:	f000 80c0 	beq.w	80059f0 <_printf_i+0x1a8>
 8005870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005878:	e03a      	b.n	80058f0 <_printf_i+0xa8>
 800587a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800587e:	2b15      	cmp	r3, #21
 8005880:	d8f6      	bhi.n	8005870 <_printf_i+0x28>
 8005882:	a101      	add	r1, pc, #4	; (adr r1, 8005888 <_printf_i+0x40>)
 8005884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005888:	080058e1 	.word	0x080058e1
 800588c:	080058f5 	.word	0x080058f5
 8005890:	08005871 	.word	0x08005871
 8005894:	08005871 	.word	0x08005871
 8005898:	08005871 	.word	0x08005871
 800589c:	08005871 	.word	0x08005871
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	08005871 	.word	0x08005871
 80058a8:	08005871 	.word	0x08005871
 80058ac:	08005871 	.word	0x08005871
 80058b0:	08005871 	.word	0x08005871
 80058b4:	080059f9 	.word	0x080059f9
 80058b8:	08005921 	.word	0x08005921
 80058bc:	080059b3 	.word	0x080059b3
 80058c0:	08005871 	.word	0x08005871
 80058c4:	08005871 	.word	0x08005871
 80058c8:	08005a1b 	.word	0x08005a1b
 80058cc:	08005871 	.word	0x08005871
 80058d0:	08005921 	.word	0x08005921
 80058d4:	08005871 	.word	0x08005871
 80058d8:	08005871 	.word	0x08005871
 80058dc:	080059bb 	.word	0x080059bb
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	1d1a      	adds	r2, r3, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	602a      	str	r2, [r5, #0]
 80058e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058f0:	2301      	movs	r3, #1
 80058f2:	e09f      	b.n	8005a34 <_printf_i+0x1ec>
 80058f4:	6820      	ldr	r0, [r4, #0]
 80058f6:	682b      	ldr	r3, [r5, #0]
 80058f8:	0607      	lsls	r7, r0, #24
 80058fa:	f103 0104 	add.w	r1, r3, #4
 80058fe:	6029      	str	r1, [r5, #0]
 8005900:	d501      	bpl.n	8005906 <_printf_i+0xbe>
 8005902:	681e      	ldr	r6, [r3, #0]
 8005904:	e003      	b.n	800590e <_printf_i+0xc6>
 8005906:	0646      	lsls	r6, r0, #25
 8005908:	d5fb      	bpl.n	8005902 <_printf_i+0xba>
 800590a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800590e:	2e00      	cmp	r6, #0
 8005910:	da03      	bge.n	800591a <_printf_i+0xd2>
 8005912:	232d      	movs	r3, #45	; 0x2d
 8005914:	4276      	negs	r6, r6
 8005916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800591a:	485a      	ldr	r0, [pc, #360]	; (8005a84 <_printf_i+0x23c>)
 800591c:	230a      	movs	r3, #10
 800591e:	e012      	b.n	8005946 <_printf_i+0xfe>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	6820      	ldr	r0, [r4, #0]
 8005924:	1d19      	adds	r1, r3, #4
 8005926:	6029      	str	r1, [r5, #0]
 8005928:	0605      	lsls	r5, r0, #24
 800592a:	d501      	bpl.n	8005930 <_printf_i+0xe8>
 800592c:	681e      	ldr	r6, [r3, #0]
 800592e:	e002      	b.n	8005936 <_printf_i+0xee>
 8005930:	0641      	lsls	r1, r0, #25
 8005932:	d5fb      	bpl.n	800592c <_printf_i+0xe4>
 8005934:	881e      	ldrh	r6, [r3, #0]
 8005936:	4853      	ldr	r0, [pc, #332]	; (8005a84 <_printf_i+0x23c>)
 8005938:	2f6f      	cmp	r7, #111	; 0x6f
 800593a:	bf0c      	ite	eq
 800593c:	2308      	moveq	r3, #8
 800593e:	230a      	movne	r3, #10
 8005940:	2100      	movs	r1, #0
 8005942:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005946:	6865      	ldr	r5, [r4, #4]
 8005948:	60a5      	str	r5, [r4, #8]
 800594a:	2d00      	cmp	r5, #0
 800594c:	bfa2      	ittt	ge
 800594e:	6821      	ldrge	r1, [r4, #0]
 8005950:	f021 0104 	bicge.w	r1, r1, #4
 8005954:	6021      	strge	r1, [r4, #0]
 8005956:	b90e      	cbnz	r6, 800595c <_printf_i+0x114>
 8005958:	2d00      	cmp	r5, #0
 800595a:	d04b      	beq.n	80059f4 <_printf_i+0x1ac>
 800595c:	4615      	mov	r5, r2
 800595e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005962:	fb03 6711 	mls	r7, r3, r1, r6
 8005966:	5dc7      	ldrb	r7, [r0, r7]
 8005968:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800596c:	4637      	mov	r7, r6
 800596e:	42bb      	cmp	r3, r7
 8005970:	460e      	mov	r6, r1
 8005972:	d9f4      	bls.n	800595e <_printf_i+0x116>
 8005974:	2b08      	cmp	r3, #8
 8005976:	d10b      	bne.n	8005990 <_printf_i+0x148>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	07de      	lsls	r6, r3, #31
 800597c:	d508      	bpl.n	8005990 <_printf_i+0x148>
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	6861      	ldr	r1, [r4, #4]
 8005982:	4299      	cmp	r1, r3
 8005984:	bfde      	ittt	le
 8005986:	2330      	movle	r3, #48	; 0x30
 8005988:	f805 3c01 	strble.w	r3, [r5, #-1]
 800598c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005990:	1b52      	subs	r2, r2, r5
 8005992:	6122      	str	r2, [r4, #16]
 8005994:	f8cd a000 	str.w	sl, [sp]
 8005998:	464b      	mov	r3, r9
 800599a:	aa03      	add	r2, sp, #12
 800599c:	4621      	mov	r1, r4
 800599e:	4640      	mov	r0, r8
 80059a0:	f7ff fee4 	bl	800576c <_printf_common>
 80059a4:	3001      	adds	r0, #1
 80059a6:	d14a      	bne.n	8005a3e <_printf_i+0x1f6>
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	b004      	add	sp, #16
 80059ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	f043 0320 	orr.w	r3, r3, #32
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	4833      	ldr	r0, [pc, #204]	; (8005a88 <_printf_i+0x240>)
 80059bc:	2778      	movs	r7, #120	; 0x78
 80059be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	6829      	ldr	r1, [r5, #0]
 80059c6:	061f      	lsls	r7, r3, #24
 80059c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80059cc:	d402      	bmi.n	80059d4 <_printf_i+0x18c>
 80059ce:	065f      	lsls	r7, r3, #25
 80059d0:	bf48      	it	mi
 80059d2:	b2b6      	uxthmi	r6, r6
 80059d4:	07df      	lsls	r7, r3, #31
 80059d6:	bf48      	it	mi
 80059d8:	f043 0320 	orrmi.w	r3, r3, #32
 80059dc:	6029      	str	r1, [r5, #0]
 80059de:	bf48      	it	mi
 80059e0:	6023      	strmi	r3, [r4, #0]
 80059e2:	b91e      	cbnz	r6, 80059ec <_printf_i+0x1a4>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	f023 0320 	bic.w	r3, r3, #32
 80059ea:	6023      	str	r3, [r4, #0]
 80059ec:	2310      	movs	r3, #16
 80059ee:	e7a7      	b.n	8005940 <_printf_i+0xf8>
 80059f0:	4824      	ldr	r0, [pc, #144]	; (8005a84 <_printf_i+0x23c>)
 80059f2:	e7e4      	b.n	80059be <_printf_i+0x176>
 80059f4:	4615      	mov	r5, r2
 80059f6:	e7bd      	b.n	8005974 <_printf_i+0x12c>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	6826      	ldr	r6, [r4, #0]
 80059fc:	6961      	ldr	r1, [r4, #20]
 80059fe:	1d18      	adds	r0, r3, #4
 8005a00:	6028      	str	r0, [r5, #0]
 8005a02:	0635      	lsls	r5, r6, #24
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	d501      	bpl.n	8005a0c <_printf_i+0x1c4>
 8005a08:	6019      	str	r1, [r3, #0]
 8005a0a:	e002      	b.n	8005a12 <_printf_i+0x1ca>
 8005a0c:	0670      	lsls	r0, r6, #25
 8005a0e:	d5fb      	bpl.n	8005a08 <_printf_i+0x1c0>
 8005a10:	8019      	strh	r1, [r3, #0]
 8005a12:	2300      	movs	r3, #0
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	4615      	mov	r5, r2
 8005a18:	e7bc      	b.n	8005994 <_printf_i+0x14c>
 8005a1a:	682b      	ldr	r3, [r5, #0]
 8005a1c:	1d1a      	adds	r2, r3, #4
 8005a1e:	602a      	str	r2, [r5, #0]
 8005a20:	681d      	ldr	r5, [r3, #0]
 8005a22:	6862      	ldr	r2, [r4, #4]
 8005a24:	2100      	movs	r1, #0
 8005a26:	4628      	mov	r0, r5
 8005a28:	f7fa fbda 	bl	80001e0 <memchr>
 8005a2c:	b108      	cbz	r0, 8005a32 <_printf_i+0x1ea>
 8005a2e:	1b40      	subs	r0, r0, r5
 8005a30:	6060      	str	r0, [r4, #4]
 8005a32:	6863      	ldr	r3, [r4, #4]
 8005a34:	6123      	str	r3, [r4, #16]
 8005a36:	2300      	movs	r3, #0
 8005a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a3c:	e7aa      	b.n	8005994 <_printf_i+0x14c>
 8005a3e:	6923      	ldr	r3, [r4, #16]
 8005a40:	462a      	mov	r2, r5
 8005a42:	4649      	mov	r1, r9
 8005a44:	4640      	mov	r0, r8
 8005a46:	47d0      	blx	sl
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d0ad      	beq.n	80059a8 <_printf_i+0x160>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	079b      	lsls	r3, r3, #30
 8005a50:	d413      	bmi.n	8005a7a <_printf_i+0x232>
 8005a52:	68e0      	ldr	r0, [r4, #12]
 8005a54:	9b03      	ldr	r3, [sp, #12]
 8005a56:	4298      	cmp	r0, r3
 8005a58:	bfb8      	it	lt
 8005a5a:	4618      	movlt	r0, r3
 8005a5c:	e7a6      	b.n	80059ac <_printf_i+0x164>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4632      	mov	r2, r6
 8005a62:	4649      	mov	r1, r9
 8005a64:	4640      	mov	r0, r8
 8005a66:	47d0      	blx	sl
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d09d      	beq.n	80059a8 <_printf_i+0x160>
 8005a6c:	3501      	adds	r5, #1
 8005a6e:	68e3      	ldr	r3, [r4, #12]
 8005a70:	9903      	ldr	r1, [sp, #12]
 8005a72:	1a5b      	subs	r3, r3, r1
 8005a74:	42ab      	cmp	r3, r5
 8005a76:	dcf2      	bgt.n	8005a5e <_printf_i+0x216>
 8005a78:	e7eb      	b.n	8005a52 <_printf_i+0x20a>
 8005a7a:	2500      	movs	r5, #0
 8005a7c:	f104 0619 	add.w	r6, r4, #25
 8005a80:	e7f5      	b.n	8005a6e <_printf_i+0x226>
 8005a82:	bf00      	nop
 8005a84:	08007f4a 	.word	0x08007f4a
 8005a88:	08007f5b 	.word	0x08007f5b

08005a8c <std>:
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	b510      	push	{r4, lr}
 8005a90:	4604      	mov	r4, r0
 8005a92:	e9c0 3300 	strd	r3, r3, [r0]
 8005a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a9a:	6083      	str	r3, [r0, #8]
 8005a9c:	8181      	strh	r1, [r0, #12]
 8005a9e:	6643      	str	r3, [r0, #100]	; 0x64
 8005aa0:	81c2      	strh	r2, [r0, #14]
 8005aa2:	6183      	str	r3, [r0, #24]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	2208      	movs	r2, #8
 8005aa8:	305c      	adds	r0, #92	; 0x5c
 8005aaa:	f000 f914 	bl	8005cd6 <memset>
 8005aae:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <std+0x58>)
 8005ab0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <std+0x5c>)
 8005ab4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <std+0x60>)
 8005ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005aba:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <std+0x64>)
 8005abc:	6323      	str	r3, [r4, #48]	; 0x30
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <std+0x68>)
 8005ac0:	6224      	str	r4, [r4, #32]
 8005ac2:	429c      	cmp	r4, r3
 8005ac4:	d006      	beq.n	8005ad4 <std+0x48>
 8005ac6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005aca:	4294      	cmp	r4, r2
 8005acc:	d002      	beq.n	8005ad4 <std+0x48>
 8005ace:	33d0      	adds	r3, #208	; 0xd0
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	d105      	bne.n	8005ae0 <std+0x54>
 8005ad4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005adc:	f000 b986 	b.w	8005dec <__retarget_lock_init_recursive>
 8005ae0:	bd10      	pop	{r4, pc}
 8005ae2:	bf00      	nop
 8005ae4:	08005c51 	.word	0x08005c51
 8005ae8:	08005c73 	.word	0x08005c73
 8005aec:	08005cab 	.word	0x08005cab
 8005af0:	08005ccf 	.word	0x08005ccf
 8005af4:	20000368 	.word	0x20000368

08005af8 <stdio_exit_handler>:
 8005af8:	4a02      	ldr	r2, [pc, #8]	; (8005b04 <stdio_exit_handler+0xc>)
 8005afa:	4903      	ldr	r1, [pc, #12]	; (8005b08 <stdio_exit_handler+0x10>)
 8005afc:	4803      	ldr	r0, [pc, #12]	; (8005b0c <stdio_exit_handler+0x14>)
 8005afe:	f000 b869 	b.w	8005bd4 <_fwalk_sglue>
 8005b02:	bf00      	nop
 8005b04:	20000028 	.word	0x20000028
 8005b08:	080077a1 	.word	0x080077a1
 8005b0c:	20000034 	.word	0x20000034

08005b10 <cleanup_stdio>:
 8005b10:	6841      	ldr	r1, [r0, #4]
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <cleanup_stdio+0x34>)
 8005b14:	4299      	cmp	r1, r3
 8005b16:	b510      	push	{r4, lr}
 8005b18:	4604      	mov	r4, r0
 8005b1a:	d001      	beq.n	8005b20 <cleanup_stdio+0x10>
 8005b1c:	f001 fe40 	bl	80077a0 <_fflush_r>
 8005b20:	68a1      	ldr	r1, [r4, #8]
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <cleanup_stdio+0x38>)
 8005b24:	4299      	cmp	r1, r3
 8005b26:	d002      	beq.n	8005b2e <cleanup_stdio+0x1e>
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f001 fe39 	bl	80077a0 <_fflush_r>
 8005b2e:	68e1      	ldr	r1, [r4, #12]
 8005b30:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <cleanup_stdio+0x3c>)
 8005b32:	4299      	cmp	r1, r3
 8005b34:	d004      	beq.n	8005b40 <cleanup_stdio+0x30>
 8005b36:	4620      	mov	r0, r4
 8005b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b3c:	f001 be30 	b.w	80077a0 <_fflush_r>
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	bf00      	nop
 8005b44:	20000368 	.word	0x20000368
 8005b48:	200003d0 	.word	0x200003d0
 8005b4c:	20000438 	.word	0x20000438

08005b50 <global_stdio_init.part.0>:
 8005b50:	b510      	push	{r4, lr}
 8005b52:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <global_stdio_init.part.0+0x30>)
 8005b54:	4c0b      	ldr	r4, [pc, #44]	; (8005b84 <global_stdio_init.part.0+0x34>)
 8005b56:	4a0c      	ldr	r2, [pc, #48]	; (8005b88 <global_stdio_init.part.0+0x38>)
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2104      	movs	r1, #4
 8005b60:	f7ff ff94 	bl	8005a8c <std>
 8005b64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b68:	2201      	movs	r2, #1
 8005b6a:	2109      	movs	r1, #9
 8005b6c:	f7ff ff8e 	bl	8005a8c <std>
 8005b70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b74:	2202      	movs	r2, #2
 8005b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b7a:	2112      	movs	r1, #18
 8005b7c:	f7ff bf86 	b.w	8005a8c <std>
 8005b80:	200004a0 	.word	0x200004a0
 8005b84:	20000368 	.word	0x20000368
 8005b88:	08005af9 	.word	0x08005af9

08005b8c <__sfp_lock_acquire>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__sfp_lock_acquire+0x8>)
 8005b8e:	f000 b92e 	b.w	8005dee <__retarget_lock_acquire_recursive>
 8005b92:	bf00      	nop
 8005b94:	200004a9 	.word	0x200004a9

08005b98 <__sfp_lock_release>:
 8005b98:	4801      	ldr	r0, [pc, #4]	; (8005ba0 <__sfp_lock_release+0x8>)
 8005b9a:	f000 b929 	b.w	8005df0 <__retarget_lock_release_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	200004a9 	.word	0x200004a9

08005ba4 <__sinit>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	f7ff fff0 	bl	8005b8c <__sfp_lock_acquire>
 8005bac:	6a23      	ldr	r3, [r4, #32]
 8005bae:	b11b      	cbz	r3, 8005bb8 <__sinit+0x14>
 8005bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb4:	f7ff bff0 	b.w	8005b98 <__sfp_lock_release>
 8005bb8:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <__sinit+0x28>)
 8005bba:	6223      	str	r3, [r4, #32]
 8005bbc:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <__sinit+0x2c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f5      	bne.n	8005bb0 <__sinit+0xc>
 8005bc4:	f7ff ffc4 	bl	8005b50 <global_stdio_init.part.0>
 8005bc8:	e7f2      	b.n	8005bb0 <__sinit+0xc>
 8005bca:	bf00      	nop
 8005bcc:	08005b11 	.word	0x08005b11
 8005bd0:	200004a0 	.word	0x200004a0

08005bd4 <_fwalk_sglue>:
 8005bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd8:	4607      	mov	r7, r0
 8005bda:	4688      	mov	r8, r1
 8005bdc:	4614      	mov	r4, r2
 8005bde:	2600      	movs	r6, #0
 8005be0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005be4:	f1b9 0901 	subs.w	r9, r9, #1
 8005be8:	d505      	bpl.n	8005bf6 <_fwalk_sglue+0x22>
 8005bea:	6824      	ldr	r4, [r4, #0]
 8005bec:	2c00      	cmp	r4, #0
 8005bee:	d1f7      	bne.n	8005be0 <_fwalk_sglue+0xc>
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bf6:	89ab      	ldrh	r3, [r5, #12]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d907      	bls.n	8005c0c <_fwalk_sglue+0x38>
 8005bfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c00:	3301      	adds	r3, #1
 8005c02:	d003      	beq.n	8005c0c <_fwalk_sglue+0x38>
 8005c04:	4629      	mov	r1, r5
 8005c06:	4638      	mov	r0, r7
 8005c08:	47c0      	blx	r8
 8005c0a:	4306      	orrs	r6, r0
 8005c0c:	3568      	adds	r5, #104	; 0x68
 8005c0e:	e7e9      	b.n	8005be4 <_fwalk_sglue+0x10>

08005c10 <siprintf>:
 8005c10:	b40e      	push	{r1, r2, r3}
 8005c12:	b500      	push	{lr}
 8005c14:	b09c      	sub	sp, #112	; 0x70
 8005c16:	ab1d      	add	r3, sp, #116	; 0x74
 8005c18:	9002      	str	r0, [sp, #8]
 8005c1a:	9006      	str	r0, [sp, #24]
 8005c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c20:	4809      	ldr	r0, [pc, #36]	; (8005c48 <siprintf+0x38>)
 8005c22:	9107      	str	r1, [sp, #28]
 8005c24:	9104      	str	r1, [sp, #16]
 8005c26:	4909      	ldr	r1, [pc, #36]	; (8005c4c <siprintf+0x3c>)
 8005c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c2c:	9105      	str	r1, [sp, #20]
 8005c2e:	6800      	ldr	r0, [r0, #0]
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	a902      	add	r1, sp, #8
 8005c34:	f001 fc30 	bl	8007498 <_svfiprintf_r>
 8005c38:	9b02      	ldr	r3, [sp, #8]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	b01c      	add	sp, #112	; 0x70
 8005c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c44:	b003      	add	sp, #12
 8005c46:	4770      	bx	lr
 8005c48:	20000080 	.word	0x20000080
 8005c4c:	ffff0208 	.word	0xffff0208

08005c50 <__sread>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	460c      	mov	r4, r1
 8005c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c58:	f000 f87a 	bl	8005d50 <_read_r>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	bfab      	itete	ge
 8005c60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c62:	89a3      	ldrhlt	r3, [r4, #12]
 8005c64:	181b      	addge	r3, r3, r0
 8005c66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c6a:	bfac      	ite	ge
 8005c6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c6e:	81a3      	strhlt	r3, [r4, #12]
 8005c70:	bd10      	pop	{r4, pc}

08005c72 <__swrite>:
 8005c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c76:	461f      	mov	r7, r3
 8005c78:	898b      	ldrh	r3, [r1, #12]
 8005c7a:	05db      	lsls	r3, r3, #23
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	4616      	mov	r6, r2
 8005c82:	d505      	bpl.n	8005c90 <__swrite+0x1e>
 8005c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c88:	2302      	movs	r3, #2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f000 f84e 	bl	8005d2c <_lseek_r>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	f000 b865 	b.w	8005d74 <_write_r>

08005caa <__sseek>:
 8005caa:	b510      	push	{r4, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb2:	f000 f83b 	bl	8005d2c <_lseek_r>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	bf15      	itete	ne
 8005cbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cc6:	81a3      	strheq	r3, [r4, #12]
 8005cc8:	bf18      	it	ne
 8005cca:	81a3      	strhne	r3, [r4, #12]
 8005ccc:	bd10      	pop	{r4, pc}

08005cce <__sclose>:
 8005cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd2:	f000 b81b 	b.w	8005d0c <_close_r>

08005cd6 <memset>:
 8005cd6:	4402      	add	r2, r0
 8005cd8:	4603      	mov	r3, r0
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d100      	bne.n	8005ce0 <memset+0xa>
 8005cde:	4770      	bx	lr
 8005ce0:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce4:	e7f9      	b.n	8005cda <memset+0x4>

08005ce6 <strcat>:
 8005ce6:	b510      	push	{r4, lr}
 8005ce8:	4602      	mov	r2, r0
 8005cea:	7814      	ldrb	r4, [r2, #0]
 8005cec:	4613      	mov	r3, r2
 8005cee:	3201      	adds	r2, #1
 8005cf0:	2c00      	cmp	r4, #0
 8005cf2:	d1fa      	bne.n	8005cea <strcat+0x4>
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cfe:	2a00      	cmp	r2, #0
 8005d00:	d1f9      	bne.n	8005cf6 <strcat+0x10>
 8005d02:	bd10      	pop	{r4, pc}

08005d04 <_localeconv_r>:
 8005d04:	4800      	ldr	r0, [pc, #0]	; (8005d08 <_localeconv_r+0x4>)
 8005d06:	4770      	bx	lr
 8005d08:	20000174 	.word	0x20000174

08005d0c <_close_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d06      	ldr	r5, [pc, #24]	; (8005d28 <_close_r+0x1c>)
 8005d10:	2300      	movs	r3, #0
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	f7fc fc0f 	bl	800253a <_close>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_close_r+0x1a>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_close_r+0x1a>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200004a4 	.word	0x200004a4

08005d2c <_lseek_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d07      	ldr	r5, [pc, #28]	; (8005d4c <_lseek_r+0x20>)
 8005d30:	4604      	mov	r4, r0
 8005d32:	4608      	mov	r0, r1
 8005d34:	4611      	mov	r1, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	602a      	str	r2, [r5, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f7fc fc24 	bl	8002588 <_lseek>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_lseek_r+0x1e>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_lseek_r+0x1e>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	200004a4 	.word	0x200004a4

08005d50 <_read_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d07      	ldr	r5, [pc, #28]	; (8005d70 <_read_r+0x20>)
 8005d54:	4604      	mov	r4, r0
 8005d56:	4608      	mov	r0, r1
 8005d58:	4611      	mov	r1, r2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	602a      	str	r2, [r5, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f7fc fbb2 	bl	80024c8 <_read>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_read_r+0x1e>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_read_r+0x1e>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	200004a4 	.word	0x200004a4

08005d74 <_write_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d07      	ldr	r5, [pc, #28]	; (8005d94 <_write_r+0x20>)
 8005d78:	4604      	mov	r4, r0
 8005d7a:	4608      	mov	r0, r1
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	2200      	movs	r2, #0
 8005d80:	602a      	str	r2, [r5, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	f7fc fbbd 	bl	8002502 <_write>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_write_r+0x1e>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_write_r+0x1e>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	200004a4 	.word	0x200004a4

08005d98 <__errno>:
 8005d98:	4b01      	ldr	r3, [pc, #4]	; (8005da0 <__errno+0x8>)
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20000080 	.word	0x20000080

08005da4 <__libc_init_array>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	4d0d      	ldr	r5, [pc, #52]	; (8005ddc <__libc_init_array+0x38>)
 8005da8:	4c0d      	ldr	r4, [pc, #52]	; (8005de0 <__libc_init_array+0x3c>)
 8005daa:	1b64      	subs	r4, r4, r5
 8005dac:	10a4      	asrs	r4, r4, #2
 8005dae:	2600      	movs	r6, #0
 8005db0:	42a6      	cmp	r6, r4
 8005db2:	d109      	bne.n	8005dc8 <__libc_init_array+0x24>
 8005db4:	4d0b      	ldr	r5, [pc, #44]	; (8005de4 <__libc_init_array+0x40>)
 8005db6:	4c0c      	ldr	r4, [pc, #48]	; (8005de8 <__libc_init_array+0x44>)
 8005db8:	f002 f896 	bl	8007ee8 <_init>
 8005dbc:	1b64      	subs	r4, r4, r5
 8005dbe:	10a4      	asrs	r4, r4, #2
 8005dc0:	2600      	movs	r6, #0
 8005dc2:	42a6      	cmp	r6, r4
 8005dc4:	d105      	bne.n	8005dd2 <__libc_init_array+0x2e>
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dcc:	4798      	blx	r3
 8005dce:	3601      	adds	r6, #1
 8005dd0:	e7ee      	b.n	8005db0 <__libc_init_array+0xc>
 8005dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd6:	4798      	blx	r3
 8005dd8:	3601      	adds	r6, #1
 8005dda:	e7f2      	b.n	8005dc2 <__libc_init_array+0x1e>
 8005ddc:	080082b4 	.word	0x080082b4
 8005de0:	080082b4 	.word	0x080082b4
 8005de4:	080082b4 	.word	0x080082b4
 8005de8:	080082b8 	.word	0x080082b8

08005dec <__retarget_lock_init_recursive>:
 8005dec:	4770      	bx	lr

08005dee <__retarget_lock_acquire_recursive>:
 8005dee:	4770      	bx	lr

08005df0 <__retarget_lock_release_recursive>:
 8005df0:	4770      	bx	lr

08005df2 <quorem>:
 8005df2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df6:	6903      	ldr	r3, [r0, #16]
 8005df8:	690c      	ldr	r4, [r1, #16]
 8005dfa:	42a3      	cmp	r3, r4
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	db7e      	blt.n	8005efe <quorem+0x10c>
 8005e00:	3c01      	subs	r4, #1
 8005e02:	f101 0814 	add.w	r8, r1, #20
 8005e06:	f100 0514 	add.w	r5, r0, #20
 8005e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e0e:	9301      	str	r3, [sp, #4]
 8005e10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e24:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e28:	d331      	bcc.n	8005e8e <quorem+0x9c>
 8005e2a:	f04f 0e00 	mov.w	lr, #0
 8005e2e:	4640      	mov	r0, r8
 8005e30:	46ac      	mov	ip, r5
 8005e32:	46f2      	mov	sl, lr
 8005e34:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e38:	b293      	uxth	r3, r2
 8005e3a:	fb06 e303 	mla	r3, r6, r3, lr
 8005e3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e42:	0c1a      	lsrs	r2, r3, #16
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	ebaa 0303 	sub.w	r3, sl, r3
 8005e4a:	f8dc a000 	ldr.w	sl, [ip]
 8005e4e:	fa13 f38a 	uxtah	r3, r3, sl
 8005e52:	fb06 220e 	mla	r2, r6, lr, r2
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	9b00      	ldr	r3, [sp, #0]
 8005e5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e5e:	b292      	uxth	r2, r2
 8005e60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e68:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e6c:	4581      	cmp	r9, r0
 8005e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e72:	f84c 3b04 	str.w	r3, [ip], #4
 8005e76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e7a:	d2db      	bcs.n	8005e34 <quorem+0x42>
 8005e7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e80:	b92b      	cbnz	r3, 8005e8e <quorem+0x9c>
 8005e82:	9b01      	ldr	r3, [sp, #4]
 8005e84:	3b04      	subs	r3, #4
 8005e86:	429d      	cmp	r5, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	d32c      	bcc.n	8005ee6 <quorem+0xf4>
 8005e8c:	613c      	str	r4, [r7, #16]
 8005e8e:	4638      	mov	r0, r7
 8005e90:	f001 f9a8 	bl	80071e4 <__mcmp>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	db22      	blt.n	8005ede <quorem+0xec>
 8005e98:	3601      	adds	r6, #1
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ea2:	f8d1 c000 	ldr.w	ip, [r1]
 8005ea6:	b293      	uxth	r3, r2
 8005ea8:	1ac3      	subs	r3, r0, r3
 8005eaa:	0c12      	lsrs	r2, r2, #16
 8005eac:	fa13 f38c 	uxtah	r3, r3, ip
 8005eb0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005eb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ebe:	45c1      	cmp	r9, r8
 8005ec0:	f841 3b04 	str.w	r3, [r1], #4
 8005ec4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ec8:	d2e9      	bcs.n	8005e9e <quorem+0xac>
 8005eca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ece:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ed2:	b922      	cbnz	r2, 8005ede <quorem+0xec>
 8005ed4:	3b04      	subs	r3, #4
 8005ed6:	429d      	cmp	r5, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	d30a      	bcc.n	8005ef2 <quorem+0x100>
 8005edc:	613c      	str	r4, [r7, #16]
 8005ede:	4630      	mov	r0, r6
 8005ee0:	b003      	add	sp, #12
 8005ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee6:	6812      	ldr	r2, [r2, #0]
 8005ee8:	3b04      	subs	r3, #4
 8005eea:	2a00      	cmp	r2, #0
 8005eec:	d1ce      	bne.n	8005e8c <quorem+0x9a>
 8005eee:	3c01      	subs	r4, #1
 8005ef0:	e7c9      	b.n	8005e86 <quorem+0x94>
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	3b04      	subs	r3, #4
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	d1f0      	bne.n	8005edc <quorem+0xea>
 8005efa:	3c01      	subs	r4, #1
 8005efc:	e7eb      	b.n	8005ed6 <quorem+0xe4>
 8005efe:	2000      	movs	r0, #0
 8005f00:	e7ee      	b.n	8005ee0 <quorem+0xee>
 8005f02:	0000      	movs	r0, r0
 8005f04:	0000      	movs	r0, r0
	...

08005f08 <_dtoa_r>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	ed2d 8b04 	vpush	{d8-d9}
 8005f10:	69c5      	ldr	r5, [r0, #28]
 8005f12:	b093      	sub	sp, #76	; 0x4c
 8005f14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f18:	ec57 6b10 	vmov	r6, r7, d0
 8005f1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f20:	9107      	str	r1, [sp, #28]
 8005f22:	4604      	mov	r4, r0
 8005f24:	920a      	str	r2, [sp, #40]	; 0x28
 8005f26:	930d      	str	r3, [sp, #52]	; 0x34
 8005f28:	b975      	cbnz	r5, 8005f48 <_dtoa_r+0x40>
 8005f2a:	2010      	movs	r0, #16
 8005f2c:	f000 fe2a 	bl	8006b84 <malloc>
 8005f30:	4602      	mov	r2, r0
 8005f32:	61e0      	str	r0, [r4, #28]
 8005f34:	b920      	cbnz	r0, 8005f40 <_dtoa_r+0x38>
 8005f36:	4bae      	ldr	r3, [pc, #696]	; (80061f0 <_dtoa_r+0x2e8>)
 8005f38:	21ef      	movs	r1, #239	; 0xef
 8005f3a:	48ae      	ldr	r0, [pc, #696]	; (80061f4 <_dtoa_r+0x2ec>)
 8005f3c:	f001 fc90 	bl	8007860 <__assert_func>
 8005f40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f44:	6005      	str	r5, [r0, #0]
 8005f46:	60c5      	str	r5, [r0, #12]
 8005f48:	69e3      	ldr	r3, [r4, #28]
 8005f4a:	6819      	ldr	r1, [r3, #0]
 8005f4c:	b151      	cbz	r1, 8005f64 <_dtoa_r+0x5c>
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	604a      	str	r2, [r1, #4]
 8005f52:	2301      	movs	r3, #1
 8005f54:	4093      	lsls	r3, r2
 8005f56:	608b      	str	r3, [r1, #8]
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f000 ff07 	bl	8006d6c <_Bfree>
 8005f5e:	69e3      	ldr	r3, [r4, #28]
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	1e3b      	subs	r3, r7, #0
 8005f66:	bfbb      	ittet	lt
 8005f68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f6c:	9303      	strlt	r3, [sp, #12]
 8005f6e:	2300      	movge	r3, #0
 8005f70:	2201      	movlt	r2, #1
 8005f72:	bfac      	ite	ge
 8005f74:	f8c8 3000 	strge.w	r3, [r8]
 8005f78:	f8c8 2000 	strlt.w	r2, [r8]
 8005f7c:	4b9e      	ldr	r3, [pc, #632]	; (80061f8 <_dtoa_r+0x2f0>)
 8005f7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f82:	ea33 0308 	bics.w	r3, r3, r8
 8005f86:	d11b      	bne.n	8005fc0 <_dtoa_r+0xb8>
 8005f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005f94:	4333      	orrs	r3, r6
 8005f96:	f000 8593 	beq.w	8006ac0 <_dtoa_r+0xbb8>
 8005f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f9c:	b963      	cbnz	r3, 8005fb8 <_dtoa_r+0xb0>
 8005f9e:	4b97      	ldr	r3, [pc, #604]	; (80061fc <_dtoa_r+0x2f4>)
 8005fa0:	e027      	b.n	8005ff2 <_dtoa_r+0xea>
 8005fa2:	4b97      	ldr	r3, [pc, #604]	; (8006200 <_dtoa_r+0x2f8>)
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	9800      	ldr	r0, [sp, #0]
 8005fae:	b013      	add	sp, #76	; 0x4c
 8005fb0:	ecbd 8b04 	vpop	{d8-d9}
 8005fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb8:	4b90      	ldr	r3, [pc, #576]	; (80061fc <_dtoa_r+0x2f4>)
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	3303      	adds	r3, #3
 8005fbe:	e7f3      	b.n	8005fa8 <_dtoa_r+0xa0>
 8005fc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	ec51 0b17 	vmov	r0, r1, d7
 8005fca:	eeb0 8a47 	vmov.f32	s16, s14
 8005fce:	eef0 8a67 	vmov.f32	s17, s15
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f7fa fd80 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fd8:	4681      	mov	r9, r0
 8005fda:	b160      	cbz	r0, 8005ff6 <_dtoa_r+0xee>
 8005fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fde:	2301      	movs	r3, #1
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8568 	beq.w	8006aba <_dtoa_r+0xbb2>
 8005fea:	4b86      	ldr	r3, [pc, #536]	; (8006204 <_dtoa_r+0x2fc>)
 8005fec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	e7da      	b.n	8005fac <_dtoa_r+0xa4>
 8005ff6:	aa10      	add	r2, sp, #64	; 0x40
 8005ff8:	a911      	add	r1, sp, #68	; 0x44
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	eeb0 0a48 	vmov.f32	s0, s16
 8006000:	eef0 0a68 	vmov.f32	s1, s17
 8006004:	f001 f994 	bl	8007330 <__d2b>
 8006008:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800600c:	4682      	mov	sl, r0
 800600e:	2d00      	cmp	r5, #0
 8006010:	d07f      	beq.n	8006112 <_dtoa_r+0x20a>
 8006012:	ee18 3a90 	vmov	r3, s17
 8006016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800601a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800601e:	ec51 0b18 	vmov	r0, r1, d8
 8006022:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800602a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800602e:	4619      	mov	r1, r3
 8006030:	2200      	movs	r2, #0
 8006032:	4b75      	ldr	r3, [pc, #468]	; (8006208 <_dtoa_r+0x300>)
 8006034:	f7fa f930 	bl	8000298 <__aeabi_dsub>
 8006038:	a367      	add	r3, pc, #412	; (adr r3, 80061d8 <_dtoa_r+0x2d0>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa fae3 	bl	8000608 <__aeabi_dmul>
 8006042:	a367      	add	r3, pc, #412	; (adr r3, 80061e0 <_dtoa_r+0x2d8>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa f928 	bl	800029c <__adddf3>
 800604c:	4606      	mov	r6, r0
 800604e:	4628      	mov	r0, r5
 8006050:	460f      	mov	r7, r1
 8006052:	f7fa fa6f 	bl	8000534 <__aeabi_i2d>
 8006056:	a364      	add	r3, pc, #400	; (adr r3, 80061e8 <_dtoa_r+0x2e0>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f7fa fad4 	bl	8000608 <__aeabi_dmul>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4630      	mov	r0, r6
 8006066:	4639      	mov	r1, r7
 8006068:	f7fa f918 	bl	800029c <__adddf3>
 800606c:	4606      	mov	r6, r0
 800606e:	460f      	mov	r7, r1
 8006070:	f7fa fd7a 	bl	8000b68 <__aeabi_d2iz>
 8006074:	2200      	movs	r2, #0
 8006076:	4683      	mov	fp, r0
 8006078:	2300      	movs	r3, #0
 800607a:	4630      	mov	r0, r6
 800607c:	4639      	mov	r1, r7
 800607e:	f7fa fd35 	bl	8000aec <__aeabi_dcmplt>
 8006082:	b148      	cbz	r0, 8006098 <_dtoa_r+0x190>
 8006084:	4658      	mov	r0, fp
 8006086:	f7fa fa55 	bl	8000534 <__aeabi_i2d>
 800608a:	4632      	mov	r2, r6
 800608c:	463b      	mov	r3, r7
 800608e:	f7fa fd23 	bl	8000ad8 <__aeabi_dcmpeq>
 8006092:	b908      	cbnz	r0, 8006098 <_dtoa_r+0x190>
 8006094:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006098:	f1bb 0f16 	cmp.w	fp, #22
 800609c:	d857      	bhi.n	800614e <_dtoa_r+0x246>
 800609e:	4b5b      	ldr	r3, [pc, #364]	; (800620c <_dtoa_r+0x304>)
 80060a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	ec51 0b18 	vmov	r0, r1, d8
 80060ac:	f7fa fd1e 	bl	8000aec <__aeabi_dcmplt>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d04e      	beq.n	8006152 <_dtoa_r+0x24a>
 80060b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060b8:	2300      	movs	r3, #0
 80060ba:	930c      	str	r3, [sp, #48]	; 0x30
 80060bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060be:	1b5b      	subs	r3, r3, r5
 80060c0:	1e5a      	subs	r2, r3, #1
 80060c2:	bf45      	ittet	mi
 80060c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80060c8:	9305      	strmi	r3, [sp, #20]
 80060ca:	2300      	movpl	r3, #0
 80060cc:	2300      	movmi	r3, #0
 80060ce:	9206      	str	r2, [sp, #24]
 80060d0:	bf54      	ite	pl
 80060d2:	9305      	strpl	r3, [sp, #20]
 80060d4:	9306      	strmi	r3, [sp, #24]
 80060d6:	f1bb 0f00 	cmp.w	fp, #0
 80060da:	db3c      	blt.n	8006156 <_dtoa_r+0x24e>
 80060dc:	9b06      	ldr	r3, [sp, #24]
 80060de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80060e2:	445b      	add	r3, fp
 80060e4:	9306      	str	r3, [sp, #24]
 80060e6:	2300      	movs	r3, #0
 80060e8:	9308      	str	r3, [sp, #32]
 80060ea:	9b07      	ldr	r3, [sp, #28]
 80060ec:	2b09      	cmp	r3, #9
 80060ee:	d868      	bhi.n	80061c2 <_dtoa_r+0x2ba>
 80060f0:	2b05      	cmp	r3, #5
 80060f2:	bfc4      	itt	gt
 80060f4:	3b04      	subgt	r3, #4
 80060f6:	9307      	strgt	r3, [sp, #28]
 80060f8:	9b07      	ldr	r3, [sp, #28]
 80060fa:	f1a3 0302 	sub.w	r3, r3, #2
 80060fe:	bfcc      	ite	gt
 8006100:	2500      	movgt	r5, #0
 8006102:	2501      	movle	r5, #1
 8006104:	2b03      	cmp	r3, #3
 8006106:	f200 8085 	bhi.w	8006214 <_dtoa_r+0x30c>
 800610a:	e8df f003 	tbb	[pc, r3]
 800610e:	3b2e      	.short	0x3b2e
 8006110:	5839      	.short	0x5839
 8006112:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006116:	441d      	add	r5, r3
 8006118:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800611c:	2b20      	cmp	r3, #32
 800611e:	bfc1      	itttt	gt
 8006120:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006124:	fa08 f803 	lslgt.w	r8, r8, r3
 8006128:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800612c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006130:	bfd6      	itet	le
 8006132:	f1c3 0320 	rsble	r3, r3, #32
 8006136:	ea48 0003 	orrgt.w	r0, r8, r3
 800613a:	fa06 f003 	lslle.w	r0, r6, r3
 800613e:	f7fa f9e9 	bl	8000514 <__aeabi_ui2d>
 8006142:	2201      	movs	r2, #1
 8006144:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006148:	3d01      	subs	r5, #1
 800614a:	920e      	str	r2, [sp, #56]	; 0x38
 800614c:	e76f      	b.n	800602e <_dtoa_r+0x126>
 800614e:	2301      	movs	r3, #1
 8006150:	e7b3      	b.n	80060ba <_dtoa_r+0x1b2>
 8006152:	900c      	str	r0, [sp, #48]	; 0x30
 8006154:	e7b2      	b.n	80060bc <_dtoa_r+0x1b4>
 8006156:	9b05      	ldr	r3, [sp, #20]
 8006158:	eba3 030b 	sub.w	r3, r3, fp
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	f1cb 0300 	rsb	r3, fp, #0
 8006162:	9308      	str	r3, [sp, #32]
 8006164:	2300      	movs	r3, #0
 8006166:	930b      	str	r3, [sp, #44]	; 0x2c
 8006168:	e7bf      	b.n	80060ea <_dtoa_r+0x1e2>
 800616a:	2300      	movs	r3, #0
 800616c:	9309      	str	r3, [sp, #36]	; 0x24
 800616e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	dc52      	bgt.n	800621a <_dtoa_r+0x312>
 8006174:	2301      	movs	r3, #1
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	9304      	str	r3, [sp, #16]
 800617a:	461a      	mov	r2, r3
 800617c:	920a      	str	r2, [sp, #40]	; 0x28
 800617e:	e00b      	b.n	8006198 <_dtoa_r+0x290>
 8006180:	2301      	movs	r3, #1
 8006182:	e7f3      	b.n	800616c <_dtoa_r+0x264>
 8006184:	2300      	movs	r3, #0
 8006186:	9309      	str	r3, [sp, #36]	; 0x24
 8006188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800618a:	445b      	add	r3, fp
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	3301      	adds	r3, #1
 8006190:	2b01      	cmp	r3, #1
 8006192:	9304      	str	r3, [sp, #16]
 8006194:	bfb8      	it	lt
 8006196:	2301      	movlt	r3, #1
 8006198:	69e0      	ldr	r0, [r4, #28]
 800619a:	2100      	movs	r1, #0
 800619c:	2204      	movs	r2, #4
 800619e:	f102 0614 	add.w	r6, r2, #20
 80061a2:	429e      	cmp	r6, r3
 80061a4:	d93d      	bls.n	8006222 <_dtoa_r+0x31a>
 80061a6:	6041      	str	r1, [r0, #4]
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fd9f 	bl	8006cec <_Balloc>
 80061ae:	9000      	str	r0, [sp, #0]
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d139      	bne.n	8006228 <_dtoa_r+0x320>
 80061b4:	4b16      	ldr	r3, [pc, #88]	; (8006210 <_dtoa_r+0x308>)
 80061b6:	4602      	mov	r2, r0
 80061b8:	f240 11af 	movw	r1, #431	; 0x1af
 80061bc:	e6bd      	b.n	8005f3a <_dtoa_r+0x32>
 80061be:	2301      	movs	r3, #1
 80061c0:	e7e1      	b.n	8006186 <_dtoa_r+0x27e>
 80061c2:	2501      	movs	r5, #1
 80061c4:	2300      	movs	r3, #0
 80061c6:	9307      	str	r3, [sp, #28]
 80061c8:	9509      	str	r5, [sp, #36]	; 0x24
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	2200      	movs	r2, #0
 80061d4:	2312      	movs	r3, #18
 80061d6:	e7d1      	b.n	800617c <_dtoa_r+0x274>
 80061d8:	636f4361 	.word	0x636f4361
 80061dc:	3fd287a7 	.word	0x3fd287a7
 80061e0:	8b60c8b3 	.word	0x8b60c8b3
 80061e4:	3fc68a28 	.word	0x3fc68a28
 80061e8:	509f79fb 	.word	0x509f79fb
 80061ec:	3fd34413 	.word	0x3fd34413
 80061f0:	08007f79 	.word	0x08007f79
 80061f4:	08007f90 	.word	0x08007f90
 80061f8:	7ff00000 	.word	0x7ff00000
 80061fc:	08007f75 	.word	0x08007f75
 8006200:	08007f6c 	.word	0x08007f6c
 8006204:	08007f49 	.word	0x08007f49
 8006208:	3ff80000 	.word	0x3ff80000
 800620c:	08008080 	.word	0x08008080
 8006210:	08007fe8 	.word	0x08007fe8
 8006214:	2301      	movs	r3, #1
 8006216:	9309      	str	r3, [sp, #36]	; 0x24
 8006218:	e7d7      	b.n	80061ca <_dtoa_r+0x2c2>
 800621a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	9304      	str	r3, [sp, #16]
 8006220:	e7ba      	b.n	8006198 <_dtoa_r+0x290>
 8006222:	3101      	adds	r1, #1
 8006224:	0052      	lsls	r2, r2, #1
 8006226:	e7ba      	b.n	800619e <_dtoa_r+0x296>
 8006228:	69e3      	ldr	r3, [r4, #28]
 800622a:	9a00      	ldr	r2, [sp, #0]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	9b04      	ldr	r3, [sp, #16]
 8006230:	2b0e      	cmp	r3, #14
 8006232:	f200 80a8 	bhi.w	8006386 <_dtoa_r+0x47e>
 8006236:	2d00      	cmp	r5, #0
 8006238:	f000 80a5 	beq.w	8006386 <_dtoa_r+0x47e>
 800623c:	f1bb 0f00 	cmp.w	fp, #0
 8006240:	dd38      	ble.n	80062b4 <_dtoa_r+0x3ac>
 8006242:	4bc0      	ldr	r3, [pc, #768]	; (8006544 <_dtoa_r+0x63c>)
 8006244:	f00b 020f 	and.w	r2, fp, #15
 8006248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800624c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006250:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006254:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006258:	d019      	beq.n	800628e <_dtoa_r+0x386>
 800625a:	4bbb      	ldr	r3, [pc, #748]	; (8006548 <_dtoa_r+0x640>)
 800625c:	ec51 0b18 	vmov	r0, r1, d8
 8006260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006264:	f7fa fafa 	bl	800085c <__aeabi_ddiv>
 8006268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800626c:	f008 080f 	and.w	r8, r8, #15
 8006270:	2503      	movs	r5, #3
 8006272:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006548 <_dtoa_r+0x640>
 8006276:	f1b8 0f00 	cmp.w	r8, #0
 800627a:	d10a      	bne.n	8006292 <_dtoa_r+0x38a>
 800627c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006280:	4632      	mov	r2, r6
 8006282:	463b      	mov	r3, r7
 8006284:	f7fa faea 	bl	800085c <__aeabi_ddiv>
 8006288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800628c:	e02b      	b.n	80062e6 <_dtoa_r+0x3de>
 800628e:	2502      	movs	r5, #2
 8006290:	e7ef      	b.n	8006272 <_dtoa_r+0x36a>
 8006292:	f018 0f01 	tst.w	r8, #1
 8006296:	d008      	beq.n	80062aa <_dtoa_r+0x3a2>
 8006298:	4630      	mov	r0, r6
 800629a:	4639      	mov	r1, r7
 800629c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80062a0:	f7fa f9b2 	bl	8000608 <__aeabi_dmul>
 80062a4:	3501      	adds	r5, #1
 80062a6:	4606      	mov	r6, r0
 80062a8:	460f      	mov	r7, r1
 80062aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80062ae:	f109 0908 	add.w	r9, r9, #8
 80062b2:	e7e0      	b.n	8006276 <_dtoa_r+0x36e>
 80062b4:	f000 809f 	beq.w	80063f6 <_dtoa_r+0x4ee>
 80062b8:	f1cb 0600 	rsb	r6, fp, #0
 80062bc:	4ba1      	ldr	r3, [pc, #644]	; (8006544 <_dtoa_r+0x63c>)
 80062be:	4fa2      	ldr	r7, [pc, #648]	; (8006548 <_dtoa_r+0x640>)
 80062c0:	f006 020f 	and.w	r2, r6, #15
 80062c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	ec51 0b18 	vmov	r0, r1, d8
 80062d0:	f7fa f99a 	bl	8000608 <__aeabi_dmul>
 80062d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d8:	1136      	asrs	r6, r6, #4
 80062da:	2300      	movs	r3, #0
 80062dc:	2502      	movs	r5, #2
 80062de:	2e00      	cmp	r6, #0
 80062e0:	d17e      	bne.n	80063e0 <_dtoa_r+0x4d8>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1d0      	bne.n	8006288 <_dtoa_r+0x380>
 80062e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8084 	beq.w	80063fa <_dtoa_r+0x4f2>
 80062f2:	4b96      	ldr	r3, [pc, #600]	; (800654c <_dtoa_r+0x644>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	4640      	mov	r0, r8
 80062f8:	4649      	mov	r1, r9
 80062fa:	f7fa fbf7 	bl	8000aec <__aeabi_dcmplt>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d07b      	beq.n	80063fa <_dtoa_r+0x4f2>
 8006302:	9b04      	ldr	r3, [sp, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d078      	beq.n	80063fa <_dtoa_r+0x4f2>
 8006308:	9b01      	ldr	r3, [sp, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	dd39      	ble.n	8006382 <_dtoa_r+0x47a>
 800630e:	4b90      	ldr	r3, [pc, #576]	; (8006550 <_dtoa_r+0x648>)
 8006310:	2200      	movs	r2, #0
 8006312:	4640      	mov	r0, r8
 8006314:	4649      	mov	r1, r9
 8006316:	f7fa f977 	bl	8000608 <__aeabi_dmul>
 800631a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800631e:	9e01      	ldr	r6, [sp, #4]
 8006320:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006324:	3501      	adds	r5, #1
 8006326:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800632a:	4628      	mov	r0, r5
 800632c:	f7fa f902 	bl	8000534 <__aeabi_i2d>
 8006330:	4642      	mov	r2, r8
 8006332:	464b      	mov	r3, r9
 8006334:	f7fa f968 	bl	8000608 <__aeabi_dmul>
 8006338:	4b86      	ldr	r3, [pc, #536]	; (8006554 <_dtoa_r+0x64c>)
 800633a:	2200      	movs	r2, #0
 800633c:	f7f9 ffae 	bl	800029c <__adddf3>
 8006340:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006348:	9303      	str	r3, [sp, #12]
 800634a:	2e00      	cmp	r6, #0
 800634c:	d158      	bne.n	8006400 <_dtoa_r+0x4f8>
 800634e:	4b82      	ldr	r3, [pc, #520]	; (8006558 <_dtoa_r+0x650>)
 8006350:	2200      	movs	r2, #0
 8006352:	4640      	mov	r0, r8
 8006354:	4649      	mov	r1, r9
 8006356:	f7f9 ff9f 	bl	8000298 <__aeabi_dsub>
 800635a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800635e:	4680      	mov	r8, r0
 8006360:	4689      	mov	r9, r1
 8006362:	f7fa fbe1 	bl	8000b28 <__aeabi_dcmpgt>
 8006366:	2800      	cmp	r0, #0
 8006368:	f040 8296 	bne.w	8006898 <_dtoa_r+0x990>
 800636c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006370:	4640      	mov	r0, r8
 8006372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006376:	4649      	mov	r1, r9
 8006378:	f7fa fbb8 	bl	8000aec <__aeabi_dcmplt>
 800637c:	2800      	cmp	r0, #0
 800637e:	f040 8289 	bne.w	8006894 <_dtoa_r+0x98c>
 8006382:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006388:	2b00      	cmp	r3, #0
 800638a:	f2c0 814e 	blt.w	800662a <_dtoa_r+0x722>
 800638e:	f1bb 0f0e 	cmp.w	fp, #14
 8006392:	f300 814a 	bgt.w	800662a <_dtoa_r+0x722>
 8006396:	4b6b      	ldr	r3, [pc, #428]	; (8006544 <_dtoa_r+0x63c>)
 8006398:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800639c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f280 80dc 	bge.w	8006560 <_dtoa_r+0x658>
 80063a8:	9b04      	ldr	r3, [sp, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f300 80d8 	bgt.w	8006560 <_dtoa_r+0x658>
 80063b0:	f040 826f 	bne.w	8006892 <_dtoa_r+0x98a>
 80063b4:	4b68      	ldr	r3, [pc, #416]	; (8006558 <_dtoa_r+0x650>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	4640      	mov	r0, r8
 80063ba:	4649      	mov	r1, r9
 80063bc:	f7fa f924 	bl	8000608 <__aeabi_dmul>
 80063c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063c4:	f7fa fba6 	bl	8000b14 <__aeabi_dcmpge>
 80063c8:	9e04      	ldr	r6, [sp, #16]
 80063ca:	4637      	mov	r7, r6
 80063cc:	2800      	cmp	r0, #0
 80063ce:	f040 8245 	bne.w	800685c <_dtoa_r+0x954>
 80063d2:	9d00      	ldr	r5, [sp, #0]
 80063d4:	2331      	movs	r3, #49	; 0x31
 80063d6:	f805 3b01 	strb.w	r3, [r5], #1
 80063da:	f10b 0b01 	add.w	fp, fp, #1
 80063de:	e241      	b.n	8006864 <_dtoa_r+0x95c>
 80063e0:	07f2      	lsls	r2, r6, #31
 80063e2:	d505      	bpl.n	80063f0 <_dtoa_r+0x4e8>
 80063e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e8:	f7fa f90e 	bl	8000608 <__aeabi_dmul>
 80063ec:	3501      	adds	r5, #1
 80063ee:	2301      	movs	r3, #1
 80063f0:	1076      	asrs	r6, r6, #1
 80063f2:	3708      	adds	r7, #8
 80063f4:	e773      	b.n	80062de <_dtoa_r+0x3d6>
 80063f6:	2502      	movs	r5, #2
 80063f8:	e775      	b.n	80062e6 <_dtoa_r+0x3de>
 80063fa:	9e04      	ldr	r6, [sp, #16]
 80063fc:	465f      	mov	r7, fp
 80063fe:	e792      	b.n	8006326 <_dtoa_r+0x41e>
 8006400:	9900      	ldr	r1, [sp, #0]
 8006402:	4b50      	ldr	r3, [pc, #320]	; (8006544 <_dtoa_r+0x63c>)
 8006404:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006408:	4431      	add	r1, r6
 800640a:	9102      	str	r1, [sp, #8]
 800640c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800640e:	eeb0 9a47 	vmov.f32	s18, s14
 8006412:	eef0 9a67 	vmov.f32	s19, s15
 8006416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800641a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800641e:	2900      	cmp	r1, #0
 8006420:	d044      	beq.n	80064ac <_dtoa_r+0x5a4>
 8006422:	494e      	ldr	r1, [pc, #312]	; (800655c <_dtoa_r+0x654>)
 8006424:	2000      	movs	r0, #0
 8006426:	f7fa fa19 	bl	800085c <__aeabi_ddiv>
 800642a:	ec53 2b19 	vmov	r2, r3, d9
 800642e:	f7f9 ff33 	bl	8000298 <__aeabi_dsub>
 8006432:	9d00      	ldr	r5, [sp, #0]
 8006434:	ec41 0b19 	vmov	d9, r0, r1
 8006438:	4649      	mov	r1, r9
 800643a:	4640      	mov	r0, r8
 800643c:	f7fa fb94 	bl	8000b68 <__aeabi_d2iz>
 8006440:	4606      	mov	r6, r0
 8006442:	f7fa f877 	bl	8000534 <__aeabi_i2d>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	4640      	mov	r0, r8
 800644c:	4649      	mov	r1, r9
 800644e:	f7f9 ff23 	bl	8000298 <__aeabi_dsub>
 8006452:	3630      	adds	r6, #48	; 0x30
 8006454:	f805 6b01 	strb.w	r6, [r5], #1
 8006458:	ec53 2b19 	vmov	r2, r3, d9
 800645c:	4680      	mov	r8, r0
 800645e:	4689      	mov	r9, r1
 8006460:	f7fa fb44 	bl	8000aec <__aeabi_dcmplt>
 8006464:	2800      	cmp	r0, #0
 8006466:	d164      	bne.n	8006532 <_dtoa_r+0x62a>
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	4937      	ldr	r1, [pc, #220]	; (800654c <_dtoa_r+0x644>)
 800646e:	2000      	movs	r0, #0
 8006470:	f7f9 ff12 	bl	8000298 <__aeabi_dsub>
 8006474:	ec53 2b19 	vmov	r2, r3, d9
 8006478:	f7fa fb38 	bl	8000aec <__aeabi_dcmplt>
 800647c:	2800      	cmp	r0, #0
 800647e:	f040 80b6 	bne.w	80065ee <_dtoa_r+0x6e6>
 8006482:	9b02      	ldr	r3, [sp, #8]
 8006484:	429d      	cmp	r5, r3
 8006486:	f43f af7c 	beq.w	8006382 <_dtoa_r+0x47a>
 800648a:	4b31      	ldr	r3, [pc, #196]	; (8006550 <_dtoa_r+0x648>)
 800648c:	ec51 0b19 	vmov	r0, r1, d9
 8006490:	2200      	movs	r2, #0
 8006492:	f7fa f8b9 	bl	8000608 <__aeabi_dmul>
 8006496:	4b2e      	ldr	r3, [pc, #184]	; (8006550 <_dtoa_r+0x648>)
 8006498:	ec41 0b19 	vmov	d9, r0, r1
 800649c:	2200      	movs	r2, #0
 800649e:	4640      	mov	r0, r8
 80064a0:	4649      	mov	r1, r9
 80064a2:	f7fa f8b1 	bl	8000608 <__aeabi_dmul>
 80064a6:	4680      	mov	r8, r0
 80064a8:	4689      	mov	r9, r1
 80064aa:	e7c5      	b.n	8006438 <_dtoa_r+0x530>
 80064ac:	ec51 0b17 	vmov	r0, r1, d7
 80064b0:	f7fa f8aa 	bl	8000608 <__aeabi_dmul>
 80064b4:	9b02      	ldr	r3, [sp, #8]
 80064b6:	9d00      	ldr	r5, [sp, #0]
 80064b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80064ba:	ec41 0b19 	vmov	d9, r0, r1
 80064be:	4649      	mov	r1, r9
 80064c0:	4640      	mov	r0, r8
 80064c2:	f7fa fb51 	bl	8000b68 <__aeabi_d2iz>
 80064c6:	4606      	mov	r6, r0
 80064c8:	f7fa f834 	bl	8000534 <__aeabi_i2d>
 80064cc:	3630      	adds	r6, #48	; 0x30
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4640      	mov	r0, r8
 80064d4:	4649      	mov	r1, r9
 80064d6:	f7f9 fedf 	bl	8000298 <__aeabi_dsub>
 80064da:	f805 6b01 	strb.w	r6, [r5], #1
 80064de:	9b02      	ldr	r3, [sp, #8]
 80064e0:	429d      	cmp	r5, r3
 80064e2:	4680      	mov	r8, r0
 80064e4:	4689      	mov	r9, r1
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	d124      	bne.n	8006536 <_dtoa_r+0x62e>
 80064ec:	4b1b      	ldr	r3, [pc, #108]	; (800655c <_dtoa_r+0x654>)
 80064ee:	ec51 0b19 	vmov	r0, r1, d9
 80064f2:	f7f9 fed3 	bl	800029c <__adddf3>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4640      	mov	r0, r8
 80064fc:	4649      	mov	r1, r9
 80064fe:	f7fa fb13 	bl	8000b28 <__aeabi_dcmpgt>
 8006502:	2800      	cmp	r0, #0
 8006504:	d173      	bne.n	80065ee <_dtoa_r+0x6e6>
 8006506:	ec53 2b19 	vmov	r2, r3, d9
 800650a:	4914      	ldr	r1, [pc, #80]	; (800655c <_dtoa_r+0x654>)
 800650c:	2000      	movs	r0, #0
 800650e:	f7f9 fec3 	bl	8000298 <__aeabi_dsub>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	f7fa fae7 	bl	8000aec <__aeabi_dcmplt>
 800651e:	2800      	cmp	r0, #0
 8006520:	f43f af2f 	beq.w	8006382 <_dtoa_r+0x47a>
 8006524:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006526:	1e6b      	subs	r3, r5, #1
 8006528:	930f      	str	r3, [sp, #60]	; 0x3c
 800652a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800652e:	2b30      	cmp	r3, #48	; 0x30
 8006530:	d0f8      	beq.n	8006524 <_dtoa_r+0x61c>
 8006532:	46bb      	mov	fp, r7
 8006534:	e04a      	b.n	80065cc <_dtoa_r+0x6c4>
 8006536:	4b06      	ldr	r3, [pc, #24]	; (8006550 <_dtoa_r+0x648>)
 8006538:	f7fa f866 	bl	8000608 <__aeabi_dmul>
 800653c:	4680      	mov	r8, r0
 800653e:	4689      	mov	r9, r1
 8006540:	e7bd      	b.n	80064be <_dtoa_r+0x5b6>
 8006542:	bf00      	nop
 8006544:	08008080 	.word	0x08008080
 8006548:	08008058 	.word	0x08008058
 800654c:	3ff00000 	.word	0x3ff00000
 8006550:	40240000 	.word	0x40240000
 8006554:	401c0000 	.word	0x401c0000
 8006558:	40140000 	.word	0x40140000
 800655c:	3fe00000 	.word	0x3fe00000
 8006560:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006564:	9d00      	ldr	r5, [sp, #0]
 8006566:	4642      	mov	r2, r8
 8006568:	464b      	mov	r3, r9
 800656a:	4630      	mov	r0, r6
 800656c:	4639      	mov	r1, r7
 800656e:	f7fa f975 	bl	800085c <__aeabi_ddiv>
 8006572:	f7fa faf9 	bl	8000b68 <__aeabi_d2iz>
 8006576:	9001      	str	r0, [sp, #4]
 8006578:	f7f9 ffdc 	bl	8000534 <__aeabi_i2d>
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	f7fa f842 	bl	8000608 <__aeabi_dmul>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4630      	mov	r0, r6
 800658a:	4639      	mov	r1, r7
 800658c:	f7f9 fe84 	bl	8000298 <__aeabi_dsub>
 8006590:	9e01      	ldr	r6, [sp, #4]
 8006592:	9f04      	ldr	r7, [sp, #16]
 8006594:	3630      	adds	r6, #48	; 0x30
 8006596:	f805 6b01 	strb.w	r6, [r5], #1
 800659a:	9e00      	ldr	r6, [sp, #0]
 800659c:	1bae      	subs	r6, r5, r6
 800659e:	42b7      	cmp	r7, r6
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	d134      	bne.n	8006610 <_dtoa_r+0x708>
 80065a6:	f7f9 fe79 	bl	800029c <__adddf3>
 80065aa:	4642      	mov	r2, r8
 80065ac:	464b      	mov	r3, r9
 80065ae:	4606      	mov	r6, r0
 80065b0:	460f      	mov	r7, r1
 80065b2:	f7fa fab9 	bl	8000b28 <__aeabi_dcmpgt>
 80065b6:	b9c8      	cbnz	r0, 80065ec <_dtoa_r+0x6e4>
 80065b8:	4642      	mov	r2, r8
 80065ba:	464b      	mov	r3, r9
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7fa fa8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80065c4:	b110      	cbz	r0, 80065cc <_dtoa_r+0x6c4>
 80065c6:	9b01      	ldr	r3, [sp, #4]
 80065c8:	07db      	lsls	r3, r3, #31
 80065ca:	d40f      	bmi.n	80065ec <_dtoa_r+0x6e4>
 80065cc:	4651      	mov	r1, sl
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 fbcc 	bl	8006d6c <_Bfree>
 80065d4:	2300      	movs	r3, #0
 80065d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065d8:	702b      	strb	r3, [r5, #0]
 80065da:	f10b 0301 	add.w	r3, fp, #1
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f43f ace2 	beq.w	8005fac <_dtoa_r+0xa4>
 80065e8:	601d      	str	r5, [r3, #0]
 80065ea:	e4df      	b.n	8005fac <_dtoa_r+0xa4>
 80065ec:	465f      	mov	r7, fp
 80065ee:	462b      	mov	r3, r5
 80065f0:	461d      	mov	r5, r3
 80065f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065f6:	2a39      	cmp	r2, #57	; 0x39
 80065f8:	d106      	bne.n	8006608 <_dtoa_r+0x700>
 80065fa:	9a00      	ldr	r2, [sp, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d1f7      	bne.n	80065f0 <_dtoa_r+0x6e8>
 8006600:	9900      	ldr	r1, [sp, #0]
 8006602:	2230      	movs	r2, #48	; 0x30
 8006604:	3701      	adds	r7, #1
 8006606:	700a      	strb	r2, [r1, #0]
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	3201      	adds	r2, #1
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e790      	b.n	8006532 <_dtoa_r+0x62a>
 8006610:	4ba3      	ldr	r3, [pc, #652]	; (80068a0 <_dtoa_r+0x998>)
 8006612:	2200      	movs	r2, #0
 8006614:	f7f9 fff8 	bl	8000608 <__aeabi_dmul>
 8006618:	2200      	movs	r2, #0
 800661a:	2300      	movs	r3, #0
 800661c:	4606      	mov	r6, r0
 800661e:	460f      	mov	r7, r1
 8006620:	f7fa fa5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006624:	2800      	cmp	r0, #0
 8006626:	d09e      	beq.n	8006566 <_dtoa_r+0x65e>
 8006628:	e7d0      	b.n	80065cc <_dtoa_r+0x6c4>
 800662a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800662c:	2a00      	cmp	r2, #0
 800662e:	f000 80ca 	beq.w	80067c6 <_dtoa_r+0x8be>
 8006632:	9a07      	ldr	r2, [sp, #28]
 8006634:	2a01      	cmp	r2, #1
 8006636:	f300 80ad 	bgt.w	8006794 <_dtoa_r+0x88c>
 800663a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800663c:	2a00      	cmp	r2, #0
 800663e:	f000 80a5 	beq.w	800678c <_dtoa_r+0x884>
 8006642:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006646:	9e08      	ldr	r6, [sp, #32]
 8006648:	9d05      	ldr	r5, [sp, #20]
 800664a:	9a05      	ldr	r2, [sp, #20]
 800664c:	441a      	add	r2, r3
 800664e:	9205      	str	r2, [sp, #20]
 8006650:	9a06      	ldr	r2, [sp, #24]
 8006652:	2101      	movs	r1, #1
 8006654:	441a      	add	r2, r3
 8006656:	4620      	mov	r0, r4
 8006658:	9206      	str	r2, [sp, #24]
 800665a:	f000 fc3d 	bl	8006ed8 <__i2b>
 800665e:	4607      	mov	r7, r0
 8006660:	b165      	cbz	r5, 800667c <_dtoa_r+0x774>
 8006662:	9b06      	ldr	r3, [sp, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	dd09      	ble.n	800667c <_dtoa_r+0x774>
 8006668:	42ab      	cmp	r3, r5
 800666a:	9a05      	ldr	r2, [sp, #20]
 800666c:	bfa8      	it	ge
 800666e:	462b      	movge	r3, r5
 8006670:	1ad2      	subs	r2, r2, r3
 8006672:	9205      	str	r2, [sp, #20]
 8006674:	9a06      	ldr	r2, [sp, #24]
 8006676:	1aed      	subs	r5, r5, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	9306      	str	r3, [sp, #24]
 800667c:	9b08      	ldr	r3, [sp, #32]
 800667e:	b1f3      	cbz	r3, 80066be <_dtoa_r+0x7b6>
 8006680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 80a3 	beq.w	80067ce <_dtoa_r+0x8c6>
 8006688:	2e00      	cmp	r6, #0
 800668a:	dd10      	ble.n	80066ae <_dtoa_r+0x7a6>
 800668c:	4639      	mov	r1, r7
 800668e:	4632      	mov	r2, r6
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fce1 	bl	8007058 <__pow5mult>
 8006696:	4652      	mov	r2, sl
 8006698:	4601      	mov	r1, r0
 800669a:	4607      	mov	r7, r0
 800669c:	4620      	mov	r0, r4
 800669e:	f000 fc31 	bl	8006f04 <__multiply>
 80066a2:	4651      	mov	r1, sl
 80066a4:	4680      	mov	r8, r0
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 fb60 	bl	8006d6c <_Bfree>
 80066ac:	46c2      	mov	sl, r8
 80066ae:	9b08      	ldr	r3, [sp, #32]
 80066b0:	1b9a      	subs	r2, r3, r6
 80066b2:	d004      	beq.n	80066be <_dtoa_r+0x7b6>
 80066b4:	4651      	mov	r1, sl
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 fcce 	bl	8007058 <__pow5mult>
 80066bc:	4682      	mov	sl, r0
 80066be:	2101      	movs	r1, #1
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 fc09 	bl	8006ed8 <__i2b>
 80066c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	4606      	mov	r6, r0
 80066cc:	f340 8081 	ble.w	80067d2 <_dtoa_r+0x8ca>
 80066d0:	461a      	mov	r2, r3
 80066d2:	4601      	mov	r1, r0
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 fcbf 	bl	8007058 <__pow5mult>
 80066da:	9b07      	ldr	r3, [sp, #28]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	4606      	mov	r6, r0
 80066e0:	dd7a      	ble.n	80067d8 <_dtoa_r+0x8d0>
 80066e2:	f04f 0800 	mov.w	r8, #0
 80066e6:	6933      	ldr	r3, [r6, #16]
 80066e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066ec:	6918      	ldr	r0, [r3, #16]
 80066ee:	f000 fba5 	bl	8006e3c <__hi0bits>
 80066f2:	f1c0 0020 	rsb	r0, r0, #32
 80066f6:	9b06      	ldr	r3, [sp, #24]
 80066f8:	4418      	add	r0, r3
 80066fa:	f010 001f 	ands.w	r0, r0, #31
 80066fe:	f000 8094 	beq.w	800682a <_dtoa_r+0x922>
 8006702:	f1c0 0320 	rsb	r3, r0, #32
 8006706:	2b04      	cmp	r3, #4
 8006708:	f340 8085 	ble.w	8006816 <_dtoa_r+0x90e>
 800670c:	9b05      	ldr	r3, [sp, #20]
 800670e:	f1c0 001c 	rsb	r0, r0, #28
 8006712:	4403      	add	r3, r0
 8006714:	9305      	str	r3, [sp, #20]
 8006716:	9b06      	ldr	r3, [sp, #24]
 8006718:	4403      	add	r3, r0
 800671a:	4405      	add	r5, r0
 800671c:	9306      	str	r3, [sp, #24]
 800671e:	9b05      	ldr	r3, [sp, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	dd05      	ble.n	8006730 <_dtoa_r+0x828>
 8006724:	4651      	mov	r1, sl
 8006726:	461a      	mov	r2, r3
 8006728:	4620      	mov	r0, r4
 800672a:	f000 fcef 	bl	800710c <__lshift>
 800672e:	4682      	mov	sl, r0
 8006730:	9b06      	ldr	r3, [sp, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	dd05      	ble.n	8006742 <_dtoa_r+0x83a>
 8006736:	4631      	mov	r1, r6
 8006738:	461a      	mov	r2, r3
 800673a:	4620      	mov	r0, r4
 800673c:	f000 fce6 	bl	800710c <__lshift>
 8006740:	4606      	mov	r6, r0
 8006742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006744:	2b00      	cmp	r3, #0
 8006746:	d072      	beq.n	800682e <_dtoa_r+0x926>
 8006748:	4631      	mov	r1, r6
 800674a:	4650      	mov	r0, sl
 800674c:	f000 fd4a 	bl	80071e4 <__mcmp>
 8006750:	2800      	cmp	r0, #0
 8006752:	da6c      	bge.n	800682e <_dtoa_r+0x926>
 8006754:	2300      	movs	r3, #0
 8006756:	4651      	mov	r1, sl
 8006758:	220a      	movs	r2, #10
 800675a:	4620      	mov	r0, r4
 800675c:	f000 fb28 	bl	8006db0 <__multadd>
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006766:	4682      	mov	sl, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 81b0 	beq.w	8006ace <_dtoa_r+0xbc6>
 800676e:	2300      	movs	r3, #0
 8006770:	4639      	mov	r1, r7
 8006772:	220a      	movs	r2, #10
 8006774:	4620      	mov	r0, r4
 8006776:	f000 fb1b 	bl	8006db0 <__multadd>
 800677a:	9b01      	ldr	r3, [sp, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	4607      	mov	r7, r0
 8006780:	f300 8096 	bgt.w	80068b0 <_dtoa_r+0x9a8>
 8006784:	9b07      	ldr	r3, [sp, #28]
 8006786:	2b02      	cmp	r3, #2
 8006788:	dc59      	bgt.n	800683e <_dtoa_r+0x936>
 800678a:	e091      	b.n	80068b0 <_dtoa_r+0x9a8>
 800678c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800678e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006792:	e758      	b.n	8006646 <_dtoa_r+0x73e>
 8006794:	9b04      	ldr	r3, [sp, #16]
 8006796:	1e5e      	subs	r6, r3, #1
 8006798:	9b08      	ldr	r3, [sp, #32]
 800679a:	42b3      	cmp	r3, r6
 800679c:	bfbf      	itttt	lt
 800679e:	9b08      	ldrlt	r3, [sp, #32]
 80067a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80067a2:	9608      	strlt	r6, [sp, #32]
 80067a4:	1af3      	sublt	r3, r6, r3
 80067a6:	bfb4      	ite	lt
 80067a8:	18d2      	addlt	r2, r2, r3
 80067aa:	1b9e      	subge	r6, r3, r6
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	bfbc      	itt	lt
 80067b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80067b2:	2600      	movlt	r6, #0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bfb7      	itett	lt
 80067b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80067bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80067c0:	1a9d      	sublt	r5, r3, r2
 80067c2:	2300      	movlt	r3, #0
 80067c4:	e741      	b.n	800664a <_dtoa_r+0x742>
 80067c6:	9e08      	ldr	r6, [sp, #32]
 80067c8:	9d05      	ldr	r5, [sp, #20]
 80067ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067cc:	e748      	b.n	8006660 <_dtoa_r+0x758>
 80067ce:	9a08      	ldr	r2, [sp, #32]
 80067d0:	e770      	b.n	80066b4 <_dtoa_r+0x7ac>
 80067d2:	9b07      	ldr	r3, [sp, #28]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	dc19      	bgt.n	800680c <_dtoa_r+0x904>
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	b9bb      	cbnz	r3, 800680c <_dtoa_r+0x904>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067e2:	b99b      	cbnz	r3, 800680c <_dtoa_r+0x904>
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067ea:	0d1b      	lsrs	r3, r3, #20
 80067ec:	051b      	lsls	r3, r3, #20
 80067ee:	b183      	cbz	r3, 8006812 <_dtoa_r+0x90a>
 80067f0:	9b05      	ldr	r3, [sp, #20]
 80067f2:	3301      	adds	r3, #1
 80067f4:	9305      	str	r3, [sp, #20]
 80067f6:	9b06      	ldr	r3, [sp, #24]
 80067f8:	3301      	adds	r3, #1
 80067fa:	9306      	str	r3, [sp, #24]
 80067fc:	f04f 0801 	mov.w	r8, #1
 8006800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006802:	2b00      	cmp	r3, #0
 8006804:	f47f af6f 	bne.w	80066e6 <_dtoa_r+0x7de>
 8006808:	2001      	movs	r0, #1
 800680a:	e774      	b.n	80066f6 <_dtoa_r+0x7ee>
 800680c:	f04f 0800 	mov.w	r8, #0
 8006810:	e7f6      	b.n	8006800 <_dtoa_r+0x8f8>
 8006812:	4698      	mov	r8, r3
 8006814:	e7f4      	b.n	8006800 <_dtoa_r+0x8f8>
 8006816:	d082      	beq.n	800671e <_dtoa_r+0x816>
 8006818:	9a05      	ldr	r2, [sp, #20]
 800681a:	331c      	adds	r3, #28
 800681c:	441a      	add	r2, r3
 800681e:	9205      	str	r2, [sp, #20]
 8006820:	9a06      	ldr	r2, [sp, #24]
 8006822:	441a      	add	r2, r3
 8006824:	441d      	add	r5, r3
 8006826:	9206      	str	r2, [sp, #24]
 8006828:	e779      	b.n	800671e <_dtoa_r+0x816>
 800682a:	4603      	mov	r3, r0
 800682c:	e7f4      	b.n	8006818 <_dtoa_r+0x910>
 800682e:	9b04      	ldr	r3, [sp, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	dc37      	bgt.n	80068a4 <_dtoa_r+0x99c>
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	2b02      	cmp	r3, #2
 8006838:	dd34      	ble.n	80068a4 <_dtoa_r+0x99c>
 800683a:	9b04      	ldr	r3, [sp, #16]
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	9b01      	ldr	r3, [sp, #4]
 8006840:	b963      	cbnz	r3, 800685c <_dtoa_r+0x954>
 8006842:	4631      	mov	r1, r6
 8006844:	2205      	movs	r2, #5
 8006846:	4620      	mov	r0, r4
 8006848:	f000 fab2 	bl	8006db0 <__multadd>
 800684c:	4601      	mov	r1, r0
 800684e:	4606      	mov	r6, r0
 8006850:	4650      	mov	r0, sl
 8006852:	f000 fcc7 	bl	80071e4 <__mcmp>
 8006856:	2800      	cmp	r0, #0
 8006858:	f73f adbb 	bgt.w	80063d2 <_dtoa_r+0x4ca>
 800685c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685e:	9d00      	ldr	r5, [sp, #0]
 8006860:	ea6f 0b03 	mvn.w	fp, r3
 8006864:	f04f 0800 	mov.w	r8, #0
 8006868:	4631      	mov	r1, r6
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fa7e 	bl	8006d6c <_Bfree>
 8006870:	2f00      	cmp	r7, #0
 8006872:	f43f aeab 	beq.w	80065cc <_dtoa_r+0x6c4>
 8006876:	f1b8 0f00 	cmp.w	r8, #0
 800687a:	d005      	beq.n	8006888 <_dtoa_r+0x980>
 800687c:	45b8      	cmp	r8, r7
 800687e:	d003      	beq.n	8006888 <_dtoa_r+0x980>
 8006880:	4641      	mov	r1, r8
 8006882:	4620      	mov	r0, r4
 8006884:	f000 fa72 	bl	8006d6c <_Bfree>
 8006888:	4639      	mov	r1, r7
 800688a:	4620      	mov	r0, r4
 800688c:	f000 fa6e 	bl	8006d6c <_Bfree>
 8006890:	e69c      	b.n	80065cc <_dtoa_r+0x6c4>
 8006892:	2600      	movs	r6, #0
 8006894:	4637      	mov	r7, r6
 8006896:	e7e1      	b.n	800685c <_dtoa_r+0x954>
 8006898:	46bb      	mov	fp, r7
 800689a:	4637      	mov	r7, r6
 800689c:	e599      	b.n	80063d2 <_dtoa_r+0x4ca>
 800689e:	bf00      	nop
 80068a0:	40240000 	.word	0x40240000
 80068a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 80c8 	beq.w	8006a3c <_dtoa_r+0xb34>
 80068ac:	9b04      	ldr	r3, [sp, #16]
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	dd05      	ble.n	80068c0 <_dtoa_r+0x9b8>
 80068b4:	4639      	mov	r1, r7
 80068b6:	462a      	mov	r2, r5
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 fc27 	bl	800710c <__lshift>
 80068be:	4607      	mov	r7, r0
 80068c0:	f1b8 0f00 	cmp.w	r8, #0
 80068c4:	d05b      	beq.n	800697e <_dtoa_r+0xa76>
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	4620      	mov	r0, r4
 80068ca:	f000 fa0f 	bl	8006cec <_Balloc>
 80068ce:	4605      	mov	r5, r0
 80068d0:	b928      	cbnz	r0, 80068de <_dtoa_r+0x9d6>
 80068d2:	4b83      	ldr	r3, [pc, #524]	; (8006ae0 <_dtoa_r+0xbd8>)
 80068d4:	4602      	mov	r2, r0
 80068d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80068da:	f7ff bb2e 	b.w	8005f3a <_dtoa_r+0x32>
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	3202      	adds	r2, #2
 80068e2:	0092      	lsls	r2, r2, #2
 80068e4:	f107 010c 	add.w	r1, r7, #12
 80068e8:	300c      	adds	r0, #12
 80068ea:	f000 ffab 	bl	8007844 <memcpy>
 80068ee:	2201      	movs	r2, #1
 80068f0:	4629      	mov	r1, r5
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 fc0a 	bl	800710c <__lshift>
 80068f8:	9b00      	ldr	r3, [sp, #0]
 80068fa:	3301      	adds	r3, #1
 80068fc:	9304      	str	r3, [sp, #16]
 80068fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006902:	4413      	add	r3, r2
 8006904:	9308      	str	r3, [sp, #32]
 8006906:	9b02      	ldr	r3, [sp, #8]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	46b8      	mov	r8, r7
 800690e:	9306      	str	r3, [sp, #24]
 8006910:	4607      	mov	r7, r0
 8006912:	9b04      	ldr	r3, [sp, #16]
 8006914:	4631      	mov	r1, r6
 8006916:	3b01      	subs	r3, #1
 8006918:	4650      	mov	r0, sl
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	f7ff fa69 	bl	8005df2 <quorem>
 8006920:	4641      	mov	r1, r8
 8006922:	9002      	str	r0, [sp, #8]
 8006924:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006928:	4650      	mov	r0, sl
 800692a:	f000 fc5b 	bl	80071e4 <__mcmp>
 800692e:	463a      	mov	r2, r7
 8006930:	9005      	str	r0, [sp, #20]
 8006932:	4631      	mov	r1, r6
 8006934:	4620      	mov	r0, r4
 8006936:	f000 fc71 	bl	800721c <__mdiff>
 800693a:	68c2      	ldr	r2, [r0, #12]
 800693c:	4605      	mov	r5, r0
 800693e:	bb02      	cbnz	r2, 8006982 <_dtoa_r+0xa7a>
 8006940:	4601      	mov	r1, r0
 8006942:	4650      	mov	r0, sl
 8006944:	f000 fc4e 	bl	80071e4 <__mcmp>
 8006948:	4602      	mov	r2, r0
 800694a:	4629      	mov	r1, r5
 800694c:	4620      	mov	r0, r4
 800694e:	9209      	str	r2, [sp, #36]	; 0x24
 8006950:	f000 fa0c 	bl	8006d6c <_Bfree>
 8006954:	9b07      	ldr	r3, [sp, #28]
 8006956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006958:	9d04      	ldr	r5, [sp, #16]
 800695a:	ea43 0102 	orr.w	r1, r3, r2
 800695e:	9b06      	ldr	r3, [sp, #24]
 8006960:	4319      	orrs	r1, r3
 8006962:	d110      	bne.n	8006986 <_dtoa_r+0xa7e>
 8006964:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006968:	d029      	beq.n	80069be <_dtoa_r+0xab6>
 800696a:	9b05      	ldr	r3, [sp, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	dd02      	ble.n	8006976 <_dtoa_r+0xa6e>
 8006970:	9b02      	ldr	r3, [sp, #8]
 8006972:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006976:	9b01      	ldr	r3, [sp, #4]
 8006978:	f883 9000 	strb.w	r9, [r3]
 800697c:	e774      	b.n	8006868 <_dtoa_r+0x960>
 800697e:	4638      	mov	r0, r7
 8006980:	e7ba      	b.n	80068f8 <_dtoa_r+0x9f0>
 8006982:	2201      	movs	r2, #1
 8006984:	e7e1      	b.n	800694a <_dtoa_r+0xa42>
 8006986:	9b05      	ldr	r3, [sp, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	db04      	blt.n	8006996 <_dtoa_r+0xa8e>
 800698c:	9907      	ldr	r1, [sp, #28]
 800698e:	430b      	orrs	r3, r1
 8006990:	9906      	ldr	r1, [sp, #24]
 8006992:	430b      	orrs	r3, r1
 8006994:	d120      	bne.n	80069d8 <_dtoa_r+0xad0>
 8006996:	2a00      	cmp	r2, #0
 8006998:	dded      	ble.n	8006976 <_dtoa_r+0xa6e>
 800699a:	4651      	mov	r1, sl
 800699c:	2201      	movs	r2, #1
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 fbb4 	bl	800710c <__lshift>
 80069a4:	4631      	mov	r1, r6
 80069a6:	4682      	mov	sl, r0
 80069a8:	f000 fc1c 	bl	80071e4 <__mcmp>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	dc03      	bgt.n	80069b8 <_dtoa_r+0xab0>
 80069b0:	d1e1      	bne.n	8006976 <_dtoa_r+0xa6e>
 80069b2:	f019 0f01 	tst.w	r9, #1
 80069b6:	d0de      	beq.n	8006976 <_dtoa_r+0xa6e>
 80069b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069bc:	d1d8      	bne.n	8006970 <_dtoa_r+0xa68>
 80069be:	9a01      	ldr	r2, [sp, #4]
 80069c0:	2339      	movs	r3, #57	; 0x39
 80069c2:	7013      	strb	r3, [r2, #0]
 80069c4:	462b      	mov	r3, r5
 80069c6:	461d      	mov	r5, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069ce:	2a39      	cmp	r2, #57	; 0x39
 80069d0:	d06c      	beq.n	8006aac <_dtoa_r+0xba4>
 80069d2:	3201      	adds	r2, #1
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	e747      	b.n	8006868 <_dtoa_r+0x960>
 80069d8:	2a00      	cmp	r2, #0
 80069da:	dd07      	ble.n	80069ec <_dtoa_r+0xae4>
 80069dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069e0:	d0ed      	beq.n	80069be <_dtoa_r+0xab6>
 80069e2:	9a01      	ldr	r2, [sp, #4]
 80069e4:	f109 0301 	add.w	r3, r9, #1
 80069e8:	7013      	strb	r3, [r2, #0]
 80069ea:	e73d      	b.n	8006868 <_dtoa_r+0x960>
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	9a08      	ldr	r2, [sp, #32]
 80069f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d043      	beq.n	8006a80 <_dtoa_r+0xb78>
 80069f8:	4651      	mov	r1, sl
 80069fa:	2300      	movs	r3, #0
 80069fc:	220a      	movs	r2, #10
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 f9d6 	bl	8006db0 <__multadd>
 8006a04:	45b8      	cmp	r8, r7
 8006a06:	4682      	mov	sl, r0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	f04f 020a 	mov.w	r2, #10
 8006a10:	4641      	mov	r1, r8
 8006a12:	4620      	mov	r0, r4
 8006a14:	d107      	bne.n	8006a26 <_dtoa_r+0xb1e>
 8006a16:	f000 f9cb 	bl	8006db0 <__multadd>
 8006a1a:	4680      	mov	r8, r0
 8006a1c:	4607      	mov	r7, r0
 8006a1e:	9b04      	ldr	r3, [sp, #16]
 8006a20:	3301      	adds	r3, #1
 8006a22:	9304      	str	r3, [sp, #16]
 8006a24:	e775      	b.n	8006912 <_dtoa_r+0xa0a>
 8006a26:	f000 f9c3 	bl	8006db0 <__multadd>
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	2300      	movs	r3, #0
 8006a30:	220a      	movs	r2, #10
 8006a32:	4620      	mov	r0, r4
 8006a34:	f000 f9bc 	bl	8006db0 <__multadd>
 8006a38:	4607      	mov	r7, r0
 8006a3a:	e7f0      	b.n	8006a1e <_dtoa_r+0xb16>
 8006a3c:	9b04      	ldr	r3, [sp, #16]
 8006a3e:	9301      	str	r3, [sp, #4]
 8006a40:	9d00      	ldr	r5, [sp, #0]
 8006a42:	4631      	mov	r1, r6
 8006a44:	4650      	mov	r0, sl
 8006a46:	f7ff f9d4 	bl	8005df2 <quorem>
 8006a4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a4e:	9b00      	ldr	r3, [sp, #0]
 8006a50:	f805 9b01 	strb.w	r9, [r5], #1
 8006a54:	1aea      	subs	r2, r5, r3
 8006a56:	9b01      	ldr	r3, [sp, #4]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	dd07      	ble.n	8006a6c <_dtoa_r+0xb64>
 8006a5c:	4651      	mov	r1, sl
 8006a5e:	2300      	movs	r3, #0
 8006a60:	220a      	movs	r2, #10
 8006a62:	4620      	mov	r0, r4
 8006a64:	f000 f9a4 	bl	8006db0 <__multadd>
 8006a68:	4682      	mov	sl, r0
 8006a6a:	e7ea      	b.n	8006a42 <_dtoa_r+0xb3a>
 8006a6c:	9b01      	ldr	r3, [sp, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bfc8      	it	gt
 8006a72:	461d      	movgt	r5, r3
 8006a74:	9b00      	ldr	r3, [sp, #0]
 8006a76:	bfd8      	it	le
 8006a78:	2501      	movle	r5, #1
 8006a7a:	441d      	add	r5, r3
 8006a7c:	f04f 0800 	mov.w	r8, #0
 8006a80:	4651      	mov	r1, sl
 8006a82:	2201      	movs	r2, #1
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 fb41 	bl	800710c <__lshift>
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	f000 fba9 	bl	80071e4 <__mcmp>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	dc96      	bgt.n	80069c4 <_dtoa_r+0xabc>
 8006a96:	d102      	bne.n	8006a9e <_dtoa_r+0xb96>
 8006a98:	f019 0f01 	tst.w	r9, #1
 8006a9c:	d192      	bne.n	80069c4 <_dtoa_r+0xabc>
 8006a9e:	462b      	mov	r3, r5
 8006aa0:	461d      	mov	r5, r3
 8006aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aa6:	2a30      	cmp	r2, #48	; 0x30
 8006aa8:	d0fa      	beq.n	8006aa0 <_dtoa_r+0xb98>
 8006aaa:	e6dd      	b.n	8006868 <_dtoa_r+0x960>
 8006aac:	9a00      	ldr	r2, [sp, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d189      	bne.n	80069c6 <_dtoa_r+0xabe>
 8006ab2:	f10b 0b01 	add.w	fp, fp, #1
 8006ab6:	2331      	movs	r3, #49	; 0x31
 8006ab8:	e796      	b.n	80069e8 <_dtoa_r+0xae0>
 8006aba:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <_dtoa_r+0xbdc>)
 8006abc:	f7ff ba99 	b.w	8005ff2 <_dtoa_r+0xea>
 8006ac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f47f aa6d 	bne.w	8005fa2 <_dtoa_r+0x9a>
 8006ac8:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <_dtoa_r+0xbe0>)
 8006aca:	f7ff ba92 	b.w	8005ff2 <_dtoa_r+0xea>
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dcb5      	bgt.n	8006a40 <_dtoa_r+0xb38>
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	f73f aeb1 	bgt.w	800683e <_dtoa_r+0x936>
 8006adc:	e7b0      	b.n	8006a40 <_dtoa_r+0xb38>
 8006ade:	bf00      	nop
 8006ae0:	08007fe8 	.word	0x08007fe8
 8006ae4:	08007f48 	.word	0x08007f48
 8006ae8:	08007f6c 	.word	0x08007f6c

08006aec <_free_r>:
 8006aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aee:	2900      	cmp	r1, #0
 8006af0:	d044      	beq.n	8006b7c <_free_r+0x90>
 8006af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af6:	9001      	str	r0, [sp, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f1a1 0404 	sub.w	r4, r1, #4
 8006afe:	bfb8      	it	lt
 8006b00:	18e4      	addlt	r4, r4, r3
 8006b02:	f000 f8e7 	bl	8006cd4 <__malloc_lock>
 8006b06:	4a1e      	ldr	r2, [pc, #120]	; (8006b80 <_free_r+0x94>)
 8006b08:	9801      	ldr	r0, [sp, #4]
 8006b0a:	6813      	ldr	r3, [r2, #0]
 8006b0c:	b933      	cbnz	r3, 8006b1c <_free_r+0x30>
 8006b0e:	6063      	str	r3, [r4, #4]
 8006b10:	6014      	str	r4, [r2, #0]
 8006b12:	b003      	add	sp, #12
 8006b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b18:	f000 b8e2 	b.w	8006ce0 <__malloc_unlock>
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	d908      	bls.n	8006b32 <_free_r+0x46>
 8006b20:	6825      	ldr	r5, [r4, #0]
 8006b22:	1961      	adds	r1, r4, r5
 8006b24:	428b      	cmp	r3, r1
 8006b26:	bf01      	itttt	eq
 8006b28:	6819      	ldreq	r1, [r3, #0]
 8006b2a:	685b      	ldreq	r3, [r3, #4]
 8006b2c:	1949      	addeq	r1, r1, r5
 8006b2e:	6021      	streq	r1, [r4, #0]
 8006b30:	e7ed      	b.n	8006b0e <_free_r+0x22>
 8006b32:	461a      	mov	r2, r3
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	b10b      	cbz	r3, 8006b3c <_free_r+0x50>
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d9fa      	bls.n	8006b32 <_free_r+0x46>
 8006b3c:	6811      	ldr	r1, [r2, #0]
 8006b3e:	1855      	adds	r5, r2, r1
 8006b40:	42a5      	cmp	r5, r4
 8006b42:	d10b      	bne.n	8006b5c <_free_r+0x70>
 8006b44:	6824      	ldr	r4, [r4, #0]
 8006b46:	4421      	add	r1, r4
 8006b48:	1854      	adds	r4, r2, r1
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	6011      	str	r1, [r2, #0]
 8006b4e:	d1e0      	bne.n	8006b12 <_free_r+0x26>
 8006b50:	681c      	ldr	r4, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	6053      	str	r3, [r2, #4]
 8006b56:	440c      	add	r4, r1
 8006b58:	6014      	str	r4, [r2, #0]
 8006b5a:	e7da      	b.n	8006b12 <_free_r+0x26>
 8006b5c:	d902      	bls.n	8006b64 <_free_r+0x78>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	6003      	str	r3, [r0, #0]
 8006b62:	e7d6      	b.n	8006b12 <_free_r+0x26>
 8006b64:	6825      	ldr	r5, [r4, #0]
 8006b66:	1961      	adds	r1, r4, r5
 8006b68:	428b      	cmp	r3, r1
 8006b6a:	bf04      	itt	eq
 8006b6c:	6819      	ldreq	r1, [r3, #0]
 8006b6e:	685b      	ldreq	r3, [r3, #4]
 8006b70:	6063      	str	r3, [r4, #4]
 8006b72:	bf04      	itt	eq
 8006b74:	1949      	addeq	r1, r1, r5
 8006b76:	6021      	streq	r1, [r4, #0]
 8006b78:	6054      	str	r4, [r2, #4]
 8006b7a:	e7ca      	b.n	8006b12 <_free_r+0x26>
 8006b7c:	b003      	add	sp, #12
 8006b7e:	bd30      	pop	{r4, r5, pc}
 8006b80:	200004ac 	.word	0x200004ac

08006b84 <malloc>:
 8006b84:	4b02      	ldr	r3, [pc, #8]	; (8006b90 <malloc+0xc>)
 8006b86:	4601      	mov	r1, r0
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	f000 b823 	b.w	8006bd4 <_malloc_r>
 8006b8e:	bf00      	nop
 8006b90:	20000080 	.word	0x20000080

08006b94 <sbrk_aligned>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4e0e      	ldr	r6, [pc, #56]	; (8006bd0 <sbrk_aligned+0x3c>)
 8006b98:	460c      	mov	r4, r1
 8006b9a:	6831      	ldr	r1, [r6, #0]
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	b911      	cbnz	r1, 8006ba6 <sbrk_aligned+0x12>
 8006ba0:	f000 fe40 	bl	8007824 <_sbrk_r>
 8006ba4:	6030      	str	r0, [r6, #0]
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f000 fe3b 	bl	8007824 <_sbrk_r>
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	d00a      	beq.n	8006bc8 <sbrk_aligned+0x34>
 8006bb2:	1cc4      	adds	r4, r0, #3
 8006bb4:	f024 0403 	bic.w	r4, r4, #3
 8006bb8:	42a0      	cmp	r0, r4
 8006bba:	d007      	beq.n	8006bcc <sbrk_aligned+0x38>
 8006bbc:	1a21      	subs	r1, r4, r0
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f000 fe30 	bl	8007824 <_sbrk_r>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d101      	bne.n	8006bcc <sbrk_aligned+0x38>
 8006bc8:	f04f 34ff 	mov.w	r4, #4294967295
 8006bcc:	4620      	mov	r0, r4
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	200004b0 	.word	0x200004b0

08006bd4 <_malloc_r>:
 8006bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd8:	1ccd      	adds	r5, r1, #3
 8006bda:	f025 0503 	bic.w	r5, r5, #3
 8006bde:	3508      	adds	r5, #8
 8006be0:	2d0c      	cmp	r5, #12
 8006be2:	bf38      	it	cc
 8006be4:	250c      	movcc	r5, #12
 8006be6:	2d00      	cmp	r5, #0
 8006be8:	4607      	mov	r7, r0
 8006bea:	db01      	blt.n	8006bf0 <_malloc_r+0x1c>
 8006bec:	42a9      	cmp	r1, r5
 8006bee:	d905      	bls.n	8006bfc <_malloc_r+0x28>
 8006bf0:	230c      	movs	r3, #12
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	2600      	movs	r6, #0
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006cd0 <_malloc_r+0xfc>
 8006c00:	f000 f868 	bl	8006cd4 <__malloc_lock>
 8006c04:	f8d8 3000 	ldr.w	r3, [r8]
 8006c08:	461c      	mov	r4, r3
 8006c0a:	bb5c      	cbnz	r4, 8006c64 <_malloc_r+0x90>
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	4638      	mov	r0, r7
 8006c10:	f7ff ffc0 	bl	8006b94 <sbrk_aligned>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	4604      	mov	r4, r0
 8006c18:	d155      	bne.n	8006cc6 <_malloc_r+0xf2>
 8006c1a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c1e:	4626      	mov	r6, r4
 8006c20:	2e00      	cmp	r6, #0
 8006c22:	d145      	bne.n	8006cb0 <_malloc_r+0xdc>
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	d048      	beq.n	8006cba <_malloc_r+0xe6>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	eb04 0903 	add.w	r9, r4, r3
 8006c32:	f000 fdf7 	bl	8007824 <_sbrk_r>
 8006c36:	4581      	cmp	r9, r0
 8006c38:	d13f      	bne.n	8006cba <_malloc_r+0xe6>
 8006c3a:	6821      	ldr	r1, [r4, #0]
 8006c3c:	1a6d      	subs	r5, r5, r1
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4638      	mov	r0, r7
 8006c42:	f7ff ffa7 	bl	8006b94 <sbrk_aligned>
 8006c46:	3001      	adds	r0, #1
 8006c48:	d037      	beq.n	8006cba <_malloc_r+0xe6>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	442b      	add	r3, r5
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	f8d8 3000 	ldr.w	r3, [r8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d038      	beq.n	8006cca <_malloc_r+0xf6>
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	42a2      	cmp	r2, r4
 8006c5c:	d12b      	bne.n	8006cb6 <_malloc_r+0xe2>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	605a      	str	r2, [r3, #4]
 8006c62:	e00f      	b.n	8006c84 <_malloc_r+0xb0>
 8006c64:	6822      	ldr	r2, [r4, #0]
 8006c66:	1b52      	subs	r2, r2, r5
 8006c68:	d41f      	bmi.n	8006caa <_malloc_r+0xd6>
 8006c6a:	2a0b      	cmp	r2, #11
 8006c6c:	d917      	bls.n	8006c9e <_malloc_r+0xca>
 8006c6e:	1961      	adds	r1, r4, r5
 8006c70:	42a3      	cmp	r3, r4
 8006c72:	6025      	str	r5, [r4, #0]
 8006c74:	bf18      	it	ne
 8006c76:	6059      	strne	r1, [r3, #4]
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	bf08      	it	eq
 8006c7c:	f8c8 1000 	streq.w	r1, [r8]
 8006c80:	5162      	str	r2, [r4, r5]
 8006c82:	604b      	str	r3, [r1, #4]
 8006c84:	4638      	mov	r0, r7
 8006c86:	f104 060b 	add.w	r6, r4, #11
 8006c8a:	f000 f829 	bl	8006ce0 <__malloc_unlock>
 8006c8e:	f026 0607 	bic.w	r6, r6, #7
 8006c92:	1d23      	adds	r3, r4, #4
 8006c94:	1af2      	subs	r2, r6, r3
 8006c96:	d0ae      	beq.n	8006bf6 <_malloc_r+0x22>
 8006c98:	1b9b      	subs	r3, r3, r6
 8006c9a:	50a3      	str	r3, [r4, r2]
 8006c9c:	e7ab      	b.n	8006bf6 <_malloc_r+0x22>
 8006c9e:	42a3      	cmp	r3, r4
 8006ca0:	6862      	ldr	r2, [r4, #4]
 8006ca2:	d1dd      	bne.n	8006c60 <_malloc_r+0x8c>
 8006ca4:	f8c8 2000 	str.w	r2, [r8]
 8006ca8:	e7ec      	b.n	8006c84 <_malloc_r+0xb0>
 8006caa:	4623      	mov	r3, r4
 8006cac:	6864      	ldr	r4, [r4, #4]
 8006cae:	e7ac      	b.n	8006c0a <_malloc_r+0x36>
 8006cb0:	4634      	mov	r4, r6
 8006cb2:	6876      	ldr	r6, [r6, #4]
 8006cb4:	e7b4      	b.n	8006c20 <_malloc_r+0x4c>
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	e7cc      	b.n	8006c54 <_malloc_r+0x80>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	603b      	str	r3, [r7, #0]
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	f000 f80e 	bl	8006ce0 <__malloc_unlock>
 8006cc4:	e797      	b.n	8006bf6 <_malloc_r+0x22>
 8006cc6:	6025      	str	r5, [r4, #0]
 8006cc8:	e7dc      	b.n	8006c84 <_malloc_r+0xb0>
 8006cca:	605b      	str	r3, [r3, #4]
 8006ccc:	deff      	udf	#255	; 0xff
 8006cce:	bf00      	nop
 8006cd0:	200004ac 	.word	0x200004ac

08006cd4 <__malloc_lock>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	; (8006cdc <__malloc_lock+0x8>)
 8006cd6:	f7ff b88a 	b.w	8005dee <__retarget_lock_acquire_recursive>
 8006cda:	bf00      	nop
 8006cdc:	200004a8 	.word	0x200004a8

08006ce0 <__malloc_unlock>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <__malloc_unlock+0x8>)
 8006ce2:	f7ff b885 	b.w	8005df0 <__retarget_lock_release_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	200004a8 	.word	0x200004a8

08006cec <_Balloc>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	69c6      	ldr	r6, [r0, #28]
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	b976      	cbnz	r6, 8006d14 <_Balloc+0x28>
 8006cf6:	2010      	movs	r0, #16
 8006cf8:	f7ff ff44 	bl	8006b84 <malloc>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	61e0      	str	r0, [r4, #28]
 8006d00:	b920      	cbnz	r0, 8006d0c <_Balloc+0x20>
 8006d02:	4b18      	ldr	r3, [pc, #96]	; (8006d64 <_Balloc+0x78>)
 8006d04:	4818      	ldr	r0, [pc, #96]	; (8006d68 <_Balloc+0x7c>)
 8006d06:	216b      	movs	r1, #107	; 0x6b
 8006d08:	f000 fdaa 	bl	8007860 <__assert_func>
 8006d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d10:	6006      	str	r6, [r0, #0]
 8006d12:	60c6      	str	r6, [r0, #12]
 8006d14:	69e6      	ldr	r6, [r4, #28]
 8006d16:	68f3      	ldr	r3, [r6, #12]
 8006d18:	b183      	cbz	r3, 8006d3c <_Balloc+0x50>
 8006d1a:	69e3      	ldr	r3, [r4, #28]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d22:	b9b8      	cbnz	r0, 8006d54 <_Balloc+0x68>
 8006d24:	2101      	movs	r1, #1
 8006d26:	fa01 f605 	lsl.w	r6, r1, r5
 8006d2a:	1d72      	adds	r2, r6, #5
 8006d2c:	0092      	lsls	r2, r2, #2
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 fdb4 	bl	800789c <_calloc_r>
 8006d34:	b160      	cbz	r0, 8006d50 <_Balloc+0x64>
 8006d36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d3a:	e00e      	b.n	8006d5a <_Balloc+0x6e>
 8006d3c:	2221      	movs	r2, #33	; 0x21
 8006d3e:	2104      	movs	r1, #4
 8006d40:	4620      	mov	r0, r4
 8006d42:	f000 fdab 	bl	800789c <_calloc_r>
 8006d46:	69e3      	ldr	r3, [r4, #28]
 8006d48:	60f0      	str	r0, [r6, #12]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e4      	bne.n	8006d1a <_Balloc+0x2e>
 8006d50:	2000      	movs	r0, #0
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	6802      	ldr	r2, [r0, #0]
 8006d56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d60:	e7f7      	b.n	8006d52 <_Balloc+0x66>
 8006d62:	bf00      	nop
 8006d64:	08007f79 	.word	0x08007f79
 8006d68:	08007ff9 	.word	0x08007ff9

08006d6c <_Bfree>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	69c6      	ldr	r6, [r0, #28]
 8006d70:	4605      	mov	r5, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	b976      	cbnz	r6, 8006d94 <_Bfree+0x28>
 8006d76:	2010      	movs	r0, #16
 8006d78:	f7ff ff04 	bl	8006b84 <malloc>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	61e8      	str	r0, [r5, #28]
 8006d80:	b920      	cbnz	r0, 8006d8c <_Bfree+0x20>
 8006d82:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <_Bfree+0x3c>)
 8006d84:	4809      	ldr	r0, [pc, #36]	; (8006dac <_Bfree+0x40>)
 8006d86:	218f      	movs	r1, #143	; 0x8f
 8006d88:	f000 fd6a 	bl	8007860 <__assert_func>
 8006d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d90:	6006      	str	r6, [r0, #0]
 8006d92:	60c6      	str	r6, [r0, #12]
 8006d94:	b13c      	cbz	r4, 8006da6 <_Bfree+0x3a>
 8006d96:	69eb      	ldr	r3, [r5, #28]
 8006d98:	6862      	ldr	r2, [r4, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006da0:	6021      	str	r1, [r4, #0]
 8006da2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	08007f79 	.word	0x08007f79
 8006dac:	08007ff9 	.word	0x08007ff9

08006db0 <__multadd>:
 8006db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db4:	690d      	ldr	r5, [r1, #16]
 8006db6:	4607      	mov	r7, r0
 8006db8:	460c      	mov	r4, r1
 8006dba:	461e      	mov	r6, r3
 8006dbc:	f101 0c14 	add.w	ip, r1, #20
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	f8dc 3000 	ldr.w	r3, [ip]
 8006dc6:	b299      	uxth	r1, r3
 8006dc8:	fb02 6101 	mla	r1, r2, r1, r6
 8006dcc:	0c1e      	lsrs	r6, r3, #16
 8006dce:	0c0b      	lsrs	r3, r1, #16
 8006dd0:	fb02 3306 	mla	r3, r2, r6, r3
 8006dd4:	b289      	uxth	r1, r1
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ddc:	4285      	cmp	r5, r0
 8006dde:	f84c 1b04 	str.w	r1, [ip], #4
 8006de2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006de6:	dcec      	bgt.n	8006dc2 <__multadd+0x12>
 8006de8:	b30e      	cbz	r6, 8006e2e <__multadd+0x7e>
 8006dea:	68a3      	ldr	r3, [r4, #8]
 8006dec:	42ab      	cmp	r3, r5
 8006dee:	dc19      	bgt.n	8006e24 <__multadd+0x74>
 8006df0:	6861      	ldr	r1, [r4, #4]
 8006df2:	4638      	mov	r0, r7
 8006df4:	3101      	adds	r1, #1
 8006df6:	f7ff ff79 	bl	8006cec <_Balloc>
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	b928      	cbnz	r0, 8006e0a <__multadd+0x5a>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <__multadd+0x84>)
 8006e02:	480d      	ldr	r0, [pc, #52]	; (8006e38 <__multadd+0x88>)
 8006e04:	21ba      	movs	r1, #186	; 0xba
 8006e06:	f000 fd2b 	bl	8007860 <__assert_func>
 8006e0a:	6922      	ldr	r2, [r4, #16]
 8006e0c:	3202      	adds	r2, #2
 8006e0e:	f104 010c 	add.w	r1, r4, #12
 8006e12:	0092      	lsls	r2, r2, #2
 8006e14:	300c      	adds	r0, #12
 8006e16:	f000 fd15 	bl	8007844 <memcpy>
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	f7ff ffa5 	bl	8006d6c <_Bfree>
 8006e22:	4644      	mov	r4, r8
 8006e24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e28:	3501      	adds	r5, #1
 8006e2a:	615e      	str	r6, [r3, #20]
 8006e2c:	6125      	str	r5, [r4, #16]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e34:	08007fe8 	.word	0x08007fe8
 8006e38:	08007ff9 	.word	0x08007ff9

08006e3c <__hi0bits>:
 8006e3c:	0c03      	lsrs	r3, r0, #16
 8006e3e:	041b      	lsls	r3, r3, #16
 8006e40:	b9d3      	cbnz	r3, 8006e78 <__hi0bits+0x3c>
 8006e42:	0400      	lsls	r0, r0, #16
 8006e44:	2310      	movs	r3, #16
 8006e46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e4a:	bf04      	itt	eq
 8006e4c:	0200      	lsleq	r0, r0, #8
 8006e4e:	3308      	addeq	r3, #8
 8006e50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e54:	bf04      	itt	eq
 8006e56:	0100      	lsleq	r0, r0, #4
 8006e58:	3304      	addeq	r3, #4
 8006e5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e5e:	bf04      	itt	eq
 8006e60:	0080      	lsleq	r0, r0, #2
 8006e62:	3302      	addeq	r3, #2
 8006e64:	2800      	cmp	r0, #0
 8006e66:	db05      	blt.n	8006e74 <__hi0bits+0x38>
 8006e68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e6c:	f103 0301 	add.w	r3, r3, #1
 8006e70:	bf08      	it	eq
 8006e72:	2320      	moveq	r3, #32
 8006e74:	4618      	mov	r0, r3
 8006e76:	4770      	bx	lr
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e7e4      	b.n	8006e46 <__hi0bits+0xa>

08006e7c <__lo0bits>:
 8006e7c:	6803      	ldr	r3, [r0, #0]
 8006e7e:	f013 0207 	ands.w	r2, r3, #7
 8006e82:	d00c      	beq.n	8006e9e <__lo0bits+0x22>
 8006e84:	07d9      	lsls	r1, r3, #31
 8006e86:	d422      	bmi.n	8006ece <__lo0bits+0x52>
 8006e88:	079a      	lsls	r2, r3, #30
 8006e8a:	bf49      	itett	mi
 8006e8c:	085b      	lsrmi	r3, r3, #1
 8006e8e:	089b      	lsrpl	r3, r3, #2
 8006e90:	6003      	strmi	r3, [r0, #0]
 8006e92:	2201      	movmi	r2, #1
 8006e94:	bf5c      	itt	pl
 8006e96:	6003      	strpl	r3, [r0, #0]
 8006e98:	2202      	movpl	r2, #2
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	4770      	bx	lr
 8006e9e:	b299      	uxth	r1, r3
 8006ea0:	b909      	cbnz	r1, 8006ea6 <__lo0bits+0x2a>
 8006ea2:	0c1b      	lsrs	r3, r3, #16
 8006ea4:	2210      	movs	r2, #16
 8006ea6:	b2d9      	uxtb	r1, r3
 8006ea8:	b909      	cbnz	r1, 8006eae <__lo0bits+0x32>
 8006eaa:	3208      	adds	r2, #8
 8006eac:	0a1b      	lsrs	r3, r3, #8
 8006eae:	0719      	lsls	r1, r3, #28
 8006eb0:	bf04      	itt	eq
 8006eb2:	091b      	lsreq	r3, r3, #4
 8006eb4:	3204      	addeq	r2, #4
 8006eb6:	0799      	lsls	r1, r3, #30
 8006eb8:	bf04      	itt	eq
 8006eba:	089b      	lsreq	r3, r3, #2
 8006ebc:	3202      	addeq	r2, #2
 8006ebe:	07d9      	lsls	r1, r3, #31
 8006ec0:	d403      	bmi.n	8006eca <__lo0bits+0x4e>
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	f102 0201 	add.w	r2, r2, #1
 8006ec8:	d003      	beq.n	8006ed2 <__lo0bits+0x56>
 8006eca:	6003      	str	r3, [r0, #0]
 8006ecc:	e7e5      	b.n	8006e9a <__lo0bits+0x1e>
 8006ece:	2200      	movs	r2, #0
 8006ed0:	e7e3      	b.n	8006e9a <__lo0bits+0x1e>
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	e7e1      	b.n	8006e9a <__lo0bits+0x1e>
	...

08006ed8 <__i2b>:
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	460c      	mov	r4, r1
 8006edc:	2101      	movs	r1, #1
 8006ede:	f7ff ff05 	bl	8006cec <_Balloc>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	b928      	cbnz	r0, 8006ef2 <__i2b+0x1a>
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <__i2b+0x24>)
 8006ee8:	4805      	ldr	r0, [pc, #20]	; (8006f00 <__i2b+0x28>)
 8006eea:	f240 1145 	movw	r1, #325	; 0x145
 8006eee:	f000 fcb7 	bl	8007860 <__assert_func>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	6144      	str	r4, [r0, #20]
 8006ef6:	6103      	str	r3, [r0, #16]
 8006ef8:	bd10      	pop	{r4, pc}
 8006efa:	bf00      	nop
 8006efc:	08007fe8 	.word	0x08007fe8
 8006f00:	08007ff9 	.word	0x08007ff9

08006f04 <__multiply>:
 8006f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f08:	4691      	mov	r9, r2
 8006f0a:	690a      	ldr	r2, [r1, #16]
 8006f0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	bfb8      	it	lt
 8006f14:	460b      	movlt	r3, r1
 8006f16:	460c      	mov	r4, r1
 8006f18:	bfbc      	itt	lt
 8006f1a:	464c      	movlt	r4, r9
 8006f1c:	4699      	movlt	r9, r3
 8006f1e:	6927      	ldr	r7, [r4, #16]
 8006f20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f24:	68a3      	ldr	r3, [r4, #8]
 8006f26:	6861      	ldr	r1, [r4, #4]
 8006f28:	eb07 060a 	add.w	r6, r7, sl
 8006f2c:	42b3      	cmp	r3, r6
 8006f2e:	b085      	sub	sp, #20
 8006f30:	bfb8      	it	lt
 8006f32:	3101      	addlt	r1, #1
 8006f34:	f7ff feda 	bl	8006cec <_Balloc>
 8006f38:	b930      	cbnz	r0, 8006f48 <__multiply+0x44>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	4b44      	ldr	r3, [pc, #272]	; (8007050 <__multiply+0x14c>)
 8006f3e:	4845      	ldr	r0, [pc, #276]	; (8007054 <__multiply+0x150>)
 8006f40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006f44:	f000 fc8c 	bl	8007860 <__assert_func>
 8006f48:	f100 0514 	add.w	r5, r0, #20
 8006f4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f50:	462b      	mov	r3, r5
 8006f52:	2200      	movs	r2, #0
 8006f54:	4543      	cmp	r3, r8
 8006f56:	d321      	bcc.n	8006f9c <__multiply+0x98>
 8006f58:	f104 0314 	add.w	r3, r4, #20
 8006f5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f60:	f109 0314 	add.w	r3, r9, #20
 8006f64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f68:	9202      	str	r2, [sp, #8]
 8006f6a:	1b3a      	subs	r2, r7, r4
 8006f6c:	3a15      	subs	r2, #21
 8006f6e:	f022 0203 	bic.w	r2, r2, #3
 8006f72:	3204      	adds	r2, #4
 8006f74:	f104 0115 	add.w	r1, r4, #21
 8006f78:	428f      	cmp	r7, r1
 8006f7a:	bf38      	it	cc
 8006f7c:	2204      	movcc	r2, #4
 8006f7e:	9201      	str	r2, [sp, #4]
 8006f80:	9a02      	ldr	r2, [sp, #8]
 8006f82:	9303      	str	r3, [sp, #12]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d80c      	bhi.n	8006fa2 <__multiply+0x9e>
 8006f88:	2e00      	cmp	r6, #0
 8006f8a:	dd03      	ble.n	8006f94 <__multiply+0x90>
 8006f8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d05b      	beq.n	800704c <__multiply+0x148>
 8006f94:	6106      	str	r6, [r0, #16]
 8006f96:	b005      	add	sp, #20
 8006f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9c:	f843 2b04 	str.w	r2, [r3], #4
 8006fa0:	e7d8      	b.n	8006f54 <__multiply+0x50>
 8006fa2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fa6:	f1ba 0f00 	cmp.w	sl, #0
 8006faa:	d024      	beq.n	8006ff6 <__multiply+0xf2>
 8006fac:	f104 0e14 	add.w	lr, r4, #20
 8006fb0:	46a9      	mov	r9, r5
 8006fb2:	f04f 0c00 	mov.w	ip, #0
 8006fb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006fba:	f8d9 1000 	ldr.w	r1, [r9]
 8006fbe:	fa1f fb82 	uxth.w	fp, r2
 8006fc2:	b289      	uxth	r1, r1
 8006fc4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006fc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006fcc:	f8d9 2000 	ldr.w	r2, [r9]
 8006fd0:	4461      	add	r1, ip
 8006fd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fd6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006fda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006fde:	b289      	uxth	r1, r1
 8006fe0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006fe4:	4577      	cmp	r7, lr
 8006fe6:	f849 1b04 	str.w	r1, [r9], #4
 8006fea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fee:	d8e2      	bhi.n	8006fb6 <__multiply+0xb2>
 8006ff0:	9a01      	ldr	r2, [sp, #4]
 8006ff2:	f845 c002 	str.w	ip, [r5, r2]
 8006ff6:	9a03      	ldr	r2, [sp, #12]
 8006ff8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	f1b9 0f00 	cmp.w	r9, #0
 8007002:	d021      	beq.n	8007048 <__multiply+0x144>
 8007004:	6829      	ldr	r1, [r5, #0]
 8007006:	f104 0c14 	add.w	ip, r4, #20
 800700a:	46ae      	mov	lr, r5
 800700c:	f04f 0a00 	mov.w	sl, #0
 8007010:	f8bc b000 	ldrh.w	fp, [ip]
 8007014:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007018:	fb09 220b 	mla	r2, r9, fp, r2
 800701c:	4452      	add	r2, sl
 800701e:	b289      	uxth	r1, r1
 8007020:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007024:	f84e 1b04 	str.w	r1, [lr], #4
 8007028:	f85c 1b04 	ldr.w	r1, [ip], #4
 800702c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007030:	f8be 1000 	ldrh.w	r1, [lr]
 8007034:	fb09 110a 	mla	r1, r9, sl, r1
 8007038:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800703c:	4567      	cmp	r7, ip
 800703e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007042:	d8e5      	bhi.n	8007010 <__multiply+0x10c>
 8007044:	9a01      	ldr	r2, [sp, #4]
 8007046:	50a9      	str	r1, [r5, r2]
 8007048:	3504      	adds	r5, #4
 800704a:	e799      	b.n	8006f80 <__multiply+0x7c>
 800704c:	3e01      	subs	r6, #1
 800704e:	e79b      	b.n	8006f88 <__multiply+0x84>
 8007050:	08007fe8 	.word	0x08007fe8
 8007054:	08007ff9 	.word	0x08007ff9

08007058 <__pow5mult>:
 8007058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800705c:	4615      	mov	r5, r2
 800705e:	f012 0203 	ands.w	r2, r2, #3
 8007062:	4606      	mov	r6, r0
 8007064:	460f      	mov	r7, r1
 8007066:	d007      	beq.n	8007078 <__pow5mult+0x20>
 8007068:	4c25      	ldr	r4, [pc, #148]	; (8007100 <__pow5mult+0xa8>)
 800706a:	3a01      	subs	r2, #1
 800706c:	2300      	movs	r3, #0
 800706e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007072:	f7ff fe9d 	bl	8006db0 <__multadd>
 8007076:	4607      	mov	r7, r0
 8007078:	10ad      	asrs	r5, r5, #2
 800707a:	d03d      	beq.n	80070f8 <__pow5mult+0xa0>
 800707c:	69f4      	ldr	r4, [r6, #28]
 800707e:	b97c      	cbnz	r4, 80070a0 <__pow5mult+0x48>
 8007080:	2010      	movs	r0, #16
 8007082:	f7ff fd7f 	bl	8006b84 <malloc>
 8007086:	4602      	mov	r2, r0
 8007088:	61f0      	str	r0, [r6, #28]
 800708a:	b928      	cbnz	r0, 8007098 <__pow5mult+0x40>
 800708c:	4b1d      	ldr	r3, [pc, #116]	; (8007104 <__pow5mult+0xac>)
 800708e:	481e      	ldr	r0, [pc, #120]	; (8007108 <__pow5mult+0xb0>)
 8007090:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007094:	f000 fbe4 	bl	8007860 <__assert_func>
 8007098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800709c:	6004      	str	r4, [r0, #0]
 800709e:	60c4      	str	r4, [r0, #12]
 80070a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80070a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070a8:	b94c      	cbnz	r4, 80070be <__pow5mult+0x66>
 80070aa:	f240 2171 	movw	r1, #625	; 0x271
 80070ae:	4630      	mov	r0, r6
 80070b0:	f7ff ff12 	bl	8006ed8 <__i2b>
 80070b4:	2300      	movs	r3, #0
 80070b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80070ba:	4604      	mov	r4, r0
 80070bc:	6003      	str	r3, [r0, #0]
 80070be:	f04f 0900 	mov.w	r9, #0
 80070c2:	07eb      	lsls	r3, r5, #31
 80070c4:	d50a      	bpl.n	80070dc <__pow5mult+0x84>
 80070c6:	4639      	mov	r1, r7
 80070c8:	4622      	mov	r2, r4
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7ff ff1a 	bl	8006f04 <__multiply>
 80070d0:	4639      	mov	r1, r7
 80070d2:	4680      	mov	r8, r0
 80070d4:	4630      	mov	r0, r6
 80070d6:	f7ff fe49 	bl	8006d6c <_Bfree>
 80070da:	4647      	mov	r7, r8
 80070dc:	106d      	asrs	r5, r5, #1
 80070de:	d00b      	beq.n	80070f8 <__pow5mult+0xa0>
 80070e0:	6820      	ldr	r0, [r4, #0]
 80070e2:	b938      	cbnz	r0, 80070f4 <__pow5mult+0x9c>
 80070e4:	4622      	mov	r2, r4
 80070e6:	4621      	mov	r1, r4
 80070e8:	4630      	mov	r0, r6
 80070ea:	f7ff ff0b 	bl	8006f04 <__multiply>
 80070ee:	6020      	str	r0, [r4, #0]
 80070f0:	f8c0 9000 	str.w	r9, [r0]
 80070f4:	4604      	mov	r4, r0
 80070f6:	e7e4      	b.n	80070c2 <__pow5mult+0x6a>
 80070f8:	4638      	mov	r0, r7
 80070fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070fe:	bf00      	nop
 8007100:	08008148 	.word	0x08008148
 8007104:	08007f79 	.word	0x08007f79
 8007108:	08007ff9 	.word	0x08007ff9

0800710c <__lshift>:
 800710c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007110:	460c      	mov	r4, r1
 8007112:	6849      	ldr	r1, [r1, #4]
 8007114:	6923      	ldr	r3, [r4, #16]
 8007116:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800711a:	68a3      	ldr	r3, [r4, #8]
 800711c:	4607      	mov	r7, r0
 800711e:	4691      	mov	r9, r2
 8007120:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007124:	f108 0601 	add.w	r6, r8, #1
 8007128:	42b3      	cmp	r3, r6
 800712a:	db0b      	blt.n	8007144 <__lshift+0x38>
 800712c:	4638      	mov	r0, r7
 800712e:	f7ff fddd 	bl	8006cec <_Balloc>
 8007132:	4605      	mov	r5, r0
 8007134:	b948      	cbnz	r0, 800714a <__lshift+0x3e>
 8007136:	4602      	mov	r2, r0
 8007138:	4b28      	ldr	r3, [pc, #160]	; (80071dc <__lshift+0xd0>)
 800713a:	4829      	ldr	r0, [pc, #164]	; (80071e0 <__lshift+0xd4>)
 800713c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007140:	f000 fb8e 	bl	8007860 <__assert_func>
 8007144:	3101      	adds	r1, #1
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	e7ee      	b.n	8007128 <__lshift+0x1c>
 800714a:	2300      	movs	r3, #0
 800714c:	f100 0114 	add.w	r1, r0, #20
 8007150:	f100 0210 	add.w	r2, r0, #16
 8007154:	4618      	mov	r0, r3
 8007156:	4553      	cmp	r3, sl
 8007158:	db33      	blt.n	80071c2 <__lshift+0xb6>
 800715a:	6920      	ldr	r0, [r4, #16]
 800715c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007160:	f104 0314 	add.w	r3, r4, #20
 8007164:	f019 091f 	ands.w	r9, r9, #31
 8007168:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800716c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007170:	d02b      	beq.n	80071ca <__lshift+0xbe>
 8007172:	f1c9 0e20 	rsb	lr, r9, #32
 8007176:	468a      	mov	sl, r1
 8007178:	2200      	movs	r2, #0
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	fa00 f009 	lsl.w	r0, r0, r9
 8007180:	4310      	orrs	r0, r2
 8007182:	f84a 0b04 	str.w	r0, [sl], #4
 8007186:	f853 2b04 	ldr.w	r2, [r3], #4
 800718a:	459c      	cmp	ip, r3
 800718c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007190:	d8f3      	bhi.n	800717a <__lshift+0x6e>
 8007192:	ebac 0304 	sub.w	r3, ip, r4
 8007196:	3b15      	subs	r3, #21
 8007198:	f023 0303 	bic.w	r3, r3, #3
 800719c:	3304      	adds	r3, #4
 800719e:	f104 0015 	add.w	r0, r4, #21
 80071a2:	4584      	cmp	ip, r0
 80071a4:	bf38      	it	cc
 80071a6:	2304      	movcc	r3, #4
 80071a8:	50ca      	str	r2, [r1, r3]
 80071aa:	b10a      	cbz	r2, 80071b0 <__lshift+0xa4>
 80071ac:	f108 0602 	add.w	r6, r8, #2
 80071b0:	3e01      	subs	r6, #1
 80071b2:	4638      	mov	r0, r7
 80071b4:	612e      	str	r6, [r5, #16]
 80071b6:	4621      	mov	r1, r4
 80071b8:	f7ff fdd8 	bl	8006d6c <_Bfree>
 80071bc:	4628      	mov	r0, r5
 80071be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80071c6:	3301      	adds	r3, #1
 80071c8:	e7c5      	b.n	8007156 <__lshift+0x4a>
 80071ca:	3904      	subs	r1, #4
 80071cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80071d4:	459c      	cmp	ip, r3
 80071d6:	d8f9      	bhi.n	80071cc <__lshift+0xc0>
 80071d8:	e7ea      	b.n	80071b0 <__lshift+0xa4>
 80071da:	bf00      	nop
 80071dc:	08007fe8 	.word	0x08007fe8
 80071e0:	08007ff9 	.word	0x08007ff9

080071e4 <__mcmp>:
 80071e4:	b530      	push	{r4, r5, lr}
 80071e6:	6902      	ldr	r2, [r0, #16]
 80071e8:	690c      	ldr	r4, [r1, #16]
 80071ea:	1b12      	subs	r2, r2, r4
 80071ec:	d10e      	bne.n	800720c <__mcmp+0x28>
 80071ee:	f100 0314 	add.w	r3, r0, #20
 80071f2:	3114      	adds	r1, #20
 80071f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80071f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80071fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007200:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007204:	42a5      	cmp	r5, r4
 8007206:	d003      	beq.n	8007210 <__mcmp+0x2c>
 8007208:	d305      	bcc.n	8007216 <__mcmp+0x32>
 800720a:	2201      	movs	r2, #1
 800720c:	4610      	mov	r0, r2
 800720e:	bd30      	pop	{r4, r5, pc}
 8007210:	4283      	cmp	r3, r0
 8007212:	d3f3      	bcc.n	80071fc <__mcmp+0x18>
 8007214:	e7fa      	b.n	800720c <__mcmp+0x28>
 8007216:	f04f 32ff 	mov.w	r2, #4294967295
 800721a:	e7f7      	b.n	800720c <__mcmp+0x28>

0800721c <__mdiff>:
 800721c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	460c      	mov	r4, r1
 8007222:	4606      	mov	r6, r0
 8007224:	4611      	mov	r1, r2
 8007226:	4620      	mov	r0, r4
 8007228:	4690      	mov	r8, r2
 800722a:	f7ff ffdb 	bl	80071e4 <__mcmp>
 800722e:	1e05      	subs	r5, r0, #0
 8007230:	d110      	bne.n	8007254 <__mdiff+0x38>
 8007232:	4629      	mov	r1, r5
 8007234:	4630      	mov	r0, r6
 8007236:	f7ff fd59 	bl	8006cec <_Balloc>
 800723a:	b930      	cbnz	r0, 800724a <__mdiff+0x2e>
 800723c:	4b3a      	ldr	r3, [pc, #232]	; (8007328 <__mdiff+0x10c>)
 800723e:	4602      	mov	r2, r0
 8007240:	f240 2137 	movw	r1, #567	; 0x237
 8007244:	4839      	ldr	r0, [pc, #228]	; (800732c <__mdiff+0x110>)
 8007246:	f000 fb0b 	bl	8007860 <__assert_func>
 800724a:	2301      	movs	r3, #1
 800724c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007254:	bfa4      	itt	ge
 8007256:	4643      	movge	r3, r8
 8007258:	46a0      	movge	r8, r4
 800725a:	4630      	mov	r0, r6
 800725c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007260:	bfa6      	itte	ge
 8007262:	461c      	movge	r4, r3
 8007264:	2500      	movge	r5, #0
 8007266:	2501      	movlt	r5, #1
 8007268:	f7ff fd40 	bl	8006cec <_Balloc>
 800726c:	b920      	cbnz	r0, 8007278 <__mdiff+0x5c>
 800726e:	4b2e      	ldr	r3, [pc, #184]	; (8007328 <__mdiff+0x10c>)
 8007270:	4602      	mov	r2, r0
 8007272:	f240 2145 	movw	r1, #581	; 0x245
 8007276:	e7e5      	b.n	8007244 <__mdiff+0x28>
 8007278:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800727c:	6926      	ldr	r6, [r4, #16]
 800727e:	60c5      	str	r5, [r0, #12]
 8007280:	f104 0914 	add.w	r9, r4, #20
 8007284:	f108 0514 	add.w	r5, r8, #20
 8007288:	f100 0e14 	add.w	lr, r0, #20
 800728c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007290:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007294:	f108 0210 	add.w	r2, r8, #16
 8007298:	46f2      	mov	sl, lr
 800729a:	2100      	movs	r1, #0
 800729c:	f859 3b04 	ldr.w	r3, [r9], #4
 80072a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072a4:	fa11 f88b 	uxtah	r8, r1, fp
 80072a8:	b299      	uxth	r1, r3
 80072aa:	0c1b      	lsrs	r3, r3, #16
 80072ac:	eba8 0801 	sub.w	r8, r8, r1
 80072b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072b8:	fa1f f888 	uxth.w	r8, r8
 80072bc:	1419      	asrs	r1, r3, #16
 80072be:	454e      	cmp	r6, r9
 80072c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80072c4:	f84a 3b04 	str.w	r3, [sl], #4
 80072c8:	d8e8      	bhi.n	800729c <__mdiff+0x80>
 80072ca:	1b33      	subs	r3, r6, r4
 80072cc:	3b15      	subs	r3, #21
 80072ce:	f023 0303 	bic.w	r3, r3, #3
 80072d2:	3304      	adds	r3, #4
 80072d4:	3415      	adds	r4, #21
 80072d6:	42a6      	cmp	r6, r4
 80072d8:	bf38      	it	cc
 80072da:	2304      	movcc	r3, #4
 80072dc:	441d      	add	r5, r3
 80072de:	4473      	add	r3, lr
 80072e0:	469e      	mov	lr, r3
 80072e2:	462e      	mov	r6, r5
 80072e4:	4566      	cmp	r6, ip
 80072e6:	d30e      	bcc.n	8007306 <__mdiff+0xea>
 80072e8:	f10c 0203 	add.w	r2, ip, #3
 80072ec:	1b52      	subs	r2, r2, r5
 80072ee:	f022 0203 	bic.w	r2, r2, #3
 80072f2:	3d03      	subs	r5, #3
 80072f4:	45ac      	cmp	ip, r5
 80072f6:	bf38      	it	cc
 80072f8:	2200      	movcc	r2, #0
 80072fa:	4413      	add	r3, r2
 80072fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007300:	b17a      	cbz	r2, 8007322 <__mdiff+0x106>
 8007302:	6107      	str	r7, [r0, #16]
 8007304:	e7a4      	b.n	8007250 <__mdiff+0x34>
 8007306:	f856 8b04 	ldr.w	r8, [r6], #4
 800730a:	fa11 f288 	uxtah	r2, r1, r8
 800730e:	1414      	asrs	r4, r2, #16
 8007310:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007314:	b292      	uxth	r2, r2
 8007316:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800731a:	f84e 2b04 	str.w	r2, [lr], #4
 800731e:	1421      	asrs	r1, r4, #16
 8007320:	e7e0      	b.n	80072e4 <__mdiff+0xc8>
 8007322:	3f01      	subs	r7, #1
 8007324:	e7ea      	b.n	80072fc <__mdiff+0xe0>
 8007326:	bf00      	nop
 8007328:	08007fe8 	.word	0x08007fe8
 800732c:	08007ff9 	.word	0x08007ff9

08007330 <__d2b>:
 8007330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007334:	460f      	mov	r7, r1
 8007336:	2101      	movs	r1, #1
 8007338:	ec59 8b10 	vmov	r8, r9, d0
 800733c:	4616      	mov	r6, r2
 800733e:	f7ff fcd5 	bl	8006cec <_Balloc>
 8007342:	4604      	mov	r4, r0
 8007344:	b930      	cbnz	r0, 8007354 <__d2b+0x24>
 8007346:	4602      	mov	r2, r0
 8007348:	4b24      	ldr	r3, [pc, #144]	; (80073dc <__d2b+0xac>)
 800734a:	4825      	ldr	r0, [pc, #148]	; (80073e0 <__d2b+0xb0>)
 800734c:	f240 310f 	movw	r1, #783	; 0x30f
 8007350:	f000 fa86 	bl	8007860 <__assert_func>
 8007354:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800735c:	bb2d      	cbnz	r5, 80073aa <__d2b+0x7a>
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	f1b8 0300 	subs.w	r3, r8, #0
 8007364:	d026      	beq.n	80073b4 <__d2b+0x84>
 8007366:	4668      	mov	r0, sp
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	f7ff fd87 	bl	8006e7c <__lo0bits>
 800736e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007372:	b1e8      	cbz	r0, 80073b0 <__d2b+0x80>
 8007374:	f1c0 0320 	rsb	r3, r0, #32
 8007378:	fa02 f303 	lsl.w	r3, r2, r3
 800737c:	430b      	orrs	r3, r1
 800737e:	40c2      	lsrs	r2, r0
 8007380:	6163      	str	r3, [r4, #20]
 8007382:	9201      	str	r2, [sp, #4]
 8007384:	9b01      	ldr	r3, [sp, #4]
 8007386:	61a3      	str	r3, [r4, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	bf14      	ite	ne
 800738c:	2202      	movne	r2, #2
 800738e:	2201      	moveq	r2, #1
 8007390:	6122      	str	r2, [r4, #16]
 8007392:	b1bd      	cbz	r5, 80073c4 <__d2b+0x94>
 8007394:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007398:	4405      	add	r5, r0
 800739a:	603d      	str	r5, [r7, #0]
 800739c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073a0:	6030      	str	r0, [r6, #0]
 80073a2:	4620      	mov	r0, r4
 80073a4:	b003      	add	sp, #12
 80073a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ae:	e7d6      	b.n	800735e <__d2b+0x2e>
 80073b0:	6161      	str	r1, [r4, #20]
 80073b2:	e7e7      	b.n	8007384 <__d2b+0x54>
 80073b4:	a801      	add	r0, sp, #4
 80073b6:	f7ff fd61 	bl	8006e7c <__lo0bits>
 80073ba:	9b01      	ldr	r3, [sp, #4]
 80073bc:	6163      	str	r3, [r4, #20]
 80073be:	3020      	adds	r0, #32
 80073c0:	2201      	movs	r2, #1
 80073c2:	e7e5      	b.n	8007390 <__d2b+0x60>
 80073c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073cc:	6038      	str	r0, [r7, #0]
 80073ce:	6918      	ldr	r0, [r3, #16]
 80073d0:	f7ff fd34 	bl	8006e3c <__hi0bits>
 80073d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073d8:	e7e2      	b.n	80073a0 <__d2b+0x70>
 80073da:	bf00      	nop
 80073dc:	08007fe8 	.word	0x08007fe8
 80073e0:	08007ff9 	.word	0x08007ff9

080073e4 <__ssputs_r>:
 80073e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e8:	688e      	ldr	r6, [r1, #8]
 80073ea:	461f      	mov	r7, r3
 80073ec:	42be      	cmp	r6, r7
 80073ee:	680b      	ldr	r3, [r1, #0]
 80073f0:	4682      	mov	sl, r0
 80073f2:	460c      	mov	r4, r1
 80073f4:	4690      	mov	r8, r2
 80073f6:	d82c      	bhi.n	8007452 <__ssputs_r+0x6e>
 80073f8:	898a      	ldrh	r2, [r1, #12]
 80073fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073fe:	d026      	beq.n	800744e <__ssputs_r+0x6a>
 8007400:	6965      	ldr	r5, [r4, #20]
 8007402:	6909      	ldr	r1, [r1, #16]
 8007404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007408:	eba3 0901 	sub.w	r9, r3, r1
 800740c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007410:	1c7b      	adds	r3, r7, #1
 8007412:	444b      	add	r3, r9
 8007414:	106d      	asrs	r5, r5, #1
 8007416:	429d      	cmp	r5, r3
 8007418:	bf38      	it	cc
 800741a:	461d      	movcc	r5, r3
 800741c:	0553      	lsls	r3, r2, #21
 800741e:	d527      	bpl.n	8007470 <__ssputs_r+0x8c>
 8007420:	4629      	mov	r1, r5
 8007422:	f7ff fbd7 	bl	8006bd4 <_malloc_r>
 8007426:	4606      	mov	r6, r0
 8007428:	b360      	cbz	r0, 8007484 <__ssputs_r+0xa0>
 800742a:	6921      	ldr	r1, [r4, #16]
 800742c:	464a      	mov	r2, r9
 800742e:	f000 fa09 	bl	8007844 <memcpy>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	6126      	str	r6, [r4, #16]
 8007440:	6165      	str	r5, [r4, #20]
 8007442:	444e      	add	r6, r9
 8007444:	eba5 0509 	sub.w	r5, r5, r9
 8007448:	6026      	str	r6, [r4, #0]
 800744a:	60a5      	str	r5, [r4, #8]
 800744c:	463e      	mov	r6, r7
 800744e:	42be      	cmp	r6, r7
 8007450:	d900      	bls.n	8007454 <__ssputs_r+0x70>
 8007452:	463e      	mov	r6, r7
 8007454:	6820      	ldr	r0, [r4, #0]
 8007456:	4632      	mov	r2, r6
 8007458:	4641      	mov	r1, r8
 800745a:	f000 f9c9 	bl	80077f0 <memmove>
 800745e:	68a3      	ldr	r3, [r4, #8]
 8007460:	1b9b      	subs	r3, r3, r6
 8007462:	60a3      	str	r3, [r4, #8]
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	4433      	add	r3, r6
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	2000      	movs	r0, #0
 800746c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007470:	462a      	mov	r2, r5
 8007472:	f000 fa3b 	bl	80078ec <_realloc_r>
 8007476:	4606      	mov	r6, r0
 8007478:	2800      	cmp	r0, #0
 800747a:	d1e0      	bne.n	800743e <__ssputs_r+0x5a>
 800747c:	6921      	ldr	r1, [r4, #16]
 800747e:	4650      	mov	r0, sl
 8007480:	f7ff fb34 	bl	8006aec <_free_r>
 8007484:	230c      	movs	r3, #12
 8007486:	f8ca 3000 	str.w	r3, [sl]
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007490:	81a3      	strh	r3, [r4, #12]
 8007492:	f04f 30ff 	mov.w	r0, #4294967295
 8007496:	e7e9      	b.n	800746c <__ssputs_r+0x88>

08007498 <_svfiprintf_r>:
 8007498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749c:	4698      	mov	r8, r3
 800749e:	898b      	ldrh	r3, [r1, #12]
 80074a0:	061b      	lsls	r3, r3, #24
 80074a2:	b09d      	sub	sp, #116	; 0x74
 80074a4:	4607      	mov	r7, r0
 80074a6:	460d      	mov	r5, r1
 80074a8:	4614      	mov	r4, r2
 80074aa:	d50e      	bpl.n	80074ca <_svfiprintf_r+0x32>
 80074ac:	690b      	ldr	r3, [r1, #16]
 80074ae:	b963      	cbnz	r3, 80074ca <_svfiprintf_r+0x32>
 80074b0:	2140      	movs	r1, #64	; 0x40
 80074b2:	f7ff fb8f 	bl	8006bd4 <_malloc_r>
 80074b6:	6028      	str	r0, [r5, #0]
 80074b8:	6128      	str	r0, [r5, #16]
 80074ba:	b920      	cbnz	r0, 80074c6 <_svfiprintf_r+0x2e>
 80074bc:	230c      	movs	r3, #12
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	f04f 30ff 	mov.w	r0, #4294967295
 80074c4:	e0d0      	b.n	8007668 <_svfiprintf_r+0x1d0>
 80074c6:	2340      	movs	r3, #64	; 0x40
 80074c8:	616b      	str	r3, [r5, #20]
 80074ca:	2300      	movs	r3, #0
 80074cc:	9309      	str	r3, [sp, #36]	; 0x24
 80074ce:	2320      	movs	r3, #32
 80074d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80074d8:	2330      	movs	r3, #48	; 0x30
 80074da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007680 <_svfiprintf_r+0x1e8>
 80074de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074e2:	f04f 0901 	mov.w	r9, #1
 80074e6:	4623      	mov	r3, r4
 80074e8:	469a      	mov	sl, r3
 80074ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ee:	b10a      	cbz	r2, 80074f4 <_svfiprintf_r+0x5c>
 80074f0:	2a25      	cmp	r2, #37	; 0x25
 80074f2:	d1f9      	bne.n	80074e8 <_svfiprintf_r+0x50>
 80074f4:	ebba 0b04 	subs.w	fp, sl, r4
 80074f8:	d00b      	beq.n	8007512 <_svfiprintf_r+0x7a>
 80074fa:	465b      	mov	r3, fp
 80074fc:	4622      	mov	r2, r4
 80074fe:	4629      	mov	r1, r5
 8007500:	4638      	mov	r0, r7
 8007502:	f7ff ff6f 	bl	80073e4 <__ssputs_r>
 8007506:	3001      	adds	r0, #1
 8007508:	f000 80a9 	beq.w	800765e <_svfiprintf_r+0x1c6>
 800750c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800750e:	445a      	add	r2, fp
 8007510:	9209      	str	r2, [sp, #36]	; 0x24
 8007512:	f89a 3000 	ldrb.w	r3, [sl]
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80a1 	beq.w	800765e <_svfiprintf_r+0x1c6>
 800751c:	2300      	movs	r3, #0
 800751e:	f04f 32ff 	mov.w	r2, #4294967295
 8007522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007526:	f10a 0a01 	add.w	sl, sl, #1
 800752a:	9304      	str	r3, [sp, #16]
 800752c:	9307      	str	r3, [sp, #28]
 800752e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007532:	931a      	str	r3, [sp, #104]	; 0x68
 8007534:	4654      	mov	r4, sl
 8007536:	2205      	movs	r2, #5
 8007538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800753c:	4850      	ldr	r0, [pc, #320]	; (8007680 <_svfiprintf_r+0x1e8>)
 800753e:	f7f8 fe4f 	bl	80001e0 <memchr>
 8007542:	9a04      	ldr	r2, [sp, #16]
 8007544:	b9d8      	cbnz	r0, 800757e <_svfiprintf_r+0xe6>
 8007546:	06d0      	lsls	r0, r2, #27
 8007548:	bf44      	itt	mi
 800754a:	2320      	movmi	r3, #32
 800754c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007550:	0711      	lsls	r1, r2, #28
 8007552:	bf44      	itt	mi
 8007554:	232b      	movmi	r3, #43	; 0x2b
 8007556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800755a:	f89a 3000 	ldrb.w	r3, [sl]
 800755e:	2b2a      	cmp	r3, #42	; 0x2a
 8007560:	d015      	beq.n	800758e <_svfiprintf_r+0xf6>
 8007562:	9a07      	ldr	r2, [sp, #28]
 8007564:	4654      	mov	r4, sl
 8007566:	2000      	movs	r0, #0
 8007568:	f04f 0c0a 	mov.w	ip, #10
 800756c:	4621      	mov	r1, r4
 800756e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007572:	3b30      	subs	r3, #48	; 0x30
 8007574:	2b09      	cmp	r3, #9
 8007576:	d94d      	bls.n	8007614 <_svfiprintf_r+0x17c>
 8007578:	b1b0      	cbz	r0, 80075a8 <_svfiprintf_r+0x110>
 800757a:	9207      	str	r2, [sp, #28]
 800757c:	e014      	b.n	80075a8 <_svfiprintf_r+0x110>
 800757e:	eba0 0308 	sub.w	r3, r0, r8
 8007582:	fa09 f303 	lsl.w	r3, r9, r3
 8007586:	4313      	orrs	r3, r2
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	46a2      	mov	sl, r4
 800758c:	e7d2      	b.n	8007534 <_svfiprintf_r+0x9c>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	1d19      	adds	r1, r3, #4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	9103      	str	r1, [sp, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	bfbb      	ittet	lt
 800759a:	425b      	neglt	r3, r3
 800759c:	f042 0202 	orrlt.w	r2, r2, #2
 80075a0:	9307      	strge	r3, [sp, #28]
 80075a2:	9307      	strlt	r3, [sp, #28]
 80075a4:	bfb8      	it	lt
 80075a6:	9204      	strlt	r2, [sp, #16]
 80075a8:	7823      	ldrb	r3, [r4, #0]
 80075aa:	2b2e      	cmp	r3, #46	; 0x2e
 80075ac:	d10c      	bne.n	80075c8 <_svfiprintf_r+0x130>
 80075ae:	7863      	ldrb	r3, [r4, #1]
 80075b0:	2b2a      	cmp	r3, #42	; 0x2a
 80075b2:	d134      	bne.n	800761e <_svfiprintf_r+0x186>
 80075b4:	9b03      	ldr	r3, [sp, #12]
 80075b6:	1d1a      	adds	r2, r3, #4
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	9203      	str	r2, [sp, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bfb8      	it	lt
 80075c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80075c4:	3402      	adds	r4, #2
 80075c6:	9305      	str	r3, [sp, #20]
 80075c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007690 <_svfiprintf_r+0x1f8>
 80075cc:	7821      	ldrb	r1, [r4, #0]
 80075ce:	2203      	movs	r2, #3
 80075d0:	4650      	mov	r0, sl
 80075d2:	f7f8 fe05 	bl	80001e0 <memchr>
 80075d6:	b138      	cbz	r0, 80075e8 <_svfiprintf_r+0x150>
 80075d8:	9b04      	ldr	r3, [sp, #16]
 80075da:	eba0 000a 	sub.w	r0, r0, sl
 80075de:	2240      	movs	r2, #64	; 0x40
 80075e0:	4082      	lsls	r2, r0
 80075e2:	4313      	orrs	r3, r2
 80075e4:	3401      	adds	r4, #1
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ec:	4825      	ldr	r0, [pc, #148]	; (8007684 <_svfiprintf_r+0x1ec>)
 80075ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075f2:	2206      	movs	r2, #6
 80075f4:	f7f8 fdf4 	bl	80001e0 <memchr>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d038      	beq.n	800766e <_svfiprintf_r+0x1d6>
 80075fc:	4b22      	ldr	r3, [pc, #136]	; (8007688 <_svfiprintf_r+0x1f0>)
 80075fe:	bb1b      	cbnz	r3, 8007648 <_svfiprintf_r+0x1b0>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	3307      	adds	r3, #7
 8007604:	f023 0307 	bic.w	r3, r3, #7
 8007608:	3308      	adds	r3, #8
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760e:	4433      	add	r3, r6
 8007610:	9309      	str	r3, [sp, #36]	; 0x24
 8007612:	e768      	b.n	80074e6 <_svfiprintf_r+0x4e>
 8007614:	fb0c 3202 	mla	r2, ip, r2, r3
 8007618:	460c      	mov	r4, r1
 800761a:	2001      	movs	r0, #1
 800761c:	e7a6      	b.n	800756c <_svfiprintf_r+0xd4>
 800761e:	2300      	movs	r3, #0
 8007620:	3401      	adds	r4, #1
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	4619      	mov	r1, r3
 8007626:	f04f 0c0a 	mov.w	ip, #10
 800762a:	4620      	mov	r0, r4
 800762c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007630:	3a30      	subs	r2, #48	; 0x30
 8007632:	2a09      	cmp	r2, #9
 8007634:	d903      	bls.n	800763e <_svfiprintf_r+0x1a6>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0c6      	beq.n	80075c8 <_svfiprintf_r+0x130>
 800763a:	9105      	str	r1, [sp, #20]
 800763c:	e7c4      	b.n	80075c8 <_svfiprintf_r+0x130>
 800763e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007642:	4604      	mov	r4, r0
 8007644:	2301      	movs	r3, #1
 8007646:	e7f0      	b.n	800762a <_svfiprintf_r+0x192>
 8007648:	ab03      	add	r3, sp, #12
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	462a      	mov	r2, r5
 800764e:	4b0f      	ldr	r3, [pc, #60]	; (800768c <_svfiprintf_r+0x1f4>)
 8007650:	a904      	add	r1, sp, #16
 8007652:	4638      	mov	r0, r7
 8007654:	f7fd fe54 	bl	8005300 <_printf_float>
 8007658:	1c42      	adds	r2, r0, #1
 800765a:	4606      	mov	r6, r0
 800765c:	d1d6      	bne.n	800760c <_svfiprintf_r+0x174>
 800765e:	89ab      	ldrh	r3, [r5, #12]
 8007660:	065b      	lsls	r3, r3, #25
 8007662:	f53f af2d 	bmi.w	80074c0 <_svfiprintf_r+0x28>
 8007666:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007668:	b01d      	add	sp, #116	; 0x74
 800766a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766e:	ab03      	add	r3, sp, #12
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	462a      	mov	r2, r5
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <_svfiprintf_r+0x1f4>)
 8007676:	a904      	add	r1, sp, #16
 8007678:	4638      	mov	r0, r7
 800767a:	f7fe f8e5 	bl	8005848 <_printf_i>
 800767e:	e7eb      	b.n	8007658 <_svfiprintf_r+0x1c0>
 8007680:	08008154 	.word	0x08008154
 8007684:	0800815e 	.word	0x0800815e
 8007688:	08005301 	.word	0x08005301
 800768c:	080073e5 	.word	0x080073e5
 8007690:	0800815a 	.word	0x0800815a

08007694 <__sflush_r>:
 8007694:	898a      	ldrh	r2, [r1, #12]
 8007696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800769a:	4605      	mov	r5, r0
 800769c:	0710      	lsls	r0, r2, #28
 800769e:	460c      	mov	r4, r1
 80076a0:	d458      	bmi.n	8007754 <__sflush_r+0xc0>
 80076a2:	684b      	ldr	r3, [r1, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	dc05      	bgt.n	80076b4 <__sflush_r+0x20>
 80076a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dc02      	bgt.n	80076b4 <__sflush_r+0x20>
 80076ae:	2000      	movs	r0, #0
 80076b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076b6:	2e00      	cmp	r6, #0
 80076b8:	d0f9      	beq.n	80076ae <__sflush_r+0x1a>
 80076ba:	2300      	movs	r3, #0
 80076bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076c0:	682f      	ldr	r7, [r5, #0]
 80076c2:	6a21      	ldr	r1, [r4, #32]
 80076c4:	602b      	str	r3, [r5, #0]
 80076c6:	d032      	beq.n	800772e <__sflush_r+0x9a>
 80076c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	075a      	lsls	r2, r3, #29
 80076ce:	d505      	bpl.n	80076dc <__sflush_r+0x48>
 80076d0:	6863      	ldr	r3, [r4, #4]
 80076d2:	1ac0      	subs	r0, r0, r3
 80076d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076d6:	b10b      	cbz	r3, 80076dc <__sflush_r+0x48>
 80076d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076da:	1ac0      	subs	r0, r0, r3
 80076dc:	2300      	movs	r3, #0
 80076de:	4602      	mov	r2, r0
 80076e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076e2:	6a21      	ldr	r1, [r4, #32]
 80076e4:	4628      	mov	r0, r5
 80076e6:	47b0      	blx	r6
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	d106      	bne.n	80076fc <__sflush_r+0x68>
 80076ee:	6829      	ldr	r1, [r5, #0]
 80076f0:	291d      	cmp	r1, #29
 80076f2:	d82b      	bhi.n	800774c <__sflush_r+0xb8>
 80076f4:	4a29      	ldr	r2, [pc, #164]	; (800779c <__sflush_r+0x108>)
 80076f6:	410a      	asrs	r2, r1
 80076f8:	07d6      	lsls	r6, r2, #31
 80076fa:	d427      	bmi.n	800774c <__sflush_r+0xb8>
 80076fc:	2200      	movs	r2, #0
 80076fe:	6062      	str	r2, [r4, #4]
 8007700:	04d9      	lsls	r1, r3, #19
 8007702:	6922      	ldr	r2, [r4, #16]
 8007704:	6022      	str	r2, [r4, #0]
 8007706:	d504      	bpl.n	8007712 <__sflush_r+0x7e>
 8007708:	1c42      	adds	r2, r0, #1
 800770a:	d101      	bne.n	8007710 <__sflush_r+0x7c>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	b903      	cbnz	r3, 8007712 <__sflush_r+0x7e>
 8007710:	6560      	str	r0, [r4, #84]	; 0x54
 8007712:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007714:	602f      	str	r7, [r5, #0]
 8007716:	2900      	cmp	r1, #0
 8007718:	d0c9      	beq.n	80076ae <__sflush_r+0x1a>
 800771a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800771e:	4299      	cmp	r1, r3
 8007720:	d002      	beq.n	8007728 <__sflush_r+0x94>
 8007722:	4628      	mov	r0, r5
 8007724:	f7ff f9e2 	bl	8006aec <_free_r>
 8007728:	2000      	movs	r0, #0
 800772a:	6360      	str	r0, [r4, #52]	; 0x34
 800772c:	e7c0      	b.n	80076b0 <__sflush_r+0x1c>
 800772e:	2301      	movs	r3, #1
 8007730:	4628      	mov	r0, r5
 8007732:	47b0      	blx	r6
 8007734:	1c41      	adds	r1, r0, #1
 8007736:	d1c8      	bne.n	80076ca <__sflush_r+0x36>
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0c5      	beq.n	80076ca <__sflush_r+0x36>
 800773e:	2b1d      	cmp	r3, #29
 8007740:	d001      	beq.n	8007746 <__sflush_r+0xb2>
 8007742:	2b16      	cmp	r3, #22
 8007744:	d101      	bne.n	800774a <__sflush_r+0xb6>
 8007746:	602f      	str	r7, [r5, #0]
 8007748:	e7b1      	b.n	80076ae <__sflush_r+0x1a>
 800774a:	89a3      	ldrh	r3, [r4, #12]
 800774c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007750:	81a3      	strh	r3, [r4, #12]
 8007752:	e7ad      	b.n	80076b0 <__sflush_r+0x1c>
 8007754:	690f      	ldr	r7, [r1, #16]
 8007756:	2f00      	cmp	r7, #0
 8007758:	d0a9      	beq.n	80076ae <__sflush_r+0x1a>
 800775a:	0793      	lsls	r3, r2, #30
 800775c:	680e      	ldr	r6, [r1, #0]
 800775e:	bf08      	it	eq
 8007760:	694b      	ldreq	r3, [r1, #20]
 8007762:	600f      	str	r7, [r1, #0]
 8007764:	bf18      	it	ne
 8007766:	2300      	movne	r3, #0
 8007768:	eba6 0807 	sub.w	r8, r6, r7
 800776c:	608b      	str	r3, [r1, #8]
 800776e:	f1b8 0f00 	cmp.w	r8, #0
 8007772:	dd9c      	ble.n	80076ae <__sflush_r+0x1a>
 8007774:	6a21      	ldr	r1, [r4, #32]
 8007776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007778:	4643      	mov	r3, r8
 800777a:	463a      	mov	r2, r7
 800777c:	4628      	mov	r0, r5
 800777e:	47b0      	blx	r6
 8007780:	2800      	cmp	r0, #0
 8007782:	dc06      	bgt.n	8007792 <__sflush_r+0xfe>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e78e      	b.n	80076b0 <__sflush_r+0x1c>
 8007792:	4407      	add	r7, r0
 8007794:	eba8 0800 	sub.w	r8, r8, r0
 8007798:	e7e9      	b.n	800776e <__sflush_r+0xda>
 800779a:	bf00      	nop
 800779c:	dfbffffe 	.word	0xdfbffffe

080077a0 <_fflush_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	690b      	ldr	r3, [r1, #16]
 80077a4:	4605      	mov	r5, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	b913      	cbnz	r3, 80077b0 <_fflush_r+0x10>
 80077aa:	2500      	movs	r5, #0
 80077ac:	4628      	mov	r0, r5
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	b118      	cbz	r0, 80077ba <_fflush_r+0x1a>
 80077b2:	6a03      	ldr	r3, [r0, #32]
 80077b4:	b90b      	cbnz	r3, 80077ba <_fflush_r+0x1a>
 80077b6:	f7fe f9f5 	bl	8005ba4 <__sinit>
 80077ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0f3      	beq.n	80077aa <_fflush_r+0xa>
 80077c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077c4:	07d0      	lsls	r0, r2, #31
 80077c6:	d404      	bmi.n	80077d2 <_fflush_r+0x32>
 80077c8:	0599      	lsls	r1, r3, #22
 80077ca:	d402      	bmi.n	80077d2 <_fflush_r+0x32>
 80077cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ce:	f7fe fb0e 	bl	8005dee <__retarget_lock_acquire_recursive>
 80077d2:	4628      	mov	r0, r5
 80077d4:	4621      	mov	r1, r4
 80077d6:	f7ff ff5d 	bl	8007694 <__sflush_r>
 80077da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077dc:	07da      	lsls	r2, r3, #31
 80077de:	4605      	mov	r5, r0
 80077e0:	d4e4      	bmi.n	80077ac <_fflush_r+0xc>
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	059b      	lsls	r3, r3, #22
 80077e6:	d4e1      	bmi.n	80077ac <_fflush_r+0xc>
 80077e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ea:	f7fe fb01 	bl	8005df0 <__retarget_lock_release_recursive>
 80077ee:	e7dd      	b.n	80077ac <_fflush_r+0xc>

080077f0 <memmove>:
 80077f0:	4288      	cmp	r0, r1
 80077f2:	b510      	push	{r4, lr}
 80077f4:	eb01 0402 	add.w	r4, r1, r2
 80077f8:	d902      	bls.n	8007800 <memmove+0x10>
 80077fa:	4284      	cmp	r4, r0
 80077fc:	4623      	mov	r3, r4
 80077fe:	d807      	bhi.n	8007810 <memmove+0x20>
 8007800:	1e43      	subs	r3, r0, #1
 8007802:	42a1      	cmp	r1, r4
 8007804:	d008      	beq.n	8007818 <memmove+0x28>
 8007806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800780a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800780e:	e7f8      	b.n	8007802 <memmove+0x12>
 8007810:	4402      	add	r2, r0
 8007812:	4601      	mov	r1, r0
 8007814:	428a      	cmp	r2, r1
 8007816:	d100      	bne.n	800781a <memmove+0x2a>
 8007818:	bd10      	pop	{r4, pc}
 800781a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800781e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007822:	e7f7      	b.n	8007814 <memmove+0x24>

08007824 <_sbrk_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d06      	ldr	r5, [pc, #24]	; (8007840 <_sbrk_r+0x1c>)
 8007828:	2300      	movs	r3, #0
 800782a:	4604      	mov	r4, r0
 800782c:	4608      	mov	r0, r1
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	f7fa feb8 	bl	80025a4 <_sbrk>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_sbrk_r+0x1a>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_sbrk_r+0x1a>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	200004a4 	.word	0x200004a4

08007844 <memcpy>:
 8007844:	440a      	add	r2, r1
 8007846:	4291      	cmp	r1, r2
 8007848:	f100 33ff 	add.w	r3, r0, #4294967295
 800784c:	d100      	bne.n	8007850 <memcpy+0xc>
 800784e:	4770      	bx	lr
 8007850:	b510      	push	{r4, lr}
 8007852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800785a:	4291      	cmp	r1, r2
 800785c:	d1f9      	bne.n	8007852 <memcpy+0xe>
 800785e:	bd10      	pop	{r4, pc}

08007860 <__assert_func>:
 8007860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007862:	4614      	mov	r4, r2
 8007864:	461a      	mov	r2, r3
 8007866:	4b09      	ldr	r3, [pc, #36]	; (800788c <__assert_func+0x2c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4605      	mov	r5, r0
 800786c:	68d8      	ldr	r0, [r3, #12]
 800786e:	b14c      	cbz	r4, 8007884 <__assert_func+0x24>
 8007870:	4b07      	ldr	r3, [pc, #28]	; (8007890 <__assert_func+0x30>)
 8007872:	9100      	str	r1, [sp, #0]
 8007874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007878:	4906      	ldr	r1, [pc, #24]	; (8007894 <__assert_func+0x34>)
 800787a:	462b      	mov	r3, r5
 800787c:	f000 f872 	bl	8007964 <fiprintf>
 8007880:	f000 f882 	bl	8007988 <abort>
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <__assert_func+0x38>)
 8007886:	461c      	mov	r4, r3
 8007888:	e7f3      	b.n	8007872 <__assert_func+0x12>
 800788a:	bf00      	nop
 800788c:	20000080 	.word	0x20000080
 8007890:	0800816f 	.word	0x0800816f
 8007894:	0800817c 	.word	0x0800817c
 8007898:	080081aa 	.word	0x080081aa

0800789c <_calloc_r>:
 800789c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800789e:	fba1 2402 	umull	r2, r4, r1, r2
 80078a2:	b94c      	cbnz	r4, 80078b8 <_calloc_r+0x1c>
 80078a4:	4611      	mov	r1, r2
 80078a6:	9201      	str	r2, [sp, #4]
 80078a8:	f7ff f994 	bl	8006bd4 <_malloc_r>
 80078ac:	9a01      	ldr	r2, [sp, #4]
 80078ae:	4605      	mov	r5, r0
 80078b0:	b930      	cbnz	r0, 80078c0 <_calloc_r+0x24>
 80078b2:	4628      	mov	r0, r5
 80078b4:	b003      	add	sp, #12
 80078b6:	bd30      	pop	{r4, r5, pc}
 80078b8:	220c      	movs	r2, #12
 80078ba:	6002      	str	r2, [r0, #0]
 80078bc:	2500      	movs	r5, #0
 80078be:	e7f8      	b.n	80078b2 <_calloc_r+0x16>
 80078c0:	4621      	mov	r1, r4
 80078c2:	f7fe fa08 	bl	8005cd6 <memset>
 80078c6:	e7f4      	b.n	80078b2 <_calloc_r+0x16>

080078c8 <__ascii_mbtowc>:
 80078c8:	b082      	sub	sp, #8
 80078ca:	b901      	cbnz	r1, 80078ce <__ascii_mbtowc+0x6>
 80078cc:	a901      	add	r1, sp, #4
 80078ce:	b142      	cbz	r2, 80078e2 <__ascii_mbtowc+0x1a>
 80078d0:	b14b      	cbz	r3, 80078e6 <__ascii_mbtowc+0x1e>
 80078d2:	7813      	ldrb	r3, [r2, #0]
 80078d4:	600b      	str	r3, [r1, #0]
 80078d6:	7812      	ldrb	r2, [r2, #0]
 80078d8:	1e10      	subs	r0, r2, #0
 80078da:	bf18      	it	ne
 80078dc:	2001      	movne	r0, #1
 80078de:	b002      	add	sp, #8
 80078e0:	4770      	bx	lr
 80078e2:	4610      	mov	r0, r2
 80078e4:	e7fb      	b.n	80078de <__ascii_mbtowc+0x16>
 80078e6:	f06f 0001 	mvn.w	r0, #1
 80078ea:	e7f8      	b.n	80078de <__ascii_mbtowc+0x16>

080078ec <_realloc_r>:
 80078ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f0:	4680      	mov	r8, r0
 80078f2:	4614      	mov	r4, r2
 80078f4:	460e      	mov	r6, r1
 80078f6:	b921      	cbnz	r1, 8007902 <_realloc_r+0x16>
 80078f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078fc:	4611      	mov	r1, r2
 80078fe:	f7ff b969 	b.w	8006bd4 <_malloc_r>
 8007902:	b92a      	cbnz	r2, 8007910 <_realloc_r+0x24>
 8007904:	f7ff f8f2 	bl	8006aec <_free_r>
 8007908:	4625      	mov	r5, r4
 800790a:	4628      	mov	r0, r5
 800790c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007910:	f000 f841 	bl	8007996 <_malloc_usable_size_r>
 8007914:	4284      	cmp	r4, r0
 8007916:	4607      	mov	r7, r0
 8007918:	d802      	bhi.n	8007920 <_realloc_r+0x34>
 800791a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800791e:	d812      	bhi.n	8007946 <_realloc_r+0x5a>
 8007920:	4621      	mov	r1, r4
 8007922:	4640      	mov	r0, r8
 8007924:	f7ff f956 	bl	8006bd4 <_malloc_r>
 8007928:	4605      	mov	r5, r0
 800792a:	2800      	cmp	r0, #0
 800792c:	d0ed      	beq.n	800790a <_realloc_r+0x1e>
 800792e:	42bc      	cmp	r4, r7
 8007930:	4622      	mov	r2, r4
 8007932:	4631      	mov	r1, r6
 8007934:	bf28      	it	cs
 8007936:	463a      	movcs	r2, r7
 8007938:	f7ff ff84 	bl	8007844 <memcpy>
 800793c:	4631      	mov	r1, r6
 800793e:	4640      	mov	r0, r8
 8007940:	f7ff f8d4 	bl	8006aec <_free_r>
 8007944:	e7e1      	b.n	800790a <_realloc_r+0x1e>
 8007946:	4635      	mov	r5, r6
 8007948:	e7df      	b.n	800790a <_realloc_r+0x1e>

0800794a <__ascii_wctomb>:
 800794a:	b149      	cbz	r1, 8007960 <__ascii_wctomb+0x16>
 800794c:	2aff      	cmp	r2, #255	; 0xff
 800794e:	bf85      	ittet	hi
 8007950:	238a      	movhi	r3, #138	; 0x8a
 8007952:	6003      	strhi	r3, [r0, #0]
 8007954:	700a      	strbls	r2, [r1, #0]
 8007956:	f04f 30ff 	movhi.w	r0, #4294967295
 800795a:	bf98      	it	ls
 800795c:	2001      	movls	r0, #1
 800795e:	4770      	bx	lr
 8007960:	4608      	mov	r0, r1
 8007962:	4770      	bx	lr

08007964 <fiprintf>:
 8007964:	b40e      	push	{r1, r2, r3}
 8007966:	b503      	push	{r0, r1, lr}
 8007968:	4601      	mov	r1, r0
 800796a:	ab03      	add	r3, sp, #12
 800796c:	4805      	ldr	r0, [pc, #20]	; (8007984 <fiprintf+0x20>)
 800796e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007972:	6800      	ldr	r0, [r0, #0]
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	f000 f83f 	bl	80079f8 <_vfiprintf_r>
 800797a:	b002      	add	sp, #8
 800797c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007980:	b003      	add	sp, #12
 8007982:	4770      	bx	lr
 8007984:	20000080 	.word	0x20000080

08007988 <abort>:
 8007988:	b508      	push	{r3, lr}
 800798a:	2006      	movs	r0, #6
 800798c:	f000 fa0c 	bl	8007da8 <raise>
 8007990:	2001      	movs	r0, #1
 8007992:	f7fa fd8f 	bl	80024b4 <_exit>

08007996 <_malloc_usable_size_r>:
 8007996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800799a:	1f18      	subs	r0, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	bfbc      	itt	lt
 80079a0:	580b      	ldrlt	r3, [r1, r0]
 80079a2:	18c0      	addlt	r0, r0, r3
 80079a4:	4770      	bx	lr

080079a6 <__sfputc_r>:
 80079a6:	6893      	ldr	r3, [r2, #8]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	b410      	push	{r4}
 80079ae:	6093      	str	r3, [r2, #8]
 80079b0:	da08      	bge.n	80079c4 <__sfputc_r+0x1e>
 80079b2:	6994      	ldr	r4, [r2, #24]
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	db01      	blt.n	80079bc <__sfputc_r+0x16>
 80079b8:	290a      	cmp	r1, #10
 80079ba:	d103      	bne.n	80079c4 <__sfputc_r+0x1e>
 80079bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079c0:	f000 b934 	b.w	8007c2c <__swbuf_r>
 80079c4:	6813      	ldr	r3, [r2, #0]
 80079c6:	1c58      	adds	r0, r3, #1
 80079c8:	6010      	str	r0, [r2, #0]
 80079ca:	7019      	strb	r1, [r3, #0]
 80079cc:	4608      	mov	r0, r1
 80079ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <__sfputs_r>:
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	4606      	mov	r6, r0
 80079d8:	460f      	mov	r7, r1
 80079da:	4614      	mov	r4, r2
 80079dc:	18d5      	adds	r5, r2, r3
 80079de:	42ac      	cmp	r4, r5
 80079e0:	d101      	bne.n	80079e6 <__sfputs_r+0x12>
 80079e2:	2000      	movs	r0, #0
 80079e4:	e007      	b.n	80079f6 <__sfputs_r+0x22>
 80079e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ea:	463a      	mov	r2, r7
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7ff ffda 	bl	80079a6 <__sfputc_r>
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	d1f3      	bne.n	80079de <__sfputs_r+0xa>
 80079f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079f8 <_vfiprintf_r>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	460d      	mov	r5, r1
 80079fe:	b09d      	sub	sp, #116	; 0x74
 8007a00:	4614      	mov	r4, r2
 8007a02:	4698      	mov	r8, r3
 8007a04:	4606      	mov	r6, r0
 8007a06:	b118      	cbz	r0, 8007a10 <_vfiprintf_r+0x18>
 8007a08:	6a03      	ldr	r3, [r0, #32]
 8007a0a:	b90b      	cbnz	r3, 8007a10 <_vfiprintf_r+0x18>
 8007a0c:	f7fe f8ca 	bl	8005ba4 <__sinit>
 8007a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a12:	07d9      	lsls	r1, r3, #31
 8007a14:	d405      	bmi.n	8007a22 <_vfiprintf_r+0x2a>
 8007a16:	89ab      	ldrh	r3, [r5, #12]
 8007a18:	059a      	lsls	r2, r3, #22
 8007a1a:	d402      	bmi.n	8007a22 <_vfiprintf_r+0x2a>
 8007a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a1e:	f7fe f9e6 	bl	8005dee <__retarget_lock_acquire_recursive>
 8007a22:	89ab      	ldrh	r3, [r5, #12]
 8007a24:	071b      	lsls	r3, r3, #28
 8007a26:	d501      	bpl.n	8007a2c <_vfiprintf_r+0x34>
 8007a28:	692b      	ldr	r3, [r5, #16]
 8007a2a:	b99b      	cbnz	r3, 8007a54 <_vfiprintf_r+0x5c>
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f000 f93a 	bl	8007ca8 <__swsetup_r>
 8007a34:	b170      	cbz	r0, 8007a54 <_vfiprintf_r+0x5c>
 8007a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a38:	07dc      	lsls	r4, r3, #31
 8007a3a:	d504      	bpl.n	8007a46 <_vfiprintf_r+0x4e>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	b01d      	add	sp, #116	; 0x74
 8007a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a46:	89ab      	ldrh	r3, [r5, #12]
 8007a48:	0598      	lsls	r0, r3, #22
 8007a4a:	d4f7      	bmi.n	8007a3c <_vfiprintf_r+0x44>
 8007a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a4e:	f7fe f9cf 	bl	8005df0 <__retarget_lock_release_recursive>
 8007a52:	e7f3      	b.n	8007a3c <_vfiprintf_r+0x44>
 8007a54:	2300      	movs	r3, #0
 8007a56:	9309      	str	r3, [sp, #36]	; 0x24
 8007a58:	2320      	movs	r3, #32
 8007a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a62:	2330      	movs	r3, #48	; 0x30
 8007a64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007c18 <_vfiprintf_r+0x220>
 8007a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a6c:	f04f 0901 	mov.w	r9, #1
 8007a70:	4623      	mov	r3, r4
 8007a72:	469a      	mov	sl, r3
 8007a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a78:	b10a      	cbz	r2, 8007a7e <_vfiprintf_r+0x86>
 8007a7a:	2a25      	cmp	r2, #37	; 0x25
 8007a7c:	d1f9      	bne.n	8007a72 <_vfiprintf_r+0x7a>
 8007a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a82:	d00b      	beq.n	8007a9c <_vfiprintf_r+0xa4>
 8007a84:	465b      	mov	r3, fp
 8007a86:	4622      	mov	r2, r4
 8007a88:	4629      	mov	r1, r5
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f7ff ffa2 	bl	80079d4 <__sfputs_r>
 8007a90:	3001      	adds	r0, #1
 8007a92:	f000 80a9 	beq.w	8007be8 <_vfiprintf_r+0x1f0>
 8007a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a98:	445a      	add	r2, fp
 8007a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80a1 	beq.w	8007be8 <_vfiprintf_r+0x1f0>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ab0:	f10a 0a01 	add.w	sl, sl, #1
 8007ab4:	9304      	str	r3, [sp, #16]
 8007ab6:	9307      	str	r3, [sp, #28]
 8007ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007abc:	931a      	str	r3, [sp, #104]	; 0x68
 8007abe:	4654      	mov	r4, sl
 8007ac0:	2205      	movs	r2, #5
 8007ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac6:	4854      	ldr	r0, [pc, #336]	; (8007c18 <_vfiprintf_r+0x220>)
 8007ac8:	f7f8 fb8a 	bl	80001e0 <memchr>
 8007acc:	9a04      	ldr	r2, [sp, #16]
 8007ace:	b9d8      	cbnz	r0, 8007b08 <_vfiprintf_r+0x110>
 8007ad0:	06d1      	lsls	r1, r2, #27
 8007ad2:	bf44      	itt	mi
 8007ad4:	2320      	movmi	r3, #32
 8007ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ada:	0713      	lsls	r3, r2, #28
 8007adc:	bf44      	itt	mi
 8007ade:	232b      	movmi	r3, #43	; 0x2b
 8007ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aea:	d015      	beq.n	8007b18 <_vfiprintf_r+0x120>
 8007aec:	9a07      	ldr	r2, [sp, #28]
 8007aee:	4654      	mov	r4, sl
 8007af0:	2000      	movs	r0, #0
 8007af2:	f04f 0c0a 	mov.w	ip, #10
 8007af6:	4621      	mov	r1, r4
 8007af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007afc:	3b30      	subs	r3, #48	; 0x30
 8007afe:	2b09      	cmp	r3, #9
 8007b00:	d94d      	bls.n	8007b9e <_vfiprintf_r+0x1a6>
 8007b02:	b1b0      	cbz	r0, 8007b32 <_vfiprintf_r+0x13a>
 8007b04:	9207      	str	r2, [sp, #28]
 8007b06:	e014      	b.n	8007b32 <_vfiprintf_r+0x13a>
 8007b08:	eba0 0308 	sub.w	r3, r0, r8
 8007b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b10:	4313      	orrs	r3, r2
 8007b12:	9304      	str	r3, [sp, #16]
 8007b14:	46a2      	mov	sl, r4
 8007b16:	e7d2      	b.n	8007abe <_vfiprintf_r+0xc6>
 8007b18:	9b03      	ldr	r3, [sp, #12]
 8007b1a:	1d19      	adds	r1, r3, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	9103      	str	r1, [sp, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bfbb      	ittet	lt
 8007b24:	425b      	neglt	r3, r3
 8007b26:	f042 0202 	orrlt.w	r2, r2, #2
 8007b2a:	9307      	strge	r3, [sp, #28]
 8007b2c:	9307      	strlt	r3, [sp, #28]
 8007b2e:	bfb8      	it	lt
 8007b30:	9204      	strlt	r2, [sp, #16]
 8007b32:	7823      	ldrb	r3, [r4, #0]
 8007b34:	2b2e      	cmp	r3, #46	; 0x2e
 8007b36:	d10c      	bne.n	8007b52 <_vfiprintf_r+0x15a>
 8007b38:	7863      	ldrb	r3, [r4, #1]
 8007b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b3c:	d134      	bne.n	8007ba8 <_vfiprintf_r+0x1b0>
 8007b3e:	9b03      	ldr	r3, [sp, #12]
 8007b40:	1d1a      	adds	r2, r3, #4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	9203      	str	r2, [sp, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bfb8      	it	lt
 8007b4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b4e:	3402      	adds	r4, #2
 8007b50:	9305      	str	r3, [sp, #20]
 8007b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c28 <_vfiprintf_r+0x230>
 8007b56:	7821      	ldrb	r1, [r4, #0]
 8007b58:	2203      	movs	r2, #3
 8007b5a:	4650      	mov	r0, sl
 8007b5c:	f7f8 fb40 	bl	80001e0 <memchr>
 8007b60:	b138      	cbz	r0, 8007b72 <_vfiprintf_r+0x17a>
 8007b62:	9b04      	ldr	r3, [sp, #16]
 8007b64:	eba0 000a 	sub.w	r0, r0, sl
 8007b68:	2240      	movs	r2, #64	; 0x40
 8007b6a:	4082      	lsls	r2, r0
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	3401      	adds	r4, #1
 8007b70:	9304      	str	r3, [sp, #16]
 8007b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b76:	4829      	ldr	r0, [pc, #164]	; (8007c1c <_vfiprintf_r+0x224>)
 8007b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b7c:	2206      	movs	r2, #6
 8007b7e:	f7f8 fb2f 	bl	80001e0 <memchr>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d03f      	beq.n	8007c06 <_vfiprintf_r+0x20e>
 8007b86:	4b26      	ldr	r3, [pc, #152]	; (8007c20 <_vfiprintf_r+0x228>)
 8007b88:	bb1b      	cbnz	r3, 8007bd2 <_vfiprintf_r+0x1da>
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	3307      	adds	r3, #7
 8007b8e:	f023 0307 	bic.w	r3, r3, #7
 8007b92:	3308      	adds	r3, #8
 8007b94:	9303      	str	r3, [sp, #12]
 8007b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b98:	443b      	add	r3, r7
 8007b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b9c:	e768      	b.n	8007a70 <_vfiprintf_r+0x78>
 8007b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	2001      	movs	r0, #1
 8007ba6:	e7a6      	b.n	8007af6 <_vfiprintf_r+0xfe>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	3401      	adds	r4, #1
 8007bac:	9305      	str	r3, [sp, #20]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	f04f 0c0a 	mov.w	ip, #10
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bba:	3a30      	subs	r2, #48	; 0x30
 8007bbc:	2a09      	cmp	r2, #9
 8007bbe:	d903      	bls.n	8007bc8 <_vfiprintf_r+0x1d0>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0c6      	beq.n	8007b52 <_vfiprintf_r+0x15a>
 8007bc4:	9105      	str	r1, [sp, #20]
 8007bc6:	e7c4      	b.n	8007b52 <_vfiprintf_r+0x15a>
 8007bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bcc:	4604      	mov	r4, r0
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e7f0      	b.n	8007bb4 <_vfiprintf_r+0x1bc>
 8007bd2:	ab03      	add	r3, sp, #12
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	462a      	mov	r2, r5
 8007bd8:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <_vfiprintf_r+0x22c>)
 8007bda:	a904      	add	r1, sp, #16
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f7fd fb8f 	bl	8005300 <_printf_float>
 8007be2:	4607      	mov	r7, r0
 8007be4:	1c78      	adds	r0, r7, #1
 8007be6:	d1d6      	bne.n	8007b96 <_vfiprintf_r+0x19e>
 8007be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bea:	07d9      	lsls	r1, r3, #31
 8007bec:	d405      	bmi.n	8007bfa <_vfiprintf_r+0x202>
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	059a      	lsls	r2, r3, #22
 8007bf2:	d402      	bmi.n	8007bfa <_vfiprintf_r+0x202>
 8007bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bf6:	f7fe f8fb 	bl	8005df0 <__retarget_lock_release_recursive>
 8007bfa:	89ab      	ldrh	r3, [r5, #12]
 8007bfc:	065b      	lsls	r3, r3, #25
 8007bfe:	f53f af1d 	bmi.w	8007a3c <_vfiprintf_r+0x44>
 8007c02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c04:	e71c      	b.n	8007a40 <_vfiprintf_r+0x48>
 8007c06:	ab03      	add	r3, sp, #12
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	462a      	mov	r2, r5
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <_vfiprintf_r+0x22c>)
 8007c0e:	a904      	add	r1, sp, #16
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7fd fe19 	bl	8005848 <_printf_i>
 8007c16:	e7e4      	b.n	8007be2 <_vfiprintf_r+0x1ea>
 8007c18:	08008154 	.word	0x08008154
 8007c1c:	0800815e 	.word	0x0800815e
 8007c20:	08005301 	.word	0x08005301
 8007c24:	080079d5 	.word	0x080079d5
 8007c28:	0800815a 	.word	0x0800815a

08007c2c <__swbuf_r>:
 8007c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2e:	460e      	mov	r6, r1
 8007c30:	4614      	mov	r4, r2
 8007c32:	4605      	mov	r5, r0
 8007c34:	b118      	cbz	r0, 8007c3e <__swbuf_r+0x12>
 8007c36:	6a03      	ldr	r3, [r0, #32]
 8007c38:	b90b      	cbnz	r3, 8007c3e <__swbuf_r+0x12>
 8007c3a:	f7fd ffb3 	bl	8005ba4 <__sinit>
 8007c3e:	69a3      	ldr	r3, [r4, #24]
 8007c40:	60a3      	str	r3, [r4, #8]
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	071a      	lsls	r2, r3, #28
 8007c46:	d525      	bpl.n	8007c94 <__swbuf_r+0x68>
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	b31b      	cbz	r3, 8007c94 <__swbuf_r+0x68>
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	6922      	ldr	r2, [r4, #16]
 8007c50:	1a98      	subs	r0, r3, r2
 8007c52:	6963      	ldr	r3, [r4, #20]
 8007c54:	b2f6      	uxtb	r6, r6
 8007c56:	4283      	cmp	r3, r0
 8007c58:	4637      	mov	r7, r6
 8007c5a:	dc04      	bgt.n	8007c66 <__swbuf_r+0x3a>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f7ff fd9e 	bl	80077a0 <_fflush_r>
 8007c64:	b9e0      	cbnz	r0, 8007ca0 <__swbuf_r+0x74>
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	60a3      	str	r3, [r4, #8]
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	6022      	str	r2, [r4, #0]
 8007c72:	701e      	strb	r6, [r3, #0]
 8007c74:	6962      	ldr	r2, [r4, #20]
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d004      	beq.n	8007c86 <__swbuf_r+0x5a>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	07db      	lsls	r3, r3, #31
 8007c80:	d506      	bpl.n	8007c90 <__swbuf_r+0x64>
 8007c82:	2e0a      	cmp	r6, #10
 8007c84:	d104      	bne.n	8007c90 <__swbuf_r+0x64>
 8007c86:	4621      	mov	r1, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f7ff fd89 	bl	80077a0 <_fflush_r>
 8007c8e:	b938      	cbnz	r0, 8007ca0 <__swbuf_r+0x74>
 8007c90:	4638      	mov	r0, r7
 8007c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c94:	4621      	mov	r1, r4
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 f806 	bl	8007ca8 <__swsetup_r>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d0d5      	beq.n	8007c4c <__swbuf_r+0x20>
 8007ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ca4:	e7f4      	b.n	8007c90 <__swbuf_r+0x64>
	...

08007ca8 <__swsetup_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4b2a      	ldr	r3, [pc, #168]	; (8007d54 <__swsetup_r+0xac>)
 8007cac:	4605      	mov	r5, r0
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	b118      	cbz	r0, 8007cbc <__swsetup_r+0x14>
 8007cb4:	6a03      	ldr	r3, [r0, #32]
 8007cb6:	b90b      	cbnz	r3, 8007cbc <__swsetup_r+0x14>
 8007cb8:	f7fd ff74 	bl	8005ba4 <__sinit>
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cc2:	0718      	lsls	r0, r3, #28
 8007cc4:	d422      	bmi.n	8007d0c <__swsetup_r+0x64>
 8007cc6:	06d9      	lsls	r1, r3, #27
 8007cc8:	d407      	bmi.n	8007cda <__swsetup_r+0x32>
 8007cca:	2309      	movs	r3, #9
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cd2:	81a3      	strh	r3, [r4, #12]
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	e034      	b.n	8007d44 <__swsetup_r+0x9c>
 8007cda:	0758      	lsls	r0, r3, #29
 8007cdc:	d512      	bpl.n	8007d04 <__swsetup_r+0x5c>
 8007cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ce0:	b141      	cbz	r1, 8007cf4 <__swsetup_r+0x4c>
 8007ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce6:	4299      	cmp	r1, r3
 8007ce8:	d002      	beq.n	8007cf0 <__swsetup_r+0x48>
 8007cea:	4628      	mov	r0, r5
 8007cec:	f7fe fefe 	bl	8006aec <_free_r>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	6363      	str	r3, [r4, #52]	; 0x34
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f043 0308 	orr.w	r3, r3, #8
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	b94b      	cbnz	r3, 8007d24 <__swsetup_r+0x7c>
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d1a:	d003      	beq.n	8007d24 <__swsetup_r+0x7c>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f000 f884 	bl	8007e2c <__smakebuf_r>
 8007d24:	89a0      	ldrh	r0, [r4, #12]
 8007d26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d2a:	f010 0301 	ands.w	r3, r0, #1
 8007d2e:	d00a      	beq.n	8007d46 <__swsetup_r+0x9e>
 8007d30:	2300      	movs	r3, #0
 8007d32:	60a3      	str	r3, [r4, #8]
 8007d34:	6963      	ldr	r3, [r4, #20]
 8007d36:	425b      	negs	r3, r3
 8007d38:	61a3      	str	r3, [r4, #24]
 8007d3a:	6923      	ldr	r3, [r4, #16]
 8007d3c:	b943      	cbnz	r3, 8007d50 <__swsetup_r+0xa8>
 8007d3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d42:	d1c4      	bne.n	8007cce <__swsetup_r+0x26>
 8007d44:	bd38      	pop	{r3, r4, r5, pc}
 8007d46:	0781      	lsls	r1, r0, #30
 8007d48:	bf58      	it	pl
 8007d4a:	6963      	ldrpl	r3, [r4, #20]
 8007d4c:	60a3      	str	r3, [r4, #8]
 8007d4e:	e7f4      	b.n	8007d3a <__swsetup_r+0x92>
 8007d50:	2000      	movs	r0, #0
 8007d52:	e7f7      	b.n	8007d44 <__swsetup_r+0x9c>
 8007d54:	20000080 	.word	0x20000080

08007d58 <_raise_r>:
 8007d58:	291f      	cmp	r1, #31
 8007d5a:	b538      	push	{r3, r4, r5, lr}
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	460d      	mov	r5, r1
 8007d60:	d904      	bls.n	8007d6c <_raise_r+0x14>
 8007d62:	2316      	movs	r3, #22
 8007d64:	6003      	str	r3, [r0, #0]
 8007d66:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d6e:	b112      	cbz	r2, 8007d76 <_raise_r+0x1e>
 8007d70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d74:	b94b      	cbnz	r3, 8007d8a <_raise_r+0x32>
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 f830 	bl	8007ddc <_getpid_r>
 8007d7c:	462a      	mov	r2, r5
 8007d7e:	4601      	mov	r1, r0
 8007d80:	4620      	mov	r0, r4
 8007d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d86:	f000 b817 	b.w	8007db8 <_kill_r>
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d00a      	beq.n	8007da4 <_raise_r+0x4c>
 8007d8e:	1c59      	adds	r1, r3, #1
 8007d90:	d103      	bne.n	8007d9a <_raise_r+0x42>
 8007d92:	2316      	movs	r3, #22
 8007d94:	6003      	str	r3, [r0, #0]
 8007d96:	2001      	movs	r0, #1
 8007d98:	e7e7      	b.n	8007d6a <_raise_r+0x12>
 8007d9a:	2400      	movs	r4, #0
 8007d9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007da0:	4628      	mov	r0, r5
 8007da2:	4798      	blx	r3
 8007da4:	2000      	movs	r0, #0
 8007da6:	e7e0      	b.n	8007d6a <_raise_r+0x12>

08007da8 <raise>:
 8007da8:	4b02      	ldr	r3, [pc, #8]	; (8007db4 <raise+0xc>)
 8007daa:	4601      	mov	r1, r0
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	f7ff bfd3 	b.w	8007d58 <_raise_r>
 8007db2:	bf00      	nop
 8007db4:	20000080 	.word	0x20000080

08007db8 <_kill_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d07      	ldr	r5, [pc, #28]	; (8007dd8 <_kill_r+0x20>)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	f7fa fb65 	bl	8002494 <_kill>
 8007dca:	1c43      	adds	r3, r0, #1
 8007dcc:	d102      	bne.n	8007dd4 <_kill_r+0x1c>
 8007dce:	682b      	ldr	r3, [r5, #0]
 8007dd0:	b103      	cbz	r3, 8007dd4 <_kill_r+0x1c>
 8007dd2:	6023      	str	r3, [r4, #0]
 8007dd4:	bd38      	pop	{r3, r4, r5, pc}
 8007dd6:	bf00      	nop
 8007dd8:	200004a4 	.word	0x200004a4

08007ddc <_getpid_r>:
 8007ddc:	f7fa bb52 	b.w	8002484 <_getpid>

08007de0 <__swhatbuf_r>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	460c      	mov	r4, r1
 8007de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de8:	2900      	cmp	r1, #0
 8007dea:	b096      	sub	sp, #88	; 0x58
 8007dec:	4615      	mov	r5, r2
 8007dee:	461e      	mov	r6, r3
 8007df0:	da0d      	bge.n	8007e0e <__swhatbuf_r+0x2e>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007df8:	f04f 0100 	mov.w	r1, #0
 8007dfc:	bf0c      	ite	eq
 8007dfe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007e02:	2340      	movne	r3, #64	; 0x40
 8007e04:	2000      	movs	r0, #0
 8007e06:	6031      	str	r1, [r6, #0]
 8007e08:	602b      	str	r3, [r5, #0]
 8007e0a:	b016      	add	sp, #88	; 0x58
 8007e0c:	bd70      	pop	{r4, r5, r6, pc}
 8007e0e:	466a      	mov	r2, sp
 8007e10:	f000 f848 	bl	8007ea4 <_fstat_r>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	dbec      	blt.n	8007df2 <__swhatbuf_r+0x12>
 8007e18:	9901      	ldr	r1, [sp, #4]
 8007e1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007e1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007e22:	4259      	negs	r1, r3
 8007e24:	4159      	adcs	r1, r3
 8007e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e2a:	e7eb      	b.n	8007e04 <__swhatbuf_r+0x24>

08007e2c <__smakebuf_r>:
 8007e2c:	898b      	ldrh	r3, [r1, #12]
 8007e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e30:	079d      	lsls	r5, r3, #30
 8007e32:	4606      	mov	r6, r0
 8007e34:	460c      	mov	r4, r1
 8007e36:	d507      	bpl.n	8007e48 <__smakebuf_r+0x1c>
 8007e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	6123      	str	r3, [r4, #16]
 8007e40:	2301      	movs	r3, #1
 8007e42:	6163      	str	r3, [r4, #20]
 8007e44:	b002      	add	sp, #8
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	ab01      	add	r3, sp, #4
 8007e4a:	466a      	mov	r2, sp
 8007e4c:	f7ff ffc8 	bl	8007de0 <__swhatbuf_r>
 8007e50:	9900      	ldr	r1, [sp, #0]
 8007e52:	4605      	mov	r5, r0
 8007e54:	4630      	mov	r0, r6
 8007e56:	f7fe febd 	bl	8006bd4 <_malloc_r>
 8007e5a:	b948      	cbnz	r0, 8007e70 <__smakebuf_r+0x44>
 8007e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e60:	059a      	lsls	r2, r3, #22
 8007e62:	d4ef      	bmi.n	8007e44 <__smakebuf_r+0x18>
 8007e64:	f023 0303 	bic.w	r3, r3, #3
 8007e68:	f043 0302 	orr.w	r3, r3, #2
 8007e6c:	81a3      	strh	r3, [r4, #12]
 8007e6e:	e7e3      	b.n	8007e38 <__smakebuf_r+0xc>
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	6020      	str	r0, [r4, #0]
 8007e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	9b00      	ldr	r3, [sp, #0]
 8007e7c:	6163      	str	r3, [r4, #20]
 8007e7e:	9b01      	ldr	r3, [sp, #4]
 8007e80:	6120      	str	r0, [r4, #16]
 8007e82:	b15b      	cbz	r3, 8007e9c <__smakebuf_r+0x70>
 8007e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f000 f81d 	bl	8007ec8 <_isatty_r>
 8007e8e:	b128      	cbz	r0, 8007e9c <__smakebuf_r+0x70>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f023 0303 	bic.w	r3, r3, #3
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	431d      	orrs	r5, r3
 8007ea0:	81a5      	strh	r5, [r4, #12]
 8007ea2:	e7cf      	b.n	8007e44 <__smakebuf_r+0x18>

08007ea4 <_fstat_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4d07      	ldr	r5, [pc, #28]	; (8007ec4 <_fstat_r+0x20>)
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4604      	mov	r4, r0
 8007eac:	4608      	mov	r0, r1
 8007eae:	4611      	mov	r1, r2
 8007eb0:	602b      	str	r3, [r5, #0]
 8007eb2:	f7fa fb4e 	bl	8002552 <_fstat>
 8007eb6:	1c43      	adds	r3, r0, #1
 8007eb8:	d102      	bne.n	8007ec0 <_fstat_r+0x1c>
 8007eba:	682b      	ldr	r3, [r5, #0]
 8007ebc:	b103      	cbz	r3, 8007ec0 <_fstat_r+0x1c>
 8007ebe:	6023      	str	r3, [r4, #0]
 8007ec0:	bd38      	pop	{r3, r4, r5, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200004a4 	.word	0x200004a4

08007ec8 <_isatty_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	4d06      	ldr	r5, [pc, #24]	; (8007ee4 <_isatty_r+0x1c>)
 8007ecc:	2300      	movs	r3, #0
 8007ece:	4604      	mov	r4, r0
 8007ed0:	4608      	mov	r0, r1
 8007ed2:	602b      	str	r3, [r5, #0]
 8007ed4:	f7fa fb4d 	bl	8002572 <_isatty>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d102      	bne.n	8007ee2 <_isatty_r+0x1a>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	b103      	cbz	r3, 8007ee2 <_isatty_r+0x1a>
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
 8007ee4:	200004a4 	.word	0x200004a4

08007ee8 <_init>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	bf00      	nop
 8007eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eee:	bc08      	pop	{r3}
 8007ef0:	469e      	mov	lr, r3
 8007ef2:	4770      	bx	lr

08007ef4 <_fini>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	bf00      	nop
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr
